/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 10.04.2024 11:15:44

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0026758939493447542, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 26134, -32030, -33852, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00018918223213404417, 0.00017140105774160475, 0.00016931802383624017, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 81,64,119,-96,-71,-2,-11,17,-13,57,23,-7,-29,-85,81,29,-64,65,84,97,-19,-14,21,-77,-101,127,-58,3,100,22,-12,-10, 
  /* [1][0][][] */ 59,-38,-68,24,-11,127,-21,-7,118,-48,-7,-94,-65,103,36,-50,91,-45,-24,-93,-111,11,123,71,16,6,4,-12,-80,-51,-5,-24, 
  /* [2][0][][] */ -38,79,-78,81,86,-39,-43,116,93,21,127,-21,-97,-85,87,116,-81,-56,-8,-113,68,108,-50,-92,86,-71,-15,-116,9,-74,87,-21, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0036537414416670799, 0.0033103276509791613, 0.0032700973097234964, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 254, 201, -64, 146, 220, 58, 106, 193, 129, -42, 191, 976, -266, -5, -80, -60, -92, -243, 1141, -374, -316, -695, 136, -123, -387, 1153, -406, -378, 944, -241, 122, -299, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.0295577491633594e-05, 4.1414255974814296e-05, 4.4669719500234351e-05, 4.8033543862402439e-05, 4.1782510379562154e-05, 4.4808322854805738e-05, 4.3202791857765988e-05, 4.4029766286257654e-05, 4.2472653149161488e-05, 4.666827226174064e-05, 4.4692904339171946e-05, 5.6697663239901885e-05, 4.9174297600984573e-05, 4.1509283619234338e-05, 4.7798188461456448e-05, 4.4904936657985672e-05, 4.1735562263056636e-05, 4.5705222873948514e-05, 5.8030404034070671e-05, 4.0704861021367833e-05, 3.9790826122043654e-05, 4.5837659854441881e-05, 4.943760359310545e-05, 4.1322669858345762e-05, 4.2441210098331794e-05, 4.690570494858548e-05, 4.8718164180172607e-05, 4.3012238165829331e-05, 4.1818268073257059e-05, 4.6461926103802398e-05, 4.123523467569612e-05, 4.2018349631689489e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -35,-56,116,14,104,-13,-88,-112,73,-115,-113,-7,31,4,-35,63,-56,-26,-69,-62,-77,-104,9,119,-115,-3,87,-45,114,0,-16,-83,96,-58,-92,62,-121,-83,-102,36,83,-87,-101,102,58,-120,115,-18,25,-60,-66,106,-74,-43,-102,106,39,76,127,-111,-100,78,-56,64,-6,17,82,107,57,108,98,-122,104,-106,41,95,-111,19,-59,40,62,-5,92,-2,-59,-40,-89,111,33,127,-7,-117,-1,78,29,28, 
  /* [1][0][][] */ -56,40,-72,-3,-33,89,43,17,78,-106,-104,121,92,-27,31,65,118,-46,32,126,-56,-1,41,34,42,28,-43,100,12,1,101,-68,60,111,-7,35,59,67,-8,-62,-63,6,-19,-95,-31,40,-28,-55,-26,-90,124,57,3,89,-77,-47,16,94,69,89,-72,124,-62,-86,-54,38,84,50,116,30,7,6,-122,102,-48,53,89,-44,-39,78,-83,94,-55,-119,31,127,-70,-68,78,84,102,20,89,98,26,-5, 
  /* [2][0][][] */ 36,31,-51,88,-14,-62,82,84,-98,101,-40,127,115,-3,77,-111,-55,-29,28,46,-93,-14,109,18,-29,71,99,22,-59,68,75,83,-67,-26,-75,-110,-63,85,94,-33,-118,-78,8,-9,-86,108,-31,-74,95,35,115,-91,-48,53,17,15,-72,86,-38,0,-3,95,-43,56,78,38,47,75,-99,58,13,-68,46,-77,29,29,-60,-20,1,6,30,-58,7,-48,-3,-100,-20,-38,84,104,-31,-2,-30,-88,-50,-71, 
  /* [3][0][][] */ 76,6,30,-18,-61,55,-96,43,42,-5,66,-14,63,84,73,2,100,94,-45,21,102,-76,-55,-96,-15,-91,-76,79,27,-84,75,17,-46,-22,-11,-6,-94,-13,45,52,-13,-79,-80,8,75,32,-33,-75,63,-82,16,10,83,37,88,-82,-98,-109,-104,-47,-97,6,-22,74,63,-23,-53,-20,-17,-58,-13,88,2,-87,61,-47,37,92,91,-54,-74,-127,15,92,31,50,-38,-97,-73,46,6,-91,86,-74,-76,45, 
  /* [4][0][][] */ 65,114,-8,52,-29,-13,40,25,58,62,2,57,25,-36,-5,-63,-15,3,-68,26,115,-89,92,36,-14,9,71,-87,-46,50,-68,-43,75,127,14,-94,-60,4,-107,62,-41,-57,-65,-85,44,117,47,59,26,-36,-38,-68,-96,57,-79,29,42,-94,30,24,3,-114,-25,-59,-35,67,6,-25,43,-95,-111,-85,-69,30,113,56,76,-19,1,-56,17,-62,-110,-8,9,83,100,15,-113,-69,58,54,38,116,-93,-13, 
  /* [5][0][][] */ 98,-88,68,81,11,-120,28,53,106,-127,0,-74,-6,90,34,38,59,63,-66,94,36,49,16,-24,-103,-69,-16,-87,47,34,17,-89,-41,7,-82,15,-122,-30,46,24,-80,-45,40,94,-30,25,38,-48,-102,107,-5,38,42,22,37,-23,111,53,-66,-37,28,-90,38,-63,-24,100,-27,30,72,3,105,-63,-50,66,-28,-72,13,-49,13,76,107,13,20,107,-75,81,-5,42,71,-90,116,91,-25,29,73,-76, 
  /* [6][0][][] */ 14,-40,127,78,-62,-65,1,66,-13,-43,7,-79,125,75,119,-116,51,3,-1,95,-73,-110,122,62,-60,-83,-5,-35,-17,-118,51,-80,-87,-119,-27,-101,16,38,-110,79,85,59,26,-10,-112,104,-91,-38,-78,13,8,-68,61,-56,93,-27,7,-6,-59,118,-92,45,62,-73,-51,65,108,-50,73,-2,-92,9,68,-70,-59,-30,-83,-83,-54,-24,32,3,60,-30,-69,-86,-33,-98,86,93,97,12,-41,-68,73,-23, 
  /* [7][0][][] */ 121,74,-42,-42,-72,118,-14,7,112,-23,-88,19,52,-86,50,74,57,20,-6,118,54,37,-3,90,-64,108,43,35,-75,111,-19,42,24,30,62,105,-110,91,-2,-19,99,-71,91,72,56,2,107,-108,52,-51,-127,-62,-32,91,23,35,113,-88,7,-51,-1,-41,86,-106,-59,-47,69,32,-96,27,50,81,70,31,63,59,-54,55,-91,47,97,-49,-29,-63,91,41,-103,100,84,10,94,67,-52,-30,0,-59, 
  /* [8][0][][] */ 21,37,-57,-91,36,32,-71,-16,10,13,51,90,-24,-48,-82,-70,-65,102,-61,25,39,-24,82,116,-118,100,48,65,-66,29,-90,127,93,-25,38,2,102,11,-12,79,89,110,-107,-115,-4,-24,-15,111,21,-81,-95,8,-60,0,-25,-104,56,117,-102,110,107,8,53,119,-21,-39,-22,109,-76,58,36,1,68,73,16,19,-39,106,88,72,44,52,-121,-78,31,50,78,-33,46,-32,-76,109,-84,-91,-41,68, 
  /* [9][0][][] */ -1,7,105,42,90,-83,-46,-111,38,63,-9,65,4,-56,-95,-25,8,-1,-94,-58,11,91,-100,-97,103,8,-12,23,-6,-57,-83,92,50,-2,24,-17,-63,15,-34,-43,44,-59,50,-84,73,21,-96,50,45,20,-47,-47,66,-71,-65,107,75,-54,5,-5,-61,122,79,-73,-66,4,96,41,-40,94,102,-68,30,80,-80,-89,-74,-109,-38,97,29,47,120,25,-42,-90,35,-15,93,28,-30,99,127,-4,56,-34, 
  /* [10][0][][] */ -54,86,84,-65,-19,107,109,34,36,-3,29,-64,89,78,-28,14,-28,81,-97,-54,-16,31,56,-61,34,60,-110,-127,-45,83,-91,-72,82,102,111,77,-47,12,-25,41,-28,115,-100,-31,-87,-51,3,-57,-2,5,14,15,55,26,-56,-29,-97,-15,32,-39,-14,41,116,44,121,-66,-91,-13,31,-14,-104,-65,70,69,-75,105,-7,63,70,23,82,-15,42,108,-92,74,101,-15,39,13,4,-63,-50,-38,-41,-59, 
  /* [11][0][][] */ 97,30,15,94,127,62,60,50,96,112,-37,98,22,-47,46,-34,-24,-66,73,47,32,77,40,-61,-48,-53,2,71,74,-1,34,-4,-50,-40,60,54,-17,74,4,-29,-5,94,-42,27,-12,-25,-55,-46,76,79,116,46,-48,-60,39,39,-39,-41,-1,-51,-44,99,77,8,28,82,-22,35,72,56,-52,-44,59,106,-59,62,-33,51,-15,84,-69,18,-42,-21,51,-45,24,-8,-65,11,24,-63,-52,-24,-41,-25, 
  /* [12][0][][] */ 4,52,-51,-5,92,-1,-37,22,-71,63,-20,21,-12,11,35,-73,-93,-34,-46,-78,17,-14,10,78,-63,-51,83,-77,82,5,-35,94,-80,-69,-40,6,1,-73,-23,30,93,29,-103,-41,-26,-79,-42,98,-44,-105,-43,84,28,-7,-79,67,-22,-56,48,53,55,127,-13,42,89,22,-45,94,42,83,36,64,75,93,-21,-9,-38,26,-108,-88,-58,115,47,5,-38,21,42,92,-88,-102,72,31,91,-21,18,62, 
  /* [13][0][][] */ 122,-62,99,101,78,115,85,62,80,-123,14,-47,66,72,69,-47,-123,-66,-68,34,77,-31,121,-49,-70,30,5,23,-100,-88,87,46,46,115,-32,37,-105,-24,23,73,-59,85,-56,13,-42,31,5,-31,41,94,-61,-97,-95,40,108,-86,-34,35,-37,-77,-22,97,-79,22,-53,-62,-99,90,-39,-13,107,3,-102,33,-72,-48,-106,67,84,-66,59,-122,90,25,-82,-102,95,127,-5,-48,-75,64,109,-51,75,-3, 
  /* [14][0][][] */ -53,-98,69,62,56,-24,-14,-106,-71,-55,62,58,-28,-86,-83,-80,-49,-53,14,24,-53,28,-10,55,-103,-67,-28,27,-113,-111,-92,36,92,-21,-31,-12,71,106,34,-100,-5,-108,30,71,59,-107,60,-78,101,25,58,49,89,-14,-14,12,-49,0,46,82,-31,-95,-23,63,-80,-10,67,-98,-79,-82,-94,75,-12,74,46,-72,52,-104,48,16,40,-32,-127,-36,-108,-81,-116,96,90,9,83,-54,64,94,-12,44, 
  /* [15][0][][] */ 14,-27,-34,68,97,-76,61,-92,54,-2,-67,21,127,-4,-83,-109,89,11,-89,29,41,20,67,108,80,74,41,82,24,53,60,-98,4,4,-56,-7,-65,108,103,-61,15,103,-45,-30,27,-79,-41,-80,-11,-74,7,26,-98,-102,-44,-2,56,45,-38,105,-53,-72,6,99,-31,94,-66,7,-49,7,53,-75,8,-8,59,-103,0,51,104,73,-76,58,-102,-60,-115,-30,-90,37,80,65,-98,-39,54,112,-106,106, 
  /* [16][0][][] */ -66,-2,100,-59,25,110,-54,37,58,40,-109,63,-40,-49,-56,-57,110,89,80,67,124,81,-41,54,-39,47,-68,72,-103,23,46,21,-106,85,50,58,-46,60,-52,-70,29,-41,76,92,65,109,111,-11,-55,-107,-16,126,-34,127,71,44,41,102,62,15,127,90,32,72,55,20,-39,94,43,105,-22,-2,31,88,64,87,-8,99,-111,-15,20,-105,57,18,16,104,107,17,88,20,-13,124,66,-28,-79,30, 
  /* [17][0][][] */ 30,-109,33,77,-8,-112,-66,-94,35,-85,78,47,127,59,-113,42,20,45,99,103,-93,-16,7,-54,24,65,-77,17,92,-55,-38,67,-30,-25,41,2,-55,91,-84,-30,-95,-43,-20,-15,3,9,77,-110,78,92,24,18,-27,71,88,-72,-120,73,-70,-113,37,-90,67,86,-87,-75,38,-95,-112,-10,89,27,24,-110,-71,63,107,-53,38,-58,3,19,-60,-89,-113,63,72,-37,11,68,-94,-115,-8,79,8,9, 
  /* [18][0][][] */ -76,92,122,-26,28,-75,-57,43,11,102,-65,-10,-3,36,79,-30,36,-17,72,-30,75,-5,45,-31,58,-65,6,111,42,19,19,28,37,-23,-53,-66,21,24,9,51,-30,12,-16,24,-73,26,14,31,25,-21,73,18,-54,-20,28,78,-38,24,13,-71,62,127,-9,23,-64,-76,6,66,36,-40,-39,88,-38,-14,-67,-43,37,76,16,-34,-39,29,-7,-49,90,-20,63,47,-80,-47,-38,73,69,-45,39,-6, 
  /* [19][0][][] */ 16,27,75,36,77,-93,96,93,92,-62,26,-13,-82,29,-62,58,73,-115,112,57,-28,79,-63,10,76,-86,25,-77,-98,-127,-74,45,78,-91,32,-4,7,-76,-61,-110,43,-126,-90,8,-94,28,77,-101,-36,38,-30,44,-39,11,3,-14,21,96,14,-33,57,-52,101,57,-75,-6,-33,-7,-12,53,74,-57,-69,-127,-60,-88,-28,-122,10,106,56,-115,-34,77,-95,-12,3,-8,89,27,-9,63,-35,115,71,-52, 
  /* [20][0][][] */ -21,74,76,99,-69,106,14,65,11,20,-98,16,24,88,38,-83,-57,-50,-73,-44,15,-51,-84,-82,83,-76,-117,46,29,10,-46,114,107,41,-7,61,54,-43,-15,-121,-99,-46,-95,-112,-36,-73,-84,110,59,-127,-90,33,47,112,49,-6,90,76,117,93,104,-26,-76,-42,-29,-77,-56,12,-91,-80,-76,74,-66,-89,33,21,114,83,113,119,85,28,97,-32,58,117,-18,73,14,96,26,63,23,24,-10,10, 
  /* [21][0][][] */ 74,53,50,-112,73,-85,52,-3,-18,-78,-85,22,-12,18,-65,-102,-114,-45,7,-19,82,-63,49,-95,36,-96,-48,51,-4,-8,-24,-33,-10,2,-101,-125,85,74,-127,-48,-24,-11,8,-31,-107,-96,-90,69,-38,-82,-20,65,15,50,-104,10,-66,30,-61,94,34,-88,-2,-27,60,11,-51,-81,-113,-21,37,54,12,-32,49,45,-123,-46,41,81,-5,75,13,-85,6,-108,42,-96,-116,55,83,-117,-60,-79,45,-43, 
  /* [22][0][][] */ 39,-43,-73,-87,64,-49,95,48,-94,74,-60,-127,85,-90,-94,-86,34,79,-112,-47,86,-69,30,31,74,-3,-111,67,-66,-83,-60,-87,45,63,12,13,-6,-5,-54,-104,10,-6,-2,92,54,-95,88,-17,-47,-100,9,-4,-81,-68,-34,36,-1,-38,-25,-31,111,-75,-59,-122,-46,22,-110,-55,97,85,-49,3,-61,13,71,-99,36,-42,51,80,94,-84,-66,-104,71,78,82,-23,-46,36,-75,59,29,19,-18,80, 
  /* [23][0][][] */ 62,-97,-1,59,94,-127,2,-113,62,-101,85,68,6,-118,12,-38,87,-36,-111,95,94,-86,105,-43,-15,-24,85,20,68,52,76,-40,-39,45,13,29,91,-12,-113,6,-114,-3,9,-122,-78,-95,112,23,81,-116,-112,-55,87,-61,-63,83,-82,-15,96,48,-127,-118,-64,-7,26,37,-123,-112,60,-15,121,-79,-8,-44,-49,-100,47,-27,97,124,-56,-72,19,-107,97,4,118,-22,-95,43,105,-6,99,-57,-34,93, 
  /* [24][0][][] */ -86,-59,-114,-77,-92,-116,-78,-102,60,111,75,38,109,54,-49,-127,-92,35,19,-54,89,-90,-65,-46,45,-36,66,50,100,55,-5,-69,-2,1,46,20,-63,-95,58,-30,-84,-110,96,-5,14,-46,36,65,-93,-54,-28,11,63,53,64,-82,-13,70,20,-8,84,-14,34,87,-102,90,-56,-98,-110,44,-67,-36,-48,35,87,94,58,-86,-114,-92,-89,-104,-73,-126,-7,55,-22,-109,18,-117,-1,-81,-26,21,-101,23, 
  /* [25][0][][] */ -77,-39,-24,28,117,-46,-72,83,65,-52,-19,36,61,12,-69,-5,-47,69,42,-100,71,110,18,-27,47,-48,-78,77,84,-84,55,109,99,-89,90,75,127,-48,7,-8,-67,108,-81,26,102,49,62,61,-79,92,-56,14,70,-14,-29,15,4,54,-64,87,109,90,43,53,-1,81,16,0,-86,9,-1,-85,65,-99,85,52,70,99,32,39,54,73,-33,78,-53,-33,-81,-82,-11,-24,107,21,-105,-5,-20,-39, 
  /* [26][0][][] */ 46,-110,-30,-19,-91,-5,-16,-19,-100,-127,89,62,-80,-45,3,-18,93,24,-76,-61,10,55,80,5,40,51,5,29,0,9,-86,-3,-27,-57,-93,-96,-72,72,-50,92,-90,85,43,22,-68,60,-39,83,-24,20,9,88,3,-43,-8,-98,89,59,41,17,13,-102,54,-16,97,-23,-58,46,-81,63,71,83,64,-88,-78,-3,38,-103,-91,1,-30,63,68,-68,64,-5,-46,9,-76,97,1,19,-48,94,45,74, 
  /* [27][0][][] */ 5,2,-68,-104,-122,-77,-75,-23,49,97,30,-79,-1,51,75,-32,59,-20,69,-89,-94,5,-35,-30,-111,39,-109,19,63,23,-35,-16,56,61,-95,-92,-94,-71,-118,81,-101,11,22,10,91,19,61,97,84,85,81,-80,-93,-92,-12,-39,95,-22,-100,-85,-53,-54,-41,52,32,-52,-117,98,42,7,-106,4,60,-59,-16,-92,40,-73,81,99,79,-28,127,-62,-79,-89,-36,25,-51,-9,-41,-55,52,13,82,52, 
  /* [28][0][][] */ 92,12,125,68,-77,-63,-78,-46,-22,-45,80,92,-36,-71,21,127,107,118,-10,62,-24,50,-89,-55,-79,97,-68,-40,-50,-85,15,-22,-109,18,101,84,59,-111,-15,47,108,61,-76,68,-104,10,15,77,31,-59,-47,-49,-30,13,60,47,50,0,117,72,-1,11,-106,9,46,93,6,102,-99,44,-82,-30,116,44,-17,-68,-102,-41,-64,62,-68,-43,122,-15,79,-108,86,-76,-106,-62,-2,-71,-40,42,-103,-60, 
  /* [29][0][][] */ 41,46,60,-48,-68,6,-113,3,89,10,-87,-80,127,-96,-48,-45,-96,88,23,-67,-76,-33,50,0,-33,1,-44,-14,-95,-14,95,-9,46,-5,-72,-54,4,88,-13,80,38,93,-45,73,-5,93,-56,-24,15,-14,81,-93,65,-98,98,39,-92,47,-40,95,-106,125,-95,-57,-63,-64,47,75,80,-81,31,-70,112,66,50,25,99,-57,-32,33,-12,-48,-2,-77,54,100,38,65,-42,84,58,69,-98,8,-5,52, 
  /* [30][0][][] */ 35,-65,-77,38,-119,25,-63,-8,120,-34,4,-83,-109,9,65,-7,-1,41,96,-102,43,-102,-117,18,-112,27,-69,88,-37,-127,-91,12,-90,-68,-124,-53,0,-12,2,31,98,-74,-7,109,113,-39,112,69,-74,68,-20,-102,98,-48,-6,111,-80,-69,-83,-55,-120,-33,-70,-28,-107,-84,-97,99,-57,119,49,-56,-101,115,44,-106,-58,-74,-75,-77,35,-2,-126,-17,-107,36,-113,116,-37,-115,84,60,-37,2,13,-70, 
  /* [31][0][][] */ 80,-97,52,103,59,62,-64,-102,-31,-10,-85,-83,115,-127,-52,112,-65,-96,50,47,63,34,-33,105,44,-120,36,87,-73,-77,48,107,18,18,-96,-6,103,-35,-70,-117,58,-74,-33,30,2,-59,-44,22,71,30,109,-35,-75,-63,-86,22,-122,69,5,114,-42,16,85,-78,69,111,-48,-82,72,-123,-121,9,-99,-46,2,12,-63,-50,48,101,-81,-32,58,72,55,95,-99,14,17,-57,-89,-59,10,104,-8,-25, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017125620506703854, 0.0017601058352738619, 0.0018984630005434155, 0.0020414255559444427, 0.001775756711140275, 0.0019043537322431803, 0.0018361186375841498, 0.0018712650053203106, 0.0018050877843052149, 0.0019834015984088182, 0.0018994484562426805, 0.0024096507113426924, 0.0020899076480418444, 0.0017641445156186819, 0.0020314229186624289, 0.0019084597006440163, 0.0017737613525241613, 0.001942471950314939, 0.0024662921205163002, 0.0017299565952271223, 0.0016911100829020143, 0.0019481005147099495, 0.0021010981872677803, 0.0017562134889885783, 0.0018037514528259635, 0.001993492478504777, 0.0020705219358205795, 0.0018280200893059373, 0.0017772763967514038, 0.0019746317993849516, 0.0017524973955005407, 0.0017857798375189304, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -1709, 3282, 7546, 2410, -2758, -3692, 16017, 2069, 2068, -1340, 9034, -138, -7604, 2033, 13578, 6182, 11445, 4913, -4255, -4532, 3921, 23918, 19342, 11504, 892, 787, 3835, 2813, 1685, -3826, 5226, -2113, -222, 4403, 47, 984, 7922, 4314, -1628, 4403, 8625, 4790, 4246, 10048, 3721, 3664, 1668, 6230, 3512, -4219, -6663, 384, -286, -1135, 1534, -32, 210, -933, -3474, 8426, -845, 1418, -1276, -1444, -3493, 6620, 16486, 1525, -2373, 703, 1321, 1679, 1768, -998, 495, 8605, -466, 16394, 12549, -703, 9863, 2293, -403, 1130, 13823, 9542, 4357, 1419, 5002, 3565, -273, -6053, 518, -2384, -1601, -1858, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00036085819010622799, 0.00047734344843775034, 0.00031551980646327138, 0.00036639563040807843, 0.00038749186205677688, 0.00039765541441738605, 0.000207700883038342, 0.0003398492990527302, 0.00029354231082834303, 0.00044858924229629338, 0.00022005647770129144, 0.00025003269547596574, 0.00033425074070692062, 0.0013902076752856374, 0.00022738984262105078, 0.00018846083548851311, 0.00016412173863500357, 0.00029585193260572851, 0.00046081418986432254, 0.00037101644556969404, 0.00015925898333080113, 0.00011308473767712712, 0.0001590104220667854, 0.00014580581046175212, 0.00020891253370791674, 0.00063280231552198529, 0.00077287747990339994, 0.00038320489693433046, 0.00032610874040983617, 0.00051110808271914721, 0.00028193913749419153, 0.00036788114812225103, 0.00025695748627185822, 0.00026375908055342734, 0.00033296336187049747, 0.00026130155310966074, 0.00024259087513200939, 0.00025078424368984997, 0.0003835419483948499, 0.00040260367677547038, 0.00014866885612718761, 0.00054479471873492002, 0.00035489321453496814, 0.00023046880960464478, 0.00051588757196441293, 0.00027432132628746331, 0.00029870381695218384, 0.00034470317768864334, 0.00038354625576175749, 0.00031020835740491748, 0.00022962596267461777, 0.00020633569511119276, 0.00052265048725530505, 0.0002589032519608736, 0.00050520151853561401, 0.00049837975529953837, 0.00050758110592141747, 0.0003015979309566319, 0.00044137050281278789, 0.00021840844419784844, 0.00087032426381483674, 0.00051510462071746588, 0.00019798956054728478, 0.00054438813822343946, 0.00053906493121758103, 0.00029172244830988348, 0.00013229086471255869, 0.00025017478037625551, 0.00049416010733693838, 0.00045776378829032183, 0.00030267238616943359, 0.00029913036269135773, 0.00077039445750415325, 0.00041185630834661424, 0.00035000967909581959, 0.00025368071510456502, 0.00030594872077926993, 0.00011502620327519253, 0.00014549262414220721, 0.00026803649961948395, 0.00014864609693177044, 0.00014735963486600667, 0.000202550771064125, 0.00022439954045694321, 0.00013269082410261035, 0.00024909820058383048, 0.0005400580121204257, 0.00019310423522256315, 0.00014262362674344331, 0.0005747818504460156, 0.00035355775617063046, 0.00032353796996176243, 0.00038831273559480906, 0.00044066403643228114, 0.00040000476292334497, 0.00022782468295190483, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -22,82,4,-127,-53,-25,-30,-58,-25,26,-9,72,19,-63,-6,41, 
  /* [1][0][][] */ -34,30,-56,0,-25,-28,25,-77,69,43,-56,21,-1,6,33,-127, 
  /* [2][0][][] */ 4,9,-20,39,42,33,-54,-48,127,-21,-5,10,-10,103,-60,24, 
  /* [3][0][][] */ 54,-83,-11,-110,22,-45,3,7,115,-4,94,52,-15,49,10,127, 
  /* [4][0][][] */ -77,52,18,45,6,-20,0,52,-3,15,22,-21,-127,-9,-22,28, 
  /* [5][0][][] */ -2,79,123,-1,18,95,-87,78,-48,73,-34,-44,38,-54,-127,18, 
  /* [6][0][][] */ 29,-44,126,-127,35,4,-49,94,-78,-108,35,-39,7,73,-32,62, 
  /* [7][0][][] */ 49,106,-29,-49,105,9,9,-45,127,104,-20,27,23,-13,50,46, 
  /* [8][0][][] */ 9,-74,21,-90,13,-46,12,-71,19,60,61,-14,18,127,82,57, 
  /* [9][0][][] */ 12,-21,-11,127,36,-21,51,-61,-75,121,33,-27,-2,-61,-6,3, 
  /* [10][0][][] */ -5,30,-30,-127,-5,8,-11,37,20,-24,5,-30,-11,-39,7,21, 
  /* [11][0][][] */ -4,23,20,-35,76,-49,90,-76,-107,26,-10,19,4,127,-81,-32, 
  /* [12][0][][] */ 59,-25,-127,-16,38,-94,9,-3,16,27,-44,-31,-8,61,-15,37, 
  /* [13][0][][] */ -18,12,-21,7,-1,-127,-8,19,5,-15,4,-2,11,-13,14,12, 
  /* [14][0][][] */ 37,-34,105,-21,79,0,-127,-91,-13,-43,44,29,11,-53,-28,-34, 
  /* [15][0][][] */ -107,41,-11,-72,-16,21,127,51,-28,31,73,-47,12,92,79,4, 
  /* [16][0][][] */ 7,65,127,74,-9,25,76,60,-82,1,-77,-19,13,1,9,-82, 
  /* [17][0][][] */ -41,-104,-9,25,-77,-18,-62,13,-127,-27,8,-49,-1,36,64,-37, 
  /* [18][0][][] */ 9,37,1,71,43,1,25,-2,71,48,-27,-25,12,127,52,14, 
  /* [19][0][][] */ 6,-16,36,1,86,28,-93,-62,-90,-64,-53,-127,-30,-49,9,-49, 
  /* [20][0][][] */ 85,-22,-49,-46,-6,-112,-1,17,-60,39,-127,-26,30,-8,36,1, 
  /* [21][0][][] */ 79,-33,56,-15,6,-5,4,81,-17,-77,80,28,-17,127,28,80, 
  /* [22][0][][] */ -34,46,-31,127,-76,18,100,82,-28,54,-39,34,16,1,38,-7, 
  /* [23][0][][] */ 57,1,127,-103,27,-14,-9,26,-11,20,-22,-36,1,-10,-99,16, 
  /* [24][0][][] */ -127,45,11,-13,6,101,24,-19,2,13,98,-6,-79,14,51,-32, 
  /* [25][0][][] */ 24,29,18,17,6,12,64,-50,-8,-127,-22,-25,-8,-32,14,17, 
  /* [26][0][][] */ -36,-2,-1,10,-42,-11,-36,-31,-101,-32,3,-32,12,127,-35,54, 
  /* [27][0][][] */ -5,30,10,65,39,-23,-18,-31,61,7,-24,-3,5,127,-9,16, 
  /* [28][0][][] */ 10,67,52,65,127,-18,28,34,-89,-16,-33,-23,10,78,32,-30, 
  /* [29][0][][] */ -3,2,14,10,22,4,8,29,-16,-16,-21,-127,2,-10,-13,0, 
  /* [30][0][][] */ -16,76,-55,82,-32,-20,45,-127,-43,63,-7,6,57,41,74,91, 
  /* [31][0][][] */ -40,-28,-21,-61,4,-9,-44,-114,22,86,-1,-127,-40,-42,16,38, 
  /* [32][0][][] */ -127,-71,0,55,47,43,-17,8,4,-47,-107,40,68,-3,60,63, 
  /* [33][0][][] */ -18,-33,-32,-16,-106,-4,-91,8,60,12,1,-58,35,-126,127,24, 
  /* [34][0][][] */ 48,-5,72,23,44,23,-51,83,-86,-51,67,17,12,-11,-18,127, 
  /* [35][0][][] */ -48,64,-69,12,-19,-14,26,-121,98,90,-95,-5,7,-12,90,-127, 
  /* [36][0][][] */ -29,42,1,127,37,28,113,12,-1,36,-2,3,-20,22,-51,-45, 
  /* [37][0][][] */ -3,0,15,-65,3,-3,-39,-47,-67,-24,-5,-12,3,-127,45,-43, 
  /* [38][0][][] */ 44,82,-9,-46,127,-6,34,-36,102,76,-10,-2,11,-22,41,17, 
  /* [39][0][][] */ -35,60,-5,-127,-23,11,-40,30,34,-65,-29,-21,13,60,42,25, 
  /* [40][0][][] */ -6,-12,33,-100,-13,-11,-8,-33,-127,-9,-26,-35,-18,-124,83,-79, 
  /* [41][0][][] */ -14,-17,-41,-22,1,-25,19,-13,-31,19,-51,-12,-127,15,28,35, 
  /* [42][0][][] */ 127,76,-33,-20,-70,-56,-12,-47,-4,32,86,-54,-53,54,102,-100, 
  /* [43][0][][] */ 3,92,-91,6,77,-31,127,-38,38,109,-28,8,29,-122,-81,-44, 
  /* [44][0][][] */ -34,-8,20,-48,46,16,-99,-127,-24,-6,-1,0,1,-38,82,-59, 
  /* [45][0][][] */ 0,28,-127,-29,30,-74,29,-63,-5,39,10,-61,30,-17,47,-15, 
  /* [46][0][][] */ 17,-4,-16,-99,-17,21,25,-26,-127,-18,7,12,-9,-125,82,-27, 
  /* [47][0][][] */ 23,46,22,-13,127,-18,-24,18,-59,44,2,25,5,6,117,-24, 
  /* [48][0][][] */ -127,-66,-22,37,68,17,9,-16,8,-29,-102,43,56,12,70,43, 
  /* [49][0][][] */ 14,7,101,77,125,-3,47,28,-127,-52,-39,-80,18,124,22,-59, 
  /* [50][0][][] */ 7,3,-127,-25,29,-116,-59,-35,-34,-62,19,-42,19,-18,9,34, 
  /* [51][0][][] */ 7,41,45,16,29,4,2,31,-127,63,9,-114,4,-110,-19,91, 
  /* [52][0][][] */ 11,51,6,60,52,-4,32,38,69,93,-19,-45,32,127,55,16, 
  /* [53][0][][] */ -8,-44,-12,-21,-94,-3,-83,4,52,16,6,-65,27,-127,119,12, 
  /* [54][0][][] */ 58,-24,-52,13,127,72,-109,-37,-84,1,-27,-68,2,-44,-13,-33, 
  /* [55][0][][] */ 51,-13,-2,8,48,-44,-61,-127,-32,-67,-46,16,-9,-19,11,-3, 
  /* [56][0][][] */ -21,19,29,-27,-12,-22,-97,64,-15,127,-10,-21,27,3,2,8, 
  /* [57][0][][] */ 5,13,-46,-22,-57,-47,122,98,-35,36,-12,-1,29,27,127,-5, 
  /* [58][0][][] */ 40,24,-127,32,87,89,-32,46,-100,-38,2,7,-38,24,-1,-19, 
  /* [59][0][][] */ -87,72,108,27,-67,-66,127,121,26,4,35,-12,9,21,64,-8, 
  /* [60][0][][] */ 8,-4,-53,-7,16,-127,-28,-2,-18,-9,-13,-30,31,-22,9,5, 
  /* [61][0][][] */ 18,-9,21,127,67,22,17,5,-85,5,14,47,-17,17,32,-57, 
  /* [62][0][][] */ -46,127,18,-56,-39,-2,-65,52,-15,-62,-96,-64,-10,-97,-52,-39, 
  /* [63][0][][] */ -38,26,-22,127,-83,13,-71,-32,-66,-23,-24,-43,18,69,36,43, 
  /* [64][0][][] */ 14,-1,4,49,10,7,-10,72,35,7,-11,-42,-11,-127,50,-1, 
  /* [65][0][][] */ -14,-50,4,-127,47,-44,68,-32,-20,55,19,-108,-18,7,10,-42, 
  /* [66][0][][] */ 25,-9,53,-15,11,-5,-5,92,17,-90,48,37,-4,127,5,60, 
  /* [67][0][][] */ 9,46,-19,-127,-9,-7,-54,37,76,-86,-23,-1,28,87,82,42, 
  /* [68][0][][] */ -26,29,127,15,16,-1,-2,-1,-46,-13,-12,-30,15,-16,85,-29, 
  /* [69][0][][] */ 127,71,-12,-2,-82,-29,-30,-29,-1,27,86,-55,-64,62,67,-84, 
  /* [70][0][][] */ 33,11,-51,-17,-32,34,48,127,-35,91,-40,2,14,68,-20,28, 
  /* [71][0][][] */ 9,1,-5,14,7,-83,5,22,-30,12,-74,9,-127,1,39,45, 
  /* [72][0][][] */ 18,14,-127,17,18,10,31,94,-32,-21,14,-4,19,21,-4,2, 
  /* [73][0][][] */ -48,20,39,0,41,-29,-70,-127,14,-63,30,-21,13,-49,40,-17, 
  /* [74][0][][] */ 1,38,43,125,19,-3,-81,84,-62,17,-51,37,19,-127,42,-94, 
  /* [75][0][][] */ -25,40,-62,-1,-1,-7,13,-26,127,10,-26,-17,19,113,-35,-5, 
  /* [76][0][][] */ 3,-13,-1,24,7,-18,-12,67,21,-35,-12,-127,-7,-3,4,15, 
  /* [77][0][][] */ -21,43,3,127,-69,33,80,119,19,48,-23,29,-11,-27,-4,-23, 
  /* [78][0][][] */ -1,14,53,-127,32,-20,-44,37,31,-57,-8,-51,33,114,29,29, 
  /* [79][0][][] */ -18,-82,-78,-61,-87,-6,23,-81,127,6,19,48,12,32,35,-57, 
  /* [80][0][][] */ -26,-14,127,-110,-2,-25,12,-83,-71,84,-72,-126,39,91,103,-56, 
  /* [81][0][][] */ -48,52,-127,26,70,-119,-16,49,4,-49,65,-6,20,6,11,-6, 
  /* [82][0][][] */ 127,-12,-10,21,10,-116,-32,26,-18,-10,-104,1,113,4,0,35, 
  /* [83][0][][] */ -33,77,-105,-91,-43,-7,39,-112,57,64,-59,-127,12,44,59,100, 
  /* [84][0][][] */ -43,39,55,-35,4,-21,57,-127,-31,36,-11,-56,36,42,64,-9, 
  /* [85][0][][] */ -74,127,31,-120,-79,-24,-28,-1,-51,-9,-72,18,10,-13,-83,-27, 
  /* [86][0][][] */ -16,1,-39,-6,-39,-28,127,25,-8,-20,-7,5,14,22,98,-13, 
  /* [87][0][][] */ -22,-46,-2,-120,14,-41,58,-15,-12,26,-5,-127,-21,8,10,-36, 
  /* [88][0][][] */ 88,-14,63,-25,7,-92,-1,13,-57,28,-127,-66,26,24,82,-12, 
  /* [89][0][][] */ 23,-23,-48,-41,32,-16,-26,-11,-43,-3,44,-58,127,-6,20,-47, 
  /* [90][0][][] */ 4,-50,40,-55,71,-10,-65,88,61,-87,-30,-18,-19,118,12,-127, 
  /* [91][0][][] */ -33,-8,-15,-49,7,-12,-27,-80,-2,72,-28,-127,-21,-24,12,2, 
  /* [92][0][][] */ -22,18,41,19,1,-127,12,5,-3,-20,2,-10,4,-24,20,9, 
  /* [93][0][][] */ 42,-18,127,-7,-45,55,29,-27,-15,24,-67,-14,-25,2,25,-2, 
  /* [94][0][][] */ 30,-4,-20,-18,28,-10,-12,-4,-35,-13,18,-50,127,-14,30,-27, 
  /* [95][0][][] */ 127,83,-3,39,-85,-19,-59,-1,-28,-13,92,-36,-44,32,70,-67, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0008392087765969336, 0.0011101058917120099, 0.00073377019725739956, 0.00085208658128976822, 0.00090114778140559793, 0.00092478404985740781, 0.00048302739742211998, 0.00079035066301003098, 0.00068265950540080667, 0.001043235301040113, 0.00051176146371290088, 0.00058147392701357603, 0.00077733065700158477, 0.003233055118471384, 0.00052881590090692043, 0.00043828293564729393, 0.00038168011815287173, 0.0006880307337269187, 0.001071665552444756, 0.00086283270502462983, 0.00037037133006379008, 0.00026298890588805079, 0.00036979329888708889, 0.00033908477053046227, 0.00048584520118311048, 0.001471639727242291, 0.0017973972717300057, 0.00089117803145200014, 0.00075839570490643382, 0.0011886286083608866, 0.00065567524870857596, 0.00085554126417264342, 0.00059757818235084414, 0.00061339588137343526, 0.00077433674596250057, 0.00060768064577132463, 0.00056416727602481842, 0.00058322172844782472, 0.00089196191402152181, 0.00093629170442000031, 0.00034574302844703197, 0.0012669699499383569, 0.00082533666864037514, 0.00053597631631419063, 0.0011997437104582787, 0.00063795933965593576, 0.00069466308923438191, 0.00080163881648331881, 0.00089197192573919892, 0.00072141789132729173, 0.00053401617333292961, 0.00047985254786908627, 0.0012154715368524194, 0.00060210318770259619, 0.0011748924152925611, 0.0011590276844799519, 0.0011804263340309262, 0.00070139358285814524, 0.001026447513140738, 0.00050792883848771453, 0.0020240186713635921, 0.0011979229748249054, 0.00046044282498769462, 0.0012660244246944785, 0.0012536448193714023, 0.00067842722637578845, 0.0003076544962823391, 0.00058180431369692087, 0.0011492145713418722, 0.0010645715519785881, 0.00070389232132583857, 0.00069565500598400831, 0.0017916228389367461, 0.00095780950505286455, 0.00081397953908890486, 0.00058995769359171391, 0.00071151176234707236, 0.00026750395772978663, 0.00033835641806945205, 0.0006233433960005641, 0.00034569008857943118, 0.00034269833122380078, 0.00047105035628192127, 0.00052186165703460574, 0.00030858465470373631, 0.0005793006275780499, 0.0012559543829411268, 0.00044908156269229949, 0.00033168430672958493, 0.0013367078499868512, 0.00082223094068467617, 0.00075241713784635067, 0.00090305681806057692, 0.0010248045437037945, 0.00093024765374138951, 0.0005298271425999701, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -11074, 14507, -16849, -6732, -14901, 8465, 27793, -53665, -2836, 13373, 21578, 12409, -8245, 7999, -3530, 10319, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00084080646047368646, 0.0005430493620224297, 0.00025547985569573939, 0.00023042756947688758, 0.00039902381831780076, 0.00033188582165166736, 0.00032578865648247302, 0.00028888086671940982, 0.00035916292108595371, 0.00027090037474408746, 0.0006514565902762115, 0.00053671433124691248, 0.00043993676081299782, 0.00023410472203977406, 0.00054385385010391474, 0.00037474764394573867, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -16,-9,6,-30,23,-6,-40,-4,21,1,-8,7,-4,-11,-30,8,3,4,2,-1,13,-29,4,4,7,10,5,127,36,-30,35,-16,-1,9,8,2,-7,15,-34,-8,-14,5,3,37,5,10,11,3,27,-3,-10,6,18,-13,-6,74,2,4,-23,-35,-3,20,-1,-22,-40,-60,-18,41,6,22,15,-17,-9,-26,-8,-21,-21,13,-1,5,-11,-22,27,19,-1,-15,-11,-86,6,-9,3,-4,46,-31,-27,-8, 
  /* [1][0][][] */ 30,-58,-66,-54,127,-9,50,38,-21,-82,-44,-12,9,-10,-62,30,-55,5,53,32,17,41,-21,-60,21,-5,-18,-66,40,-18,-62,26,-16,34,5,-7,3,-8,2,12,-29,27,-36,-23,-31,77,7,1,24,-73,3,-43,-12,32,55,11,-61,-26,-27,-35,20,-21,2,-41,-75,98,-20,-26,-10,-25,-13,15,45,-91,-32,8,40,-50,35,5,2,-24,21,1,-36,23,-21,23,24,-26,-8,6,26,5,15,89, 
  /* [2][0][][] */ -11,59,-79,-21,69,75,34,65,-11,-87,-1,-13,-8,4,27,20,1,-15,-54,53,11,5,76,17,53,16,-11,-32,37,-3,44,-42,30,45,-29,37,-127,-86,23,33,13,-48,15,-16,17,-24,-5,57,-21,28,-27,-1,83,-13,-9,52,30,12,34,-4,21,25,36,-23,25,-7,-24,-3,-38,1,-18,-34,-46,-78,13,54,55,40,30,-11,36,-37,16,-10,-35,29,12,42,-11,22,6,-15,-7,-41,-62,10, 
  /* [3][0][][] */ 61,19,99,-10,34,-41,32,-32,-20,-57,17,-28,-4,48,40,108,18,5,21,16,127,-4,46,32,46,-26,2,16,37,53,-2,93,-103,27,27,1,-18,-20,-10,51,-82,-31,70,20,6,44,-49,-82,-53,-35,-48,56,3,-114,-5,18,-92,73,66,31,9,98,-15,-48,33,64,-1,-41,46,2,-14,-65,44,-44,63,-17,-2,5,54,42,-31,-66,36,-18,-31,17,25,45,46,8,22,41,31,102,55,-12, 
  /* [4][0][][] */ 20,0,27,-11,127,28,-8,-33,-29,-44,-28,-20,-46,21,-14,62,31,-67,-41,76,-19,11,27,-13,-3,-13,16,-29,18,-3,51,-41,87,15,-19,17,44,22,19,3,-31,-11,-17,-21,-11,-51,-17,5,44,5,-25,11,4,-21,8,-34,26,-13,-23,23,3,48,63,29,40,56,-13,4,-40,23,35,52,12,-59,-44,-26,25,24,66,-33,-1,-26,13,-13,-61,2,34,55,-39,36,5,-36,11,16,35,-9, 
  /* [5][0][][] */ -1,-7,-6,7,13,-18,42,-35,-25,-36,-10,15,-3,33,-3,21,-7,0,10,-9,27,19,-35,65,12,-9,14,-92,-1,35,18,35,-2,8,5,-54,24,19,-8,15,-4,-13,32,-12,-14,-2,4,-25,-13,-13,10,-9,2,-29,-7,-53,3,15,-15,9,62,11,7,36,2,51,9,77,17,100,5,28,5,6,-2,67,-35,-11,16,14,0,-6,12,19,-9,20,-16,127,7,28,0,-7,-1,16,-48,28, 
  /* [6][0][][] */ 24,-76,28,-36,-32,11,32,7,13,-8,-8,-53,-27,-6,-26,29,19,-11,9,-5,-41,45,19,10,-36,-4,-12,-14,-21,29,34,-16,57,15,68,-11,-6,-9,20,-103,-26,90,-2,-37,13,-22,-26,18,-2,28,-33,74,-15,-52,-9,-16,1,-63,-3,-1,-14,55,28,-76,29,-31,15,-14,-6,22,127,4,-46,23,-35,31,-91,-14,8,2,24,54,36,-5,-18,-4,40,30,27,3,47,-36,-20,-7,-21,0, 
  /* [7][0][][] */ 5,127,42,13,114,56,50,-20,-28,-32,32,-20,-25,34,28,23,6,-37,6,33,44,-42,44,15,-12,15,10,1,16,-21,20,31,40,-1,-47,2,15,7,-18,94,-39,33,10,27,-10,-19,28,-18,-41,-22,38,14,18,-54,-40,60,54,7,-27,0,-11,-40,-11,2,-49,66,-36,-96,-11,-62,-4,76,-12,-26,23,11,54,69,54,-18,-44,-46,-15,10,-20,67,-3,-12,-31,25,-38,-47,-52,-13,28,-14, 
  /* [8][0][][] */ -13,6,53,12,-127,-29,38,-22,24,88,63,13,-10,17,21,14,-44,9,4,-4,-44,5,-106,62,16,-38,58,-8,12,8,0,49,74,-20,-8,7,-22,-11,7,31,19,-35,44,10,-50,-5,39,0,-97,21,20,27,-54,-35,-26,41,14,-51,-74,-25,9,-35,-15,-5,10,69,1,-49,26,4,-47,-27,32,44,52,-10,-24,-43,-16,23,-73,14,-6,-5,23,25,54,42,31,-32,43,51,2,-6,52,22, 
  /* [9][0][][] */ 16,-98,-11,14,105,75,-38,-36,26,-46,95,94,-15,8,87,-93,13,-30,2,12,-55,-40,32,-22,-16,4,6,29,-19,14,8,-20,26,17,-101,29,-7,13,-19,60,23,-77,-16,59,-8,-19,-70,-33,38,18,-23,-78,57,36,-9,-59,-7,84,-7,-4,26,-57,-36,127,-86,-9,2,-10,-5,45,-54,-72,41,6,4,34,62,-69,11,7,-16,-13,12,17,4,-74,15,2,7,-21,-49,39,-61,-9,7,-41, 
  /* [10][0][][] */ -45,-16,-26,-43,-19,-7,61,-29,44,14,31,37,30,-11,-11,4,-3,23,-25,-14,-1,36,15,25,-13,-13,13,-127,27,-39,51,-42,1,22,0,-9,0,38,7,-11,4,-35,30,-51,9,-7,25,16,3,31,-31,-21,-33,-15,-4,-60,19,9,-1,-41,26,8,-3,7,-37,97,-15,-28,17,-11,-5,-21,-30,-5,17,57,-5,34,-21,16,-20,5,11,23,5,-20,-12,126,6,1,11,12,23,-37,53,-29, 
  /* [11][0][][] */ -88,19,3,2,8,-65,-8,-15,-44,-6,-4,27,28,27,-22,5,54,13,-70,-43,27,-5,-5,12,74,2,80,-2,-16,35,-33,26,-6,21,-9,-7,-7,8,22,17,-12,0,6,14,69,22,84,23,51,45,2,46,7,-57,23,-14,-54,-13,-35,-43,-8,-9,0,23,-7,-23,31,10,38,28,-12,24,-25,5,35,2,-28,88,-127,73,-33,-3,-56,-66,121,26,43,-5,22,48,-30,-55,-17,47,-14,5, 
  /* [12][0][][] */ -4,-8,-41,0,53,13,4,-13,-9,15,19,-7,-1,-14,29,-3,-32,-8,5,-20,-15,-20,-35,44,-16,33,-23,88,-17,25,-28,10,-9,21,10,29,-11,-11,18,12,3,-13,4,4,-9,-4,23,20,-2,-4,1,-24,-12,14,-13,-19,-4,-6,13,21,-11,-16,-4,42,32,-71,8,51,-27,-127,-4,46,6,11,14,69,-2,-14,-9,1,-1,14,-39,-1,10,-12,1,-43,-16,14,10,6,-33,32,-6,14, 
  /* [13][0][][] */ -80,65,-3,-8,-67,5,-8,3,-27,-30,46,37,91,21,-17,9,-14,32,-45,-11,27,-9,55,-44,62,32,11,3,14,-24,-42,-101,-93,-33,11,12,3,30,36,-14,-34,79,10,15,39,5,-7,15,71,-21,40,87,57,-51,78,-24,-15,59,41,7,11,30,-16,31,-1,-20,12,24,26,44,18,-127,15,-17,-70,11,45,40,-51,-43,91,-15,16,-31,43,-28,95,10,-7,5,-15,25,35,-37,0,24, 
  /* [14][0][][] */ -30,22,-21,-55,41,2,-17,40,-91,-5,15,6,-28,-62,-77,-27,-87,-21,69,10,30,1,10,-113,-36,21,-62,-19,14,-25,-14,-36,-65,-29,18,11,-15,-2,4,-6,6,78,-77,-24,-43,14,6,8,127,-27,25,-17,36,53,-97,21,-36,26,-101,14,5,25,33,22,-2,30,-4,-4,-64,6,64,30,33,-11,-33,21,61,-76,-26,-100,9,-32,0,36,34,-75,-46,6,-45,27,32,52,5,30,11,-24, 
  /* [15][0][][] */ -33,-78,-15,-41,9,10,-2,-69,-25,24,-8,-37,45,-6,44,-23,-98,-4,-18,19,-12,1,-64,-45,2,2,-6,20,-22,-16,69,-89,-10,23,19,0,-11,17,-105,10,33,-74,-4,30,-22,-51,51,35,51,17,-9,-127,-10,49,-3,45,41,-12,-21,43,4,4,38,0,6,-7,-17,-6,-19,15,2,42,-41,4,6,-38,-33,-11,8,6,-9,40,-10,72,-22,-39,-36,-37,-48,63,24,81,-38,4,-8,-17, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.035734273493289948, 0.023079598322510719, 0.010857893154025078, 0.0097931716591119766, 0.016958512365818024, 0.014105146750807762, 0.013846017420291901, 0.012277436442673206, 0.015264423564076424, 0.011513265781104565, 0.027686905115842819, 0.022810358554124832, 0.018697312101721764, 0.0099494503811001778, 0.023113789036870003, 0.015926774591207504, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 14848, 64595, -2243, -588, 13261, -8136, 801, -1155, 6283, 6974, -4750, 738, 448, 4263, 5373, -8635, -3809, -493, -696, 17480, -9632, 14176, -2147, 7198, 16422, 122, -7445, 16105, 13647, -19838, 1527, 22354, 23992, -7781, 2094, 239, -543, 241, 4226, -5680, -5198, -1367, -8478, 135, 30504, -1496, 12770, -824, -15043, 278, -9, 45, -1653, 18853, -2121, 15523, 20035, 286, 33011, -593, -8690, -808, 1560, -247, -1353, 14043, -674, -9116, -4297, 3467, 331, -3457, 1503, 435, -1837, -4283, 379, -915, 43481, -5399, -5889, -12179, -546, 947, 63472, -12757, -11314, -27088, -8943, 10031, -2001, 34925, -116, -1160, -3561, 1096, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00015910767251625657, 8.7471787992399186e-05, 0.00012206174869788811, 0.00021928382921032608, 0.00026245022309012711, 9.5719624368939549e-05, 5.0776408897945657e-05, 9.758499072631821e-05, 0.00024214043514803052, 0.00034756603417918086, 0.00023377191973850131, 0.00011385404650354758, 0.00025350908981636167, 0.00020224977924954146, 0.00042620219755917788, 0.00014819645730312914, 0.00024134453269653022, 0.00022623033146373928, 0.00020405041868798435, 6.4804895373526961e-05, 8.8788634457159787e-05, 5.7344408560311422e-05, 0.00013999226212035865, 0.00010376258433097973, 8.3567108958959579e-05, 0.0001079163994290866, 0.00014470325550064445, 0.00019188779697287828, 7.2124013968277723e-05, 0.00044778420124202967, 0.00035658822162076831, 0.00027253603911958635, 0.00012047644850099459, 0.00021314680634532124, 0.00023035780759528279, 0.00044444366358220577, 0.00042170958477072418, 0.00025974077288992703, 0.00024641799973323941, 0.00012717593926936388, 0.00025158844073303044, 0.0002067006571451202, 0.00033526521292515099, 8.4314902778714895e-05, 0.00038749046507291496, 8.0051366239786148e-05, 0.00011834857286885381, 0.00030783386318944395, 0.00065031670965254307, 0.00012347240408416837, 0.00036496689426712692, 0.00014052054029889405, 0.000322198640787974, 0.00014578693662770092, 0.00037005505873821676, 0.00011922769044758752, 0.00013643411512020975, 0.00048528998740948737, 4.5594446419272572e-05, 0.00019438023446127772, 0.00032336812000721693, 0.00031626861891709268, 0.00010714375821407884, 0.00016371629317291081, 0.00013034050061833113, 0.00013010477414354682, 0.00029365095542743802, 0.00022553669987246394, 0.00019018515013158321, 0.00011975887173321098, 0.00026222085580229759, 0.00010659440886229277, 0.00028089489205740392, 0.00015055859694257379, 0.00033257267205044627, 0.00042259611655026674, 0.00010999850201187655, 7.4746727477759123e-05, 5.9460024203872308e-05, 0.00023006474657449871, 0.00027119822334498167, 0.00022179850202519447, 0.00014293527055997401, 0.00034535714075900614, 5.5767894082237035e-05, 0.00011389520659577101, 7.1527749241795391e-05, 0.00046465214109048247, 0.00020752035197801888, 0.00012719049118459225, 0.00038487711572088301, 3.051766543649137e-05, 0.00015006224566604942, 0.0001030982457450591, 0.00030811430769972503, 0.00028214920894242823, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -45,-72,-9,127,22,72,78,-57,-16,-18,-15,-7,-29,0,36,2,-10,-43,27,22,19,-127,127,5,-86,5,50,-28,-126,-127,39,25,13,26,60,-19,-29,-11,31,-8,-12,28,-108,72,25,-68,37,46,-18,52,-24,19,3,-7,18,47,-91,-49,-60,-19,-11,1,10,37,69,-25,73,13,-6,15,20,127,23,23,26,-1,-10,18,127,-6,-14,15,-28,21,127,19,-75,-17,0,-32,-16,-40,1,-26,-15,25, 127,-127,76,105,-43,127,40,-114,68,4,-17,127,127,-98,-13,15,10,127,127,-112,127,-77,81,68,-127,-117,-65,-34,-55,46,-59,-19,-90,52,-127,-84,-42,-15,-52,59,0,127,127,83,-52,-113,-112,-51,-16,-127,42,86,66,-32,45,82,-47,42,-80,-113,-45,-42,-62,67,74,-61,25,31,-79,32,-17,89,116,127,13,20,2,58,-34,53,65,127,127,-22,-9,74,-110,127,-121,-98,4,-127,-91,-127,-38,104, -73,-12,31,-82,14,-24,65,-5,78,-35,-28,17,-19,-4,-9,-11,-9,-16,7,-3,-21,-103,29,-1,-121,94,9,-54,118,50,-15,10,1,13,14,-29,-8,33,19,9,26,12,-119,64,17,-18,37,13,-15,11,-17,6,-10,1,-3,19,-67,6,-32,53,1,40,32,-1,-7,-39,-33,24,11,3,-3,34,10,-25,-6,4,-12,-6,-84,2,-21,-25,-18,3,-110,9,-33,-23,-50,24,-25,-33,29,-27,-14,0, 
  /* [0][1][][] */ -63,-75,76,-35,-48,93,20,127,-53,-22,-1,-121,26,-115,77,31,-3,-60,-16,88,53,-69,47,50,-98,-13,127,-22,-24,64,122,-104,-127,86,-87,-56,-35,31,-28,97,-50,-25,-6,48,-47,127,-23,65,16,96,20,-2,14,-54,27,31,127,122,-72,-85,127,-32,-36,127,73,-39,-15,-1,127,41,127,97,-40,102,-4,12,14,14,-32,9,-43,125,-81,109,1,35,-54,30,82,-127,-32,-6,127,-69,-23,-1, 66,126,58,-115,127,85,88,40,-127,127,127,-40,-64,-127,-127,127,127,-63,-122,-51,104,97,-122,127,-109,-91,-43,127,-127,109,-127,-127,-89,127,107,127,127,-127,-105,127,-66,-96,108,-127,-127,-34,-127,-127,127,-111,86,44,127,127,127,-127,100,-127,-127,127,19,-79,-127,-100,-127,127,-127,127,-123,-127,-106,-82,-127,-78,127,127,-127,127,-78,127,127,29,-43,-127,60,127,93,46,127,11,127,2,-68,34,127,-127, -53,-14,-49,39,-56,-96,36,-23,17,-35,-29,94,2,94,13,11,-5,64,-6,126,3,-87,-42,7,-71,103,-70,-20,-69,-16,16,-64,-71,38,5,-17,-28,44,-68,43,127,-4,-39,29,-39,-57,16,45,9,119,-12,7,-36,-72,3,18,95,2,2,22,-36,127,90,-52,-43,12,38,-11,-74,123,-17,-86,-1,-53,-15,-21,26,17,76,-36,-70,-43,56,14,-48,-17,73,22,14,61,-44,21,-44,94,-26,-5, 
  /* [0][2][][] */ -66,1,-3,-20,13,-46,68,26,53,-29,-36,-2,19,19,-27,1,-7,65,8,1,-55,-81,1,-8,-28,-53,36,-68,91,38,26,26,16,-9,-11,-46,-6,34,-3,0,-15,-5,-69,105,3,31,11,36,-15,-30,11,-19,22,-1,9,14,-72,24,-15,14,14,-1,-21,-4,-1,-47,-47,15,-30,14,26,30,14,-19,28,4,17,4,-79,-12,-8,-7,17,13,-127,8,13,-44,-56,-50,-28,-48,9,56,-18,-8, 121,34,-127,-34,-72,-25,39,31,-65,-30,-20,-108,-76,113,-13,35,2,-50,-8,-127,92,-50,-39,1,-107,127,-49,20,-34,-21,-9,-4,-63,13,28,5,-22,-29,127,53,11,-14,67,-33,-39,75,-67,-43,-33,-4,-127,-127,-51,-26,2,38,-67,-8,12,39,-8,-19,8,-47,-55,33,62,-22,115,107,-23,-69,12,-57,4,4,98,4,51,22,12,-97,-50,2,3,9,127,40,-58,38,-19,-109,41,78,-9,26, -53,13,-16,27,15,-69,-127,4,-12,-8,-16,6,15,-26,18,-3,-8,-15,6,17,-48,-71,13,1,20,-94,22,4,-46,-39,-7,15,42,-21,-6,-24,-34,2,41,-40,22,-1,-49,-34,3,65,23,16,-9,-3,10,-8,17,6,-3,-6,-62,-13,3,-38,-12,11,83,-10,34,-2,-3,28,2,7,-3,21,-17,17,0,15,35,0,74,-11,3,-8,-7,-18,74,1,43,-39,60,39,-17,-52,-8,2,-14,-16, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0067620761692523956, 0.0037175510078668594, 0.0051876241341233253, 0.0093195624649524689, 0.011154133826494217, 0.0040680840611457825, 0.002157997339963913, 0.0041473619639873505, 0.010290968231856823, 0.014771555550396442, 0.0099353063851594925, 0.0048387967981398106, 0.010774136520922184, 0.0085956156253814697, 0.018113592639565468, 0.0062983492389321327, 0.010257142595946789, 0.0096147889271378517, 0.0086721424013376236, 0.0027542079333215952, 0.0037735169753432274, 0.0024371373001486063, 0.0059496709145605564, 0.0044099097140133381, 0.0035516021307557821, 0.0045864470303058624, 0.0061498880386352539, 0.0081552313640713692, 0.0030652706045657396, 0.019030828028917313, 0.015154998749494553, 0.011582781560719013, 0.0051202489994466305, 0.0090587390586733818, 0.0097902063280344009, 0.01888885535299778, 0.017922656610608101, 0.01103898324072361, 0.010472765192389488, 0.0054049771279096603, 0.010692508891224861, 0.0087847774848341942, 0.014248771592974663, 0.0035833832807838917, 0.016468344256281853, 0.0034021830651909113, 0.0050298143178224564, 0.013082939200103283, 0.027638459578156471, 0.0052475770935416222, 0.015511092729866505, 0.0059721227735280991, 0.013693441636860371, 0.0061959447339177132, 0.015727339312434196, 0.0050671766512095928, 0.0057984497398138046, 0.020624823868274689, 0.001937763998284936, 0.0082611599937081337, 0.013743145391345024, 0.013441415503621101, 0.0045536095276474953, 0.0069579426199197769, 0.0055394712835550308, 0.0055294525809586048, 0.012480164878070354, 0.009585309773683548, 0.0080828685313463211, 0.005089751910418272, 0.011144386604428291, 0.0045302622020244598, 0.011938032694160938, 0.0063987402245402336, 0.01413433812558651, 0.017960334196686745, 0.0046749361790716648, 0.0031767359469085932, 0.0025270509067922831, 0.0097777517512440681, 0.011525924317538738, 0.0094264363870024681, 0.0060747489333152771, 0.014677678234875202, 0.0023701353929936886, 0.0048405462875962257, 0.0030399293173104525, 0.019747715443372726, 0.0088196145370602608, 0.0054055959917604923, 0.01635727658867836, 0.0012970006791874766, 0.0063776453025639057, 0.0043816752731800079, 0.013094858266413212, 0.011991341598331928, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1180, 7018, 9467, 19999, 15396, -2443, -1625, 5779, 26459, -3999, 7072, 3176, 6901, 8682, 26375, 946, 2084, 7296, 10060, 4642, -230, 255, 10822, -963, 5135, 114, 7721, 5303, 4831, 25473, 38835, 13179, 6031, -597, 6213, 1575, 1366, 4151, 11582, -790, 9383, 7186, 37223, -2667, 21417, 6222, 4790, 13976, 49463, 7162, -388, 5895, -3494, -195, -2217, 6053, -432, 12463, 4326, 8128, 5648, 12205, 8528, 4321, 7473, 7358, 4053, -4466, 6218, -2046, 3679, 8128, 14734, 5302, -3343, -4002, 4912, 273, 1732, -945, 14507, 11640, 5434, 17842, 2695, 185, 8993, 48283, 7788, 10270, 6041, -126, 4251, 5730, 4779, 12810, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00031539230258204043, 0.00021068245405331254, 0.00019929723930545151, 0.00011557437392184511, 0.00019426124345045537, 0.00040998379699885845, 0.00050095247570425272, 0.00027719326317310333, 8.7988744780886918e-05, 0.00034513711580075324, 0.00038019954808987677, 0.00028559908969327807, 0.00018207101675216109, 0.00026519078528508544, 8.9954781287815422e-05, 0.00059364351909607649, 0.00021151956752873957, 0.00017193429812323302, 0.00022054377768654376, 0.00025294721126556396, 0.00035049501457251608, 0.00085058796685189009, 0.00018509839719627053, 0.00069329875987023115, 0.00050760339945554733, 0.00030108593637123704, 0.00028437524451874197, 0.0002643758780322969, 0.00033947199699468911, 0.00013804304762743413, 7.3569892265368253e-05, 0.00018905644537881017, 0.00027522695017978549, 0.00037530093686655164, 0.00032171729253605008, 0.00036606626235879958, 0.00036714458838105202, 0.00036004540743306279, 0.00023293767299037427, 0.00073261605575680733, 0.00019970076391473413, 0.00021743997058365494, 7.2780218033585697e-05, 0.00039630196988582611, 0.00015269969298969954, 0.0002493831270840019, 0.00036048900801688433, 0.00019134962349198759, 8.3613551396410912e-05, 0.00029083603294566274, 0.00030172945116646588, 0.00028793609817512333, 0.0003074632550124079, 0.00029428952257148921, 0.00046600654604844749, 0.00018030304636340588, 0.00028636536444537342, 0.00015040332800708711, 0.00046769817708991468, 0.00018178593018092215, 0.00028893008129671216, 0.00011652700050035492, 0.00017496522923465818, 0.00023152343055699021, 0.00033215124858543277, 0.00026266908389516175, 0.00031835981644690037, 0.00030061602592468262, 0.00026994291692972183, 0.00034329594927839935, 0.00029858239577151835, 0.00019360490841791034, 0.00014179521531332284, 0.00019745351164601743, 0.00046165130333974957, 0.00033973273821175098, 0.00034093795693479478, 0.00038343932828865945, 0.00044064788380637765, 0.00043609098065644503, 0.0001414026046404615, 0.00014419016952160746, 0.0001612839987501502, 0.0001093882747227326, 0.00042854808270931244, 0.00032197622931562364, 0.00025891789118759334, 7.9231162089854479e-05, 0.00017953358474187553, 0.00022342782176565379, 0.00021069074864499271, 0.0004840955079998821, 0.00034711454645730555, 0.00027846349985338748, 0.00023672136012464762, 0.0001353681436739862, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 8,50,-49,75,27,8,13,-11,37,30,-40,100,-13,-109,34,-127, 
  /* [1][0][][] */ 21,51,-19,-30,21,-39,127,-105,8,88,-11,-27,-4,-47,40,19, 
  /* [2][0][][] */ -127,32,-53,-24,6,-35,63,50,-32,50,95,-8,-71,15,26,-41, 
  /* [3][0][][] */ -70,46,35,65,-56,48,81,119,4,77,-127,16,44,-77,-93,-57, 
  /* [4][0][][] */ 9,-6,54,87,-31,86,-7,63,4,-17,2,3,34,-7,-127,-23, 
  /* [5][0][][] */ -5,-27,52,-30,2,-26,-5,27,-66,100,-37,-127,-16,16,-38,-21, 
  /* [6][0][][] */ 11,10,38,-11,38,60,-63,-68,-10,-10,42,-15,127,-24,-18,-36, 
  /* [7][0][][] */ 30,8,127,-20,-27,-45,20,-16,-88,40,-91,-63,-4,-5,24,-14, 
  /* [8][0][][] */ 31,54,87,72,-82,113,25,53,63,11,-1,-116,-50,6,-127,-105, 
  /* [9][0][][] */ 35,-119,48,40,16,-29,-2,15,127,-8,66,3,-24,5,-120,-25, 
  /* [10][0][][] */ -39,-78,0,-25,-110,9,-5,55,95,127,56,-32,-41,59,90,-13, 
  /* [11][0][][] */ 48,-8,17,-80,13,-21,-127,-98,-34,39,-14,-9,37,-10,33,-77, 
  /* [12][0][][] */ -3,22,13,-40,-43,-24,-98,-15,-53,-91,-35,16,29,127,77,36, 
  /* [13][0][][] */ -45,-103,-73,36,-14,-86,8,-21,63,20,-13,-5,26,21,127,30, 
  /* [14][0][][] */ 1,-76,54,29,21,29,18,127,12,65,10,-42,24,43,-65,115, 
  /* [15][0][][] */ 0,-22,-8,48,5,-14,83,3,6,-127,16,-32,-1,-22,4,-23, 
  /* [16][0][][] */ 30,-83,-66,36,12,-7,48,-83,127,78,97,9,-1,94,78,124, 
  /* [17][0][][] */ -65,-50,47,127,125,53,20,-17,123,-42,-9,-37,35,33,-117,25, 
  /* [18][0][][] */ -4,17,-6,34,-72,7,-5,23,-33,0,-13,-17,10,-127,81,-5, 
  /* [19][0][][] */ 82,-46,39,-55,112,43,-93,95,106,-64,76,65,-19,66,60,127, 
  /* [20][0][][] */ 38,-14,80,-71,-10,21,-42,42,-18,-72,98,-19,22,11,-53,127, 
  /* [21][0][][] */ -58,-27,3,-27,24,15,-79,-42,-18,52,7,15,-127,-7,20,-21, 
  /* [22][0][][] */ 24,-30,16,-33,15,-62,7,-16,-127,30,-22,-51,-15,-15,79,-19, 
  /* [23][0][][] */ 12,11,20,-7,10,12,-12,1,-5,-12,42,-12,127,-6,-1,-41, 
  /* [24][0][][] */ -22,5,2,-67,-24,-14,55,4,-58,3,-4,-127,0,-111,37,3, 
  /* [25][0][][] */ -88,16,-50,-35,23,-40,-56,-127,-34,41,-52,-45,-42,-60,25,-37, 
  /* [26][0][][] */ 12,-38,14,-106,127,-39,8,-17,120,-74,47,-20,-15,103,-5,59, 
  /* [27][0][][] */ 100,-34,28,-32,-34,-54,-9,-16,-32,14,-127,14,17,-21,-3,39, 
  /* [28][0][][] */ -102,-18,-127,-69,53,1,64,-49,8,48,-38,20,40,-13,-41,48, 
  /* [29][0][][] */ -56,-21,-4,127,-6,28,8,-37,6,0,-74,51,16,-72,29,-27, 
  /* [30][0][][] */ 69,-6,127,-24,48,54,-34,68,-26,-81,49,-24,-25,32,-52,69, 
  /* [31][0][][] */ 21,-102,-3,-45,4,-74,22,-42,-23,50,112,25,-25,89,62,127, 
  /* [32][0][][] */ -18,73,-28,33,-127,31,-75,-43,-56,-35,-4,44,16,45,31,53, 
  /* [33][0][][] */ 31,-9,21,127,20,-15,23,-51,-103,58,68,-19,3,6,10,99, 
  /* [34][0][][] */ 33,-7,11,-11,64,-39,-127,-19,-45,82,-34,6,-40,5,9,13, 
  /* [35][0][][] */ 78,18,-7,13,31,-127,-10,-4,-16,10,-73,3,57,28,-16,4, 
  /* [36][0][][] */ 20,-6,-127,8,45,15,-33,32,-27,-20,9,-10,7,18,-15,18, 
  /* [37][0][][] */ 11,8,127,-11,-58,20,21,-59,-9,20,-53,20,22,-9,21,-5, 
  /* [38][0][][] */ -127,21,1,12,16,62,5,-3,8,-19,87,-31,-11,14,-8,-8, 
  /* [39][0][][] */ -21,1,23,34,32,-5,-127,44,20,27,-4,-38,0,-23,5,-6, 
  /* [40][0][][] */ 4,78,-17,127,-18,71,64,31,-79,-30,-51,67,28,44,-54,-7, 
  /* [41][0][][] */ 16,11,-38,-15,-42,-11,127,94,-42,83,-24,2,9,64,34,-10, 
  /* [42][0][][] */ 12,-32,-30,-33,-1,7,-51,54,40,-113,127,70,-36,66,-63,26, 
  /* [43][0][][] */ -61,6,30,-36,32,31,-77,-82,-23,44,8,-8,-127,-8,33,-13, 
  /* [44][0][][] */ 27,-3,-17,-4,-8,-27,11,-45,127,13,4,38,8,76,-3,43, 
  /* [45][0][][] */ -55,-90,6,-100,33,-16,4,34,7,-55,-24,-34,24,112,-48,127, 
  /* [46][0][][] */ -39,11,-32,100,-84,-19,7,-77,-127,54,-53,-19,-8,35,0,-41, 
  /* [47][0][][] */ -24,-3,-101,127,0,56,-7,-22,21,44,57,70,-22,-8,35,-16, 
  /* [48][0][][] */ -29,-3,34,-127,28,-22,-29,-14,-51,9,15,-13,-9,41,89,32, 
  /* [49][0][][] */ -26,2,25,114,2,20,-54,-19,38,-48,-68,-24,-49,-43,-75,-127, 
  /* [50][0][][] */ 14,79,31,-127,51,17,-17,57,125,-20,-36,-1,-2,-40,20,-31, 
  /* [51][0][][] */ 2,-33,10,-17,40,-22,-45,-127,11,-81,-8,-5,-13,0,-16,-7, 
  /* [52][0][][] */ 34,25,7,41,51,-5,-83,113,-92,127,-48,-27,75,118,6,-58, 
  /* [53][0][][] */ -15,83,-7,-91,-24,-4,20,-10,-47,-64,-36,52,13,-127,-93,-18, 
  /* [54][0][][] */ -2,5,10,35,50,-30,6,-37,4,32,-6,-17,-13,127,-38,-11, 
  /* [55][0][][] */ -124,127,93,-27,42,5,-25,-6,-51,28,108,-17,-9,-27,120,-7, 
  /* [56][0][][] */ 64,-14,13,-106,101,-2,-11,34,46,-49,48,127,-27,9,85,57, 
  /* [57][0][][] */ -17,3,20,73,-25,17,44,127,-8,7,13,-26,2,63,6,28, 
  /* [58][0][][] */ 30,127,5,-119,10,46,-13,24,108,-7,-8,80,5,-91,39,58, 
  /* [59][0][][] */ 34,49,46,-121,-47,6,25,-13,10,19,19,-76,-8,-127,-65,22, 
  /* [60][0][][] */ 52,-7,118,-35,-32,127,27,-35,-6,37,-52,-3,26,8,37,-9, 
  /* [61][0][][] */ -22,32,-57,-46,-46,-7,98,127,-5,56,3,12,-4,66,27,-23, 
  /* [62][0][][] */ -16,0,-27,-21,-104,16,-57,-1,-23,-21,-5,-66,18,-127,109,20, 
  /* [63][0][][] */ 22,-33,12,-78,51,2,-124,-127,-55,96,-24,18,55,2,20,-52, 
  /* [64][0][][] */ -19,0,39,57,75,-7,-24,-127,19,-107,-2,-35,-10,-19,-13,-4, 
  /* [65][0][][] */ -127,26,26,-55,16,74,58,-57,-71,45,53,-8,-5,31,-13,-39, 
  /* [66][0][][] */ 45,4,89,18,-65,17,-11,43,-64,-1,57,-97,-11,59,-127,8, 
  /* [67][0][][] */ 47,-50,-29,61,70,-31,-97,-121,35,-127,-75,-27,-85,9,-70,18, 
  /* [68][0][][] */ 29,-42,-84,69,-45,-107,14,-52,-41,-12,64,-67,-34,68,127,-16, 
  /* [69][0][][] */ -55,39,-68,23,-7,-127,14,69,8,-19,45,-16,82,17,-24,8, 
  /* [70][0][][] */ 19,9,-39,-35,-41,2,127,85,-31,47,-14,11,6,43,13,2, 
  /* [71][0][][] */ 10,0,-19,-39,19,11,11,47,-31,-35,-4,3,10,-127,69,0, 
  /* [72][0][][] */ 13,34,-13,21,27,-39,-58,-127,16,34,-44,16,58,36,48,59, 
  /* [73][0][][] */ -41,-127,-37,-60,-83,-27,44,-36,-20,14,-25,-26,31,-54,72,-10, 
  /* [74][0][][] */ -34,33,62,92,-9,11,-127,89,22,-39,-42,-45,-3,-14,-8,1, 
  /* [75][0][][] */ -51,35,-43,20,-21,83,91,127,-7,50,8,-29,-111,78,13,13, 
  /* [76][0][][] */ 15,-20,-28,-21,28,-62,-112,-127,-30,-13,-2,-3,42,-8,62,-29, 
  /* [77][0][][] */ -52,13,-46,-27,-41,-8,-17,-63,127,-4,-59,18,-14,36,29,-88, 
  /* [78][0][][] */ -117,-127,-8,88,62,74,-41,32,-14,-88,-106,87,59,-33,101,59, 
  /* [79][0][][] */ 30,-6,24,-67,127,6,49,11,89,23,-8,32,-4,-34,14,-47, 
  /* [80][0][][] */ 2,-42,69,-122,-27,-38,-11,25,-73,-44,-1,-55,1,127,-18,16, 
  /* [81][0][][] */ 15,-7,38,47,19,61,-13,-15,13,-4,3,-26,0,39,-127,27, 
  /* [82][0][][] */ -69,-12,26,-127,-10,-35,-14,-34,-17,-24,-44,-109,-15,-98,-77,27, 
  /* [83][0][][] */ -12,23,-43,-87,-51,5,4,27,-81,-3,7,-88,15,-127,20,61, 
  /* [84][0][][] */ 127,44,17,41,-60,9,-56,16,-7,-18,88,-1,-76,20,85,-66, 
  /* [85][0][][] */ -18,-9,19,-37,44,-12,-42,98,-81,-127,-68,-34,-18,64,74,-123, 
  /* [86][0][][] */ 6,10,2,4,-50,53,-52,59,-76,-62,44,-17,-10,-127,-20,24, 
  /* [87][0][][] */ 127,-26,9,-15,-53,-50,12,2,-5,26,-123,0,35,-4,8,43, 
  /* [88][0][][] */ 51,58,-28,7,-21,-41,-3,-32,97,38,36,9,-33,-30,127,-93, 
  /* [89][0][][] */ 32,59,-103,-14,-50,-38,33,-67,59,65,29,-27,-45,8,-16,-127, 
  /* [90][0][][] */ -6,-35,2,-84,-80,11,127,-66,91,-86,23,-83,58,-36,-42,-26, 
  /* [91][0][][] */ -2,9,-21,-99,-35,2,23,-40,-45,13,64,48,8,-20,38,127, 
  /* [92][0][][] */ 17,1,-8,9,49,-24,-55,-127,35,-56,-2,-23,-36,-8,6,-25, 
  /* [93][0][][] */ 51,10,53,-127,-46,17,-39,60,51,-78,71,-29,-26,103,-13,22, 
  /* [94][0][][] */ -97,53,-94,15,69,-127,-16,24,-6,-54,103,-28,0,1,-25,-8, 
  /* [95][0][][] */ -44,61,19,-127,8,-1,-18,-13,12,-11,-60,-54,3,15,-50,-1, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00078273081453517079, 0.00052286515710875392, 0.000494609703309834, 0.00028682890115305781, 0.00048211152898147702, 0.0010174850467592478, 0.0012432483490556479, 0.000687929627019912, 0.00021836772793903947, 0.00085655058501288295, 0.00094356742920354009, 0.00070879096165299416, 0.00045185821363702416, 0.00065814226400107145, 0.00022324698511511087, 0.0014732860727235675, 0.0005249427049420774, 0.00042670121183618903, 0.00054733868455514312, 0.00062775652622804046, 0.00086984765948727727, 0.0021109627559781075, 0.00045937145478092134, 0.001720607397146523, 0.0012597544118762016, 0.00074722571298480034, 0.00070575362769886851, 0.00065611983882263303, 0.00084249104838818312, 0.00034259093808941543, 0.00018258347699884325, 0.00046919440501369536, 0.00068304967135190964, 0.00093141017714515328, 0.00079842796549201012, 0.00090849190019071102, 0.0009111680556088686, 0.00089354952797293663, 0.00057809747522696853, 0.0018181838095188141, 0.00049561116611585021, 0.00053963577374815941, 0.00018062368326354772, 0.00098352995701134205, 0.00037896537105552852, 0.00061891129007562995, 0.00089465040946379304, 0.00047488557174801826, 0.00020750951080117375, 0.00072178780101239681, 0.00074882275657728314, 0.00071459088940173388, 0.00076305272523313761, 0.00073035858804360032, 0.001156520564109087, 0.00044747052015736699, 0.00071069266414269805, 0.00037326631718315184, 0.0011607188498601317, 0.00045115067041479051, 0.00071705773007124662, 0.00028919309261254966, 0.0004342232714407146, 0.00057458766968920827, 0.00082432269118726254, 0.00065188400913029909, 0.00079009553883224726, 0.00074605952249839902, 0.00066993595100939274, 0.00085198122542351484, 0.000741012510843575, 0.00048048264579847455, 0.00035190297057852149, 0.00049003399908542633, 0.0011457118671387434, 0.00084313814295455813, 0.00084612926002591848, 0.00095160782802850008, 0.0010935862082988024, 0.0010822770418599248, 0.0003509286034386605, 0.00035784670035354793, 0.0004002696368843317, 0.00027147642686031759, 0.0010635573416948318, 0.0007990705780684948, 0.00064257439225912094, 0.00019663343846332282, 0.00044556087232194841, 0.00055449624778702855, 0.00052288576262071729, 0.0012014132225885987, 0.00086145807290449739, 0.00069108209572732449, 0.00058748770970851183, 0.0003359524707775563, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -5496, 134, -6991, 30164, 22461, 7247, -5584, -2329, 25745, 3174, 29463, 20057, -10907, 11318, 35000, -32598, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00052366632735356688, 0.00024792121257632971, 0.00024734376347623765, 0.00023287603107746691, 0.00041961492388509214, 0.00038540334207937121, 0.00029941037064418197, 0.00038298839353956282, 0.00021188748360145837, 0.00028168153949081898, 0.00035487537388689816, 0.00073875748785212636, 0.00044089232687838376, 0.00038933119503781199, 0.00052576698362827301, 0.00030775170307606459, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 3,18,-7,20,38,73,-27,-27,41,5,14,13,-5,19,20,69,2,-11,-1,-6,94,-48,6,-20,-22,-36,-48,-84,-3,-9,50,51,126,-6,2,7,9,-16,-27,15,-33,13,18,-37,6,-25,-8,29,-12,24,10,-16,-37,-15,0,6,40,22,-13,-23,-52,27,-4,-6,21,5,54,4,17,-1,14,-19,-66,-11,0,-6,-7,-82,2,-22,40,-15,-60,-47,31,-16,10,29,-1,-2,18,-35,26,21,-12,127, 
  /* [1][0][][] */ 72,-98,32,78,-9,-66,-22,-46,-25,-80,-7,14,4,-58,-29,-56,-86,-14,18,22,-28,-111,-37,19,127,-60,-71,-2,-25,85,-21,41,9,11,-36,15,-29,-5,48,-17,3,-62,73,-31,-51,9,57,-16,35,17,6,-57,66,-75,42,-6,7,38,-19,-106,32,-67,20,-45,3,-90,30,31,30,53,-46,-18,-93,35,-18,60,39,79,20,-30,38,-1,-72,28,-74,60,-1,56,-34,6,23,5,7,-46,38,-4, 
  /* [2][0][][] */ 31,21,5,-26,7,-4,-19,45,63,-21,15,69,-5,11,43,4,-14,-9,7,-10,-19,-65,8,-57,-4,-12,-26,29,-6,29,124,-60,17,-76,-23,58,19,127,-42,-31,1,-19,-8,39,-51,-49,-63,11,18,31,-27,-28,23,-10,-3,-37,-27,-2,-3,24,6,7,74,88,2,-73,20,-69,-7,-10,-23,1,-18,19,-24,20,7,61,10,26,13,88,32,-6,-16,1,5,3,20,10,1,-55,-41,-3,-7,57, 
  /* [3][0][][] */ -15,-11,-33,38,24,-18,9,-14,-17,16,3,16,14,-12,48,-6,45,-32,14,4,-22,-9,-11,10,-20,13,8,11,25,-55,64,-11,18,-5,-15,42,-3,-4,-13,3,10,-67,24,-20,-8,5,-3,0,-127,41,-19,24,-117,-55,-28,-51,34,12,-11,53,1,24,11,14,-11,-84,-36,30,59,12,10,34,-45,14,-1,-40,-43,-47,32,-28,11,-19,25,69,36,55,34,13,27,6,-9,11,-32,2,-16,-22, 
  /* [4][0][][] */ 0,-26,14,-64,0,4,-34,9,-21,-36,-31,5,18,78,17,8,57,-16,9,4,-10,36,53,12,-14,-5,14,31,12,-8,-5,2,-29,17,6,17,39,-21,-6,-13,8,5,-95,-29,35,-4,-7,-16,0,84,-9,-19,-28,-13,4,-19,10,-21,27,43,18,8,7,-6,51,-106,23,-14,-38,9,9,13,-16,10,-3,23,-16,69,56,5,15,6,127,-42,38,-22,-8,-4,67,14,-5,26,-29,35,-5,-32, 
  /* [5][0][][] */ -6,4,-9,-5,-7,-6,2,100,45,-17,-14,-25,-9,31,38,28,-7,-8,-1,-36,-50,-7,-6,-41,8,6,23,80,68,5,60,52,-47,25,3,-13,-48,-51,-35,-22,-39,-10,-13,-7,58,14,0,1,4,14,-15,10,-29,-21,9,-16,-12,-14,-7,31,-37,20,-18,-35,14,12,-18,12,-1,17,2,5,25,11,11,2,-1,31,19,127,-4,-45,22,28,7,-11,18,-26,-2,-11,15,-110,-30,-17,-10,-108, 
  /* [6][0][][] */ -24,-7,-11,-54,-12,-13,-6,9,-5,22,-17,3,36,-61,11,-8,-2,-68,36,15,-1,15,-20,28,68,-13,-7,-2,25,-12,9,-3,-16,9,-16,-1,19,3,12,30,-5,-27,-49,-28,-3,-19,33,-127,19,38,22,8,6,5,-9,-37,40,-5,1,10,26,11,9,13,41,63,23,-16,-22,-15,31,-14,13,-2,47,-15,-21,29,0,-1,-9,-3,45,-38,-1,40,19,-19,29,10,-37,-4,-14,13,-7,18, 
  /* [7][0][][] */ 13,11,34,-25,-5,-3,-8,-23,-3,-12,-11,-19,-9,-92,20,5,-7,-29,-19,-9,13,-19,-34,-3,-20,-8,3,-24,5,8,7,-5,-13,3,-10,-25,3,-11,-22,24,9,-15,-16,32,-6,9,-16,74,-5,19,-19,-20,-22,-1,2,-49,38,-3,-4,-5,-9,5,-14,-9,-26,37,11,-28,-15,0,-4,34,-7,-3,-14,13,45,4,0,-16,9,-37,36,2,-31,127,-7,-1,-36,-21,1,23,-28,2,-5,1, 
  /* [8][0][][] */ -64,39,-68,0,45,-3,-19,29,9,70,-49,5,16,30,76,-17,-10,28,-75,16,12,32,-37,11,-46,-23,18,22,57,-85,-9,4,24,2,20,-4,-18,26,-46,40,5,22,-1,-127,-38,-4,34,-37,-58,28,2,64,-113,72,18,-14,16,-20,-26,-14,11,-41,4,17,-30,39,35,-10,-10,-2,20,90,-17,31,37,36,-12,-86,-2,-39,-17,-15,21,5,-64,2,6,-49,-1,31,-30,7,40,-12,-18,-9, 
  /* [9][0][][] */ 29,-55,-35,-30,11,25,-10,24,25,-19,-5,14,-43,-20,7,23,-4,2,46,-21,-29,13,-30,-44,29,7,23,-21,-29,-38,-22,-1,-1,17,26,36,3,45,-43,17,9,17,-20,-89,9,-5,37,-127,-36,5,4,20,-20,2,-12,12,-55,23,-3,17,10,6,17,26,25,109,40,47,12,-13,9,-22,-13,-11,-30,-3,69,1,4,10,-7,5,13,-45,-2,22,-3,-3,-44,32,-37,-3,13,12,6,-13, 
  /* [10][0][][] */ 33,48,-22,29,64,-114,3,-28,2,57,29,3,-14,18,22,-81,24,37,-16,43,-93,-2,-12,-27,-76,-27,-66,58,16,5,10,43,-14,-10,30,-11,80,-24,-21,-7,-17,72,47,-28,-57,-11,-34,8,-18,-16,-34,-5,-18,-10,0,-15,7,38,-23,-12,5,2,-13,29,21,42,53,35,22,-11,53,68,-56,-30,-54,-19,10,34,-21,12,35,-6,-74,-42,69,-60,106,-11,-11,18,24,-18,85,40,-15,-127, 
  /* [11][0][][] */ 41,42,-30,17,-6,21,53,1,-1,-18,-25,-7,2,4,37,9,2,-1,-91,-10,-6,17,2,2,-41,-22,-13,13,7,12,-2,2,-4,11,8,26,14,7,-16,12,2,27,59,-101,34,-36,-5,-2,-127,19,5,-54,22,17,-14,1,-7,-8,4,5,19,-20,-9,12,-43,56,-12,20,15,-8,38,27,-46,-29,19,30,-6,-33,-48,15,11,3,81,43,12,-10,-11,-10,-1,23,-22,4,-4,12,-22,17, 
  /* [12][0][][] */ -31,-4,16,-5,-25,33,16,6,127,2,-11,2,7,12,-43,-37,28,33,10,75,48,30,-13,-16,0,9,13,-17,-109,4,32,-33,5,-8,-3,-14,24,3,43,-9,-49,-18,-7,12,1,31,-1,6,17,6,-44,11,8,-8,6,-9,68,-25,13,20,19,-9,9,-12,0,29,-35,3,2,12,-15,-28,14,14,-63,7,19,-1,14,-54,-18,8,36,44,-21,-17,-31,-29,4,17,-5,46,-16,-24,13,8, 
  /* [13][0][][] */ 28,-10,-25,28,29,4,14,4,-5,6,7,6,13,-9,17,-9,17,-66,-31,13,-7,-12,9,7,5,7,-2,4,-9,-28,-5,18,2,8,10,41,19,4,2,15,2,8,23,36,18,17,-7,-127,18,-5,9,7,-19,1,19,4,-16,19,25,16,9,18,-4,3,-9,-16,-20,-52,8,12,-3,-26,-16,31,-6,14,-25,7,14,-2,30,-7,-11,15,13,22,7,18,1,3,22,-4,8,17,-9,-2, 
  /* [14][0][][] */ -114,-54,23,54,26,-33,-37,2,-15,-1,-19,9,52,11,-127,-9,74,-18,-11,27,-11,-11,41,11,-104,1,26,-29,-40,-67,-40,-6,-6,4,20,-58,19,25,4,13,23,30,-7,-32,20,122,80,56,-110,51,4,27,-53,4,36,-2,2,3,56,46,22,38,15,41,-3,-1,-42,41,4,69,-63,-98,-70,-7,-15,44,-1,34,77,-12,64,12,29,25,32,18,47,28,22,39,68,-17,0,14,22,-22, 
  /* [15][0][][] */ 96,-23,45,4,-11,66,30,-12,-8,50,10,7,-91,-4,-23,43,6,47,54,-20,16,31,-86,56,28,11,38,-5,19,41,-57,-83,18,-52,32,2,36,-29,-54,-101,-4,25,7,33,4,56,-6,-25,102,-53,-51,23,39,-118,59,-91,-1,-69,21,27,-127,1,15,19,80,-14,-59,41,-35,69,-28,9,51,19,16,-9,18,-49,60,-9,-13,7,37,72,-16,1,2,-53,0,-11,66,-4,-64,62,24,-5, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.022255817428231239, 0.010536651127040386, 0.010512109845876694, 0.0098972311243414879, 0.017833633348345757, 0.016379641368985176, 0.012724940665066242, 0.016277005895972252, 0.0090052178129553795, 0.011971465311944485, 0.015082202851772308, 0.031397193670272827, 0.018737923353910446, 0.016546575352549553, 0.022345095872879028, 0.013079447671771049, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 9185, -8757, 3096, 44831, -1947, -4565, -10101, 2483, -2646, 1112, 3505, -367, 672, -6438, 6662, -6235, -749, 17044, 24547, 2125, 5618, -1839, 352, 93, 15416, -234, -1671, -3290, -5355, -7973, 6544, -9249, -412, -1859, 516, 12968, 1664, -3641, 19364, 649, -295, 2490, -9621, -7753, -7380, 67873, 687, 17122, 31137, -12072, 106, 5721, 7495, -124, -6306, 2180, -9611, 1874, 2117, -6336, -1540, -250, -11857, 16, 1732, 15497, 28306, 18889, -11733, 283, -5863, -40, 54826, 11701, 287, 537, 18553, 34373, -1481, -7828, -1558, -5327, 1620, -3310, 239, -416, 1859, -290, 2093, -3596, 134, -262, -708, -531, 44, 53257, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00022930487466510385, 0.00013493049482349306, 0.00019068531400989741, 4.6920416934881359e-05, 0.00015368717140518129, 0.00017318586469627917, 0.00032825188827700913, 7.3665862146299332e-05, 0.00012335313658695668, 0.00043472176184877753, 0.00017788029799703509, 0.00037741832784377038, 8.7933825852815062e-05, 0.00040744268335402012, 0.00014758392353542149, 0.00011701163020916283, 0.0001180413892143406, 0.00029906388954259455, 6.2607046857010573e-05, 0.00026884814724326134, 3.9107428165152669e-05, 0.00018253698362968862, 0.00012680004874709994, 0.00035972549812868237, 0.00022716079547535628, 0.00025096492026932538, 0.00012534622510429472, 0.00017187632329296321, 0.00014473372721113265, 9.0994471975136548e-05, 0.00013114558532834053, 0.00016678779502399266, 0.00013080581265967339, 0.00011042869300581515, 0.00022574639297090471, 0.00018009181076195091, 0.00035984782152809203, 0.00011076965893153101, 6.0491522162919864e-05, 0.00014102486602496356, 0.00021652279247064143, 0.00036761039518751204, 0.00034575638710521162, 0.00017036301142070442, 0.00018984499911312014, 4.9814490921562538e-05, 0.00019558751955628395, 0.00019350979709997773, 8.4965067799203098e-05, 0.00022083152725826949, 0.00018340793030802161, 0.00025129091227427125, 0.00022503828222397715, 0.00030923800659365952, 0.0002711211855057627, 0.00037446158239617944, 0.00040249820449389517, 0.0002159483265131712, 0.00013232023047748953, 8.3886727225035429e-05, 0.0002716960443649441, 0.00014440146333072335, 0.00032005156390368938, 0.00015180415357463062, 0.00021212114370428026, 0.00018426142923999578, 8.0282778071705252e-05, 9.0677225671242923e-05, 0.00034065471845678985, 0.00033125394838862121, 0.00024393100466113538, 0.00010035753803094849, 0.00010399209713796154, 0.00020094661158509552, 0.00014623801689594984, 0.00027925267932005227, 0.00053550885058939457, 4.8357600462622941e-05, 0.0002118122938554734, 0.00022031465778127313, 0.00016477057943120599, 0.00037054350832477212, 0.00010907933756243438, 0.00019499901100061834, 0.00012277021596673876, 9.6038675110321492e-05, 0.00014156833640299737, 0.00015464269381482154, 0.00019226585573051125, 9.8566153610590845e-05, 0.0002415596682112664, 0.00012324639828875661, 0.00013431963452603668, 0.00043025522609241307, 0.028060302138328552, 7.1407674113288522e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,7,-20,104,-17,23,-63,-54,18,-6,99,-10,4,-8,-3,54,5,16,-32,3,72,2,32,-34,2,16,44,49,22,14,24,49,-7,27,10,-14,5,49,-58,-26,21,9,27,19,-86,-58,25,-5,-10,-19,-8,-6,48,5,-8,1,-4,-36,28,-31,27,-2,127,26,-14,-11,12,-50,66,35,1,-7,80,-33,69,4,17,-127,30,65,1,16,127,-13,37,28,-29,-19,34,-6,-14,80,1,20,-2,12, -49,13,-8,10,52,-8,-11,-127,39,14,-127,-5,-16,-12,5,93,19,-30,-12,-15,77,-95,127,25,-61,-33,-104,-17,29,38,-48,17,119,12,-14,0,-24,127,-67,-127,9,-19,-30,15,47,-127,127,-44,-75,50,49,7,39,-64,32,56,36,42,-102,84,127,35,4,-21,42,-38,-94,1,37,-31,-20,46,-48,-49,105,-4,-29,-59,-32,64,-66,63,-15,9,-11,47,54,-40,-29,55,-13,72,-127,-31,23,-127, 0,-3,-23,-75,7,17,36,22,-3,-2,4,61,0,-12,-10,7,-12,17,-14,17,6,24,23,-33,1,-32,11,12,-6,6,46,-79,44,18,9,-23,12,4,-32,-20,8,3,-17,10,22,-34,20,1,6,-6,6,-5,4,6,-5,8,-7,44,6,-3,11,-18,3,-17,-27,-18,32,-48,-108,-7,41,-17,-127,-23,-13,17,10,-11,6,11,-13,24,-35,-2,-40,20,25,36,-25,-16,24,-12,19,6,-2,-45, 
  /* [0][1][][] */ -41,59,-17,37,-86,-16,-11,-44,26,94,-47,-23,-31,-25,-5,62,127,-24,-89,-13,59,-127,-29,15,-35,-49,-127,-5,38,36,-50,28,-127,-75,-57,3,65,-3,-51,47,-19,86,0,-2,34,-52,-13,-31,127,43,-3,21,44,9,-36,-17,30,9,-126,127,-37,-91,21,127,-59,-36,-84,127,-37,127,-18,57,-35,-55,37,9,-35,-69,127,50,127,35,4,0,127,29,-95,47,-39,-35,-102,39,98,103,29,-59, 127,127,127,127,-47,-127,127,24,127,-127,15,-127,-107,127,127,127,-15,-127,-62,-127,127,21,-69,127,127,127,-55,-127,127,127,-127,127,-10,-127,-125,127,-127,-44,97,111,-127,-127,127,127,127,-117,-108,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-44,40,-105,-29,-69,-67,127,127,-72,127,127,-107,-127,127,-41,127,-127,-127,-127,122,-74,127,-42,127,79,127,-37,-127,-24,-107,-127,-127,-23,-127,-21,-127,-127,115, -24,66,-38,1,127,70,-22,49,5,23,-14,-6,-27,-30,-12,-8,-104,-22,-127,39,31,75,-13,-117,-33,-42,126,74,10,36,72,9,124,-47,127,-3,55,5,-97,14,36,23,-23,1,-24,-55,-13,-42,81,15,-12,40,-6,-4,-75,-13,24,20,127,-90,2,127,1,-36,-110,-29,-76,100,14,-17,113,26,-17,-56,11,48,-29,-7,-42,-2,-45,8,46,24,-88,35,127,-47,32,-23,127,-10,-112,36,34,19, 
  /* [0][2][][] */ -4,-38,-20,-61,-5,14,39,31,-2,10,-21,50,24,-35,-5,6,42,2,13,22,-10,28,-18,-27,2,-25,10,4,-10,-8,48,-74,-39,66,-29,-25,31,-35,-64,17,9,9,-35,20,12,-78,-13,0,-9,4,16,-7,7,1,-22,6,-2,44,-49,34,-6,-13,5,17,-5,-10,23,-52,-57,11,-19,-11,-119,-31,1,18,15,-11,56,19,23,22,-40,16,12,26,-20,9,4,25,23,-5,20,40,-7,-29, -28,-9,-26,23,-46,74,-25,66,6,-5,53,-12,127,-7,-17,-17,0,-40,-55,24,-22,76,-45,-113,-47,-49,101,70,13,46,53,-2,-122,63,-16,-23,-29,-27,-127,-3,44,-14,-16,38,-27,-43,-19,-47,-60,25,67,25,-11,-80,30,53,17,26,75,-55,20,-58,-8,0,20,-26,-127,-54,-12,-27,-60,23,37,-45,-29,-7,-44,24,-56,2,50,34,18,11,5,62,-92,127,14,127,-30,-18,115,-22,46,83, -9,-33,-25,29,11,65,-44,13,3,-6,0,12,12,-50,-9,-13,-44,-6,17,21,-24,5,-21,3,-4,19,-2,52,-1,-5,33,29,18,43,19,-23,-7,-26,-32,9,11,-12,21,10,-75,-34,-14,5,-1,-17,-1,-4,-8,9,-16,-4,-1,-50,14,-30,-22,49,9,-29,-10,-2,36,-53,46,7,54,-22,31,-55,-18,22,11,10,-5,24,-28,32,87,-14,-18,54,38,-9,108,12,2,-19,10,-22,-6,-49, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0097454572096467018, 0.005734546110033989, 0.0081041259691119194, 0.0019941176287829876, 0.0065317046828567982, 0.0073603992350399494, 0.013950705528259277, 0.0031307991594076157, 0.0052425079047679901, 0.018475674092769623, 0.0075599122792482376, 0.016040278598666191, 0.0037371874786913395, 0.017316313460469246, 0.0062723164446651936, 0.004972994327545166, 0.0050167590379714966, 0.012710214592516422, 0.0026607993058860302, 0.01142604649066925, 0.0016620657406747341, 0.0077578215859830379, 0.005389002151787281, 0.015288333408534527, 0.0096543338149785995, 0.010666009038686752, 0.0053272144868969917, 0.0073047433979809284, 0.006151183508336544, 0.0038672650698572397, 0.0055736871436238289, 0.0070884809829294682, 0.0055592469871044159, 0.0046932194381952286, 0.0095942215994000435, 0.007653901819139719, 0.01529353205114603, 0.0047077103517949581, 0.0025708896573632956, 0.005993556696921587, 0.0092022186145186424, 0.015623440966010094, 0.014694646000862122, 0.0072404281236231327, 0.0080684125423431396, 0.0021171157713979483, 0.0083124693483114243, 0.0082241659983992577, 0.0036110153887420893, 0.0093853399157524109, 0.0077948370017111301, 0.010679863393306732, 0.0095641268417239189, 0.013142615556716919, 0.01152264978736639, 0.015914617106318474, 0.017106173560023308, 0.0091778039932250977, 0.005623609758913517, 0.0035651859361678362, 0.011547081172466278, 0.0061370618641376495, 0.013602191582322121, 0.0064516765996813774, 0.0090151485055685043, 0.0078311106190085411, 0.0034120180644094944, 0.0038537820801138878, 0.014477824792265892, 0.014078292995691299, 0.010367067530751228, 0.0042651952244341373, 0.0044196639209985733, 0.0085402308031916618, 0.0062151155434548855, 0.01186823844909668, 0.022759124636650085, 0.0020551979541778564, 0.0090020224452018738, 0.0093633728101849556, 0.0070027494803071022, 0.015748098492622375, 0.0046358718536794186, 0.008287457749247551, 0.0052177337929606438, 0.0040816436521708965, 0.0060166539624333382, 0.0065723140724003315, 0.0081712985411286354, 0.0041890614666044712, 0.010266285389661789, 0.0052379718981683254, 0.0057085840962827206, 0.018285846337676048, 1.1925628185272217, 0.0030348261352628469, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 12627, 804, 5834, -527, 4468, 3951, 13742, 5838, -929, 15069, 5687, 1772, 4506, 24194, -360, -1387, 6193, 10122, 1473, -177, -706, 11053, 3661, 3290, 6492, 4255, 3923, 3456, 49, -20, 5319, 7103, 11858, 1750, 7047, -438, 12983, 7218, 726, 4836, 548, 9792, 10667, 3220, 2808, 11959, 10072, 5108, 3567, 2935, 260, -656, 13573, 5758, 5365, 11723, -250, 5923, 2424, 2868, 8940, 6365, 3873, 7260, 4861, 3878, 6134, -686, 10696, 6447, 5764, -979, -908, 2595, 1434, 1704, 16038, 13304, 9581, -2240, 3288, -4477, -1489, 480, 5006, 3575, 4963, 3915, 9004, 3067, 7161, 3156, 10999, 17096, -9102, 10403, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00020447770657483488, 0.00039584047044627368, 0.00023170582426246256, 0.0010996737983077765, 0.00036561294109560549, 0.0002349886781303212, 0.0002288401301484555, 0.00060232443502172828, 0.00048468189197592437, 0.0001211630878970027, 0.00025511361309327185, 0.00047725506010465324, 0.00061081349849700928, 0.00019937966135330498, 0.00031717645470052958, 0.00048792053712531924, 0.00035737382131628692, 0.00023158255498856306, 0.00030827411683276296, 0.00070271495496854186, 0.0003985870280303061, 0.00022624674602411687, 0.0004173946799710393, 0.00024232573923654854, 0.00027001308626495302, 0.00049511686665937304, 0.00035921292146667838, 0.0002566442999523133, 0.000693266571033746, 0.00047081921366043389, 0.00026522562257014215, 0.00026305380742996931, 0.00016508525004610419, 0.00062822364270687103, 0.00023864522518124431, 0.00060343177756294608, 0.00017503822164144367, 0.00036464325967244804, 0.00065957219339907169, 0.00019873365818057209, 0.00091941567370668054, 0.0001934155443450436, 0.00020166061585769057, 0.00022723728034179658, 0.00040478995651938021, 0.00027500724536366761, 0.00028341219876892865, 0.0002837547508534044, 0.0004444373189471662, 0.00029173213988542557, 0.00052964739734306931, 0.00099756161216646433, 0.00019583149696700275, 0.00027369684539735317, 0.00043500409810803831, 0.00015841031563468277, 0.00052901520393788815, 0.00029036274645477533, 0.00032841565553098917, 0.00057080719852820039, 0.00019174056069459766, 0.0002244806382805109, 0.00027517980197444558, 0.00038314092671498656, 0.00021148154337424785, 0.00029220173018984497, 0.00031583569943904877, 0.00047391033149324358, 0.00025226018624380231, 0.00017673874390311539, 0.00034209818113595247, 0.00053348770597949624, 0.00038669462082907557, 0.00049964874051511288, 0.00030359570519067347, 0.00074516417225822806, 0.00014725998335052282, 0.00033774084295146167, 0.0001765807974152267, 0.00054853240726515651, 0.00032814108999446034, 0.0004630683979485184, 0.00025941396597772837, 0.00053313677199184895, 0.00031474963179789484, 0.00043435455881990492, 0.00033071220968849957, 0.0003560759942047298, 0.00018783356063067913, 0.00051915511721745133, 0.00019559820066206157, 0.0005339193157851696, 0.00019297776452731341, 0.0001612223859410733, 0.00032189590274356306, 0.00031679551466368139, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 30,-32,127,112,66,-20,26,-12,122,-11,-58,-69,48,89,-31,-57, 
  /* [1][0][][] */ 33,64,-7,-5,83,-5,-2,27,50,55,-23,127,2,-26,90,-93, 
  /* [2][0][][] */ 34,-65,3,-13,-44,43,-57,95,-64,-99,20,72,-29,-127,88,-99, 
  /* [3][0][][] */ 127,115,-1,39,-119,-5,-62,-21,4,5,117,-67,-54,102,-51,-33, 
  /* [4][0][][] */ 3,16,17,3,-38,33,-21,43,-59,-29,-11,-15,0,-127,35,1, 
  /* [5][0][][] */ 127,-38,-27,14,-6,-104,-8,20,5,18,-101,-9,11,1,-4,21, 
  /* [6][0][][] */ -127,-79,-7,115,-81,5,-58,49,-125,-99,-88,-45,28,84,12,103, 
  /* [7][0][][] */ -13,19,-79,52,43,-127,-30,44,19,-23,16,-9,5,12,-34,23, 
  /* [8][0][][] */ 37,-46,-7,-6,16,25,-62,-58,-7,6,-77,15,-127,2,-4,18, 
  /* [9][0][][] */ 25,-63,60,116,1,29,-19,-96,127,-112,12,-35,-22,59,-80,21, 
  /* [10][0][][] */ -118,-79,-9,-40,103,51,40,76,111,-74,-67,42,106,-112,-127,69, 
  /* [11][0][][] */ 37,-14,-127,24,37,27,-19,46,-10,-29,-8,-4,1,23,-45,9, 
  /* [12][0][][] */ 99,-58,13,7,-1,-46,-57,-14,50,-4,-127,-13,-40,-12,10,60, 
  /* [13][0][][] */ 63,-70,40,-51,95,-1,-113,-127,31,-64,0,25,17,-2,20,-12, 
  /* [14][0][][] */ -60,38,-93,-37,92,-127,55,-70,43,35,-8,-84,21,87,-26,22, 
  /* [15][0][][] */ 24,-11,61,43,52,-53,-39,-17,7,-58,-72,-10,-127,-54,-19,63, 
  /* [16][0][][] */ -127,56,-7,16,-12,93,42,88,-24,30,109,21,-9,13,6,-51, 
  /* [17][0][][] */ -30,-12,-54,-46,-41,1,42,83,-34,127,-22,8,-8,92,72,9, 
  /* [18][0][][] */ 3,127,-57,12,16,-24,67,-55,36,102,-52,123,7,-30,25,-105, 
  /* [19][0][][] */ 6,-12,32,20,7,41,-5,12,16,7,-43,-8,-127,1,-13,28, 
  /* [20][0][][] */ 99,-77,-9,-99,-32,24,27,-84,-62,41,-127,-40,36,3,66,30, 
  /* [21][0][][] */ 37,-8,127,33,-25,56,13,-3,2,22,-15,-18,-12,69,18,-10, 
  /* [22][0][][] */ 26,10,14,3,-32,-7,34,127,10,6,16,14,2,42,34,32, 
  /* [23][0][][] */ -29,17,-89,7,14,-127,2,29,-7,-30,-14,-14,-62,1,3,45, 
  /* [24][0][][] */ 29,-64,-4,-44,46,10,-15,3,42,36,49,90,-30,93,127,35, 
  /* [25][0][][] */ -127,-86,-51,-3,6,6,8,-37,-51,-1,-76,3,14,30,39,56, 
  /* [26][0][][] */ 19,-6,55,10,-8,16,-45,81,-83,-72,-4,23,5,-127,40,-11, 
  /* [27][0][][] */ -106,43,-47,23,32,-26,-4,28,35,-31,127,28,-12,5,-5,-26, 
  /* [28][0][][] */ -19,-4,17,37,2,-4,15,79,28,14,-25,-3,-127,-9,-13,33, 
  /* [29][0][][] */ -6,67,51,-33,40,-18,18,-22,-127,29,-32,8,4,38,-93,3, 
  /* [30][0][][] */ -12,-11,-127,-41,25,-67,-12,27,-16,-20,-1,-18,-40,-24,12,14, 
  /* [31][0][][] */ 114,-23,-127,9,30,-1,-39,55,-18,-2,-68,-59,14,-10,-70,28, 
  /* [32][0][][] */ -126,54,36,50,20,101,17,49,29,-3,127,8,-21,23,-11,-29, 
  /* [33][0][][] */ 14,-13,127,-24,-68,28,3,-44,-8,9,-18,26,-11,16,36,20, 
  /* [34][0][][] */ -27,-22,-55,-111,23,5,3,-25,-23,-51,-43,-127,-1,6,53,26, 
  /* [35][0][][] */ -8,-19,32,37,45,-29,23,-37,-127,45,-9,11,-29,106,-35,-32, 
  /* [36][0][][] */ -127,57,-42,-8,-14,48,47,87,4,23,125,-20,1,25,23,-22, 
  /* [37][0][][] */ -30,4,127,-28,-65,-46,20,-30,18,14,1,6,-3,-55,54,9, 
  /* [38][0][][] */ 13,-7,-6,27,36,-57,-66,12,-29,-29,70,-8,127,33,-19,-3, 
  /* [39][0][][] */ -30,-9,-8,-52,-68,-127,83,121,-58,-16,8,-55,3,45,50,79, 
  /* [40][0][][] */ 63,4,-18,-10,-11,78,-12,2,13,2,8,-4,127,7,-16,-16, 
  /* [41][0][][] */ -2,-11,-40,-127,24,-8,-21,-71,-4,-43,11,-43,-11,-12,-13,34, 
  /* [42][0][][] */ 36,58,12,99,-127,1,-120,3,-90,-79,91,-84,-38,125,-45,36, 
  /* [43][0][][] */ 12,127,-15,123,18,39,33,-83,-43,78,-5,22,3,-56,52,28, 
  /* [44][0][][] */ -12,-23,-127,24,47,76,-45,55,-9,-25,34,-21,12,-23,-43,-2, 
  /* [45][0][][] */ 6,28,-11,-127,-28,-11,48,-13,-23,23,-43,13,3,-104,30,-40, 
  /* [46][0][][] */ 12,42,56,-15,20,7,-56,59,31,-46,-34,19,23,127,56,-6, 
  /* [47][0][][] */ 16,-27,22,-49,-36,17,-73,66,-5,-43,18,32,7,-127,45,13, 
  /* [48][0][][] */ 9,-9,8,-127,-17,-16,3,11,13,-20,12,-21,10,46,1,69, 
  /* [49][0][][] */ 27,-34,0,108,70,16,12,65,-53,27,28,26,-11,46,127,-10, 
  /* [50][0][][] */ -20,-1,68,-18,7,127,-17,-77,30,-18,114,29,94,-23,-13,-53, 
  /* [51][0][][] */ 34,46,6,16,17,2,-40,17,46,7,0,127,15,32,32,-53, 
  /* [52][0][][] */ -19,78,127,19,15,-41,21,-59,-30,19,10,39,12,92,-127,-6, 
  /* [53][0][][] */ -8,-16,-43,-127,-47,-4,19,-38,-16,33,8,-6,12,-25,37,-1, 
  /* [54][0][][] */ 20,6,-19,-45,26,9,-9,19,56,-25,14,-27,-13,127,14,33, 
  /* [55][0][][] */ -18,-24,-24,-3,20,-41,-14,-127,0,-84,-17,-7,-24,-84,-47,-18, 
  /* [56][0][][] */ 33,57,29,51,-6,-28,12,127,16,-31,-11,-47,88,-14,-45,48, 
  /* [57][0][][] */ 74,-18,127,-17,-62,-53,0,-31,22,5,-97,32,64,-43,36,10, 
  /* [58][0][][] */ 113,107,18,120,-127,-28,10,48,-14,31,86,-19,-68,-59,-29,-81, 
  /* [59][0][][] */ 119,-38,-6,-1,-25,-18,-7,4,-39,12,-127,-9,20,-16,-8,19, 
  /* [60][0][][] */ -127,28,6,-4,13,18,22,30,6,15,89,-6,-28,-3,22,-8, 
  /* [61][0][][] */ -127,73,9,11,14,-19,-75,-70,123,-102,95,-25,64,-17,-93,-54, 
  /* [62][0][][] */ -19,-51,-122,84,83,127,-16,112,25,-66,56,-9,-59,5,-127,-19, 
  /* [63][0][][] */ -55,3,127,-40,-54,-58,32,-31,11,23,2,16,-10,-44,80,12, 
  /* [64][0][][] */ 37,66,10,41,83,9,98,-127,-18,118,-5,-2,-18,-116,-23,31, 
  /* [65][0][][] */ 0,24,9,-17,69,5,-2,-127,-18,-59,-29,-42,-4,-51,50,20, 
  /* [66][0][][] */ -127,9,-21,1,-47,25,8,-43,-67,-34,-76,41,53,14,51,75, 
  /* [67][0][][] */ -1,-40,11,127,13,3,-30,29,49,18,9,-10,-10,-31,-87,-25, 
  /* [68][0][][] */ 17,-7,-5,127,-48,-15,1,-21,-38,21,20,-22,-28,-49,-25,-51, 
  /* [69][0][][] */ 95,79,17,127,48,-26,65,-114,31,100,18,55,5,-27,24,-17, 
  /* [70][0][][] */ -3,-24,-15,-71,108,-61,8,-4,68,-33,57,-30,-2,127,56,51, 
  /* [71][0][][] */ -10,61,-3,62,27,-127,-43,86,29,-101,12,2,6,-53,-36,44, 
  /* [72][0][][] */ -127,-73,-20,47,18,36,-25,18,-49,-29,-74,37,48,18,-4,100, 
  /* [73][0][][] */ -27,-19,-18,67,20,-28,0,-16,76,7,0,-9,23,127,-67,-37, 
  /* [74][0][][] */ 79,-52,16,-28,-56,-31,45,-4,-41,-8,-127,26,-115,2,35,65, 
  /* [75][0][][] */ -24,-18,-12,127,-43,10,-5,-21,-72,14,-22,-32,9,-52,-19,-34, 
  /* [76][0][][] */ 3,-11,-17,48,37,9,-26,-127,22,-112,11,21,-16,-30,30,-41, 
  /* [77][0][][] */ 127,-35,23,58,-40,-8,-39,-2,52,-8,-37,52,33,29,-50,37, 
  /* [78][0][][] */ -5,-4,59,4,-1,-12,-71,35,36,-31,-45,-35,21,127,23,-36, 
  /* [79][0][][] */ -6,25,50,15,40,61,-53,-50,11,-52,67,-18,127,-26,-24,-40, 
  /* [80][0][][] */ -127,-83,-83,115,1,48,43,-24,-77,21,-99,15,37,-89,-22,43, 
  /* [81][0][][] */ 71,-2,-47,45,127,86,-25,-28,6,-86,-16,-71,-20,-1,-105,22, 
  /* [82][0][][] */ 105,127,1,31,-111,-26,-82,-32,-72,-17,102,-52,-56,78,-5,-42, 
  /* [83][0][][] */ 127,53,20,-30,7,-5,-16,28,44,8,83,-36,-56,-36,-25,-86, 
  /* [84][0][][] */ 1,-67,-86,-29,43,0,5,-127,-15,-52,35,17,-28,18,3,-9, 
  /* [85][0][][] */ -20,-2,-32,-46,-11,10,63,76,-9,127,-12,-35,32,54,67,-28, 
  /* [86][0][][] */ 99,-18,9,0,2,-33,-13,-22,6,-2,-127,1,18,16,-13,22, 
  /* [87][0][][] */ -17,34,3,-24,-3,59,-14,34,-16,-17,28,3,1,-127,2,-2, 
  /* [88][0][][] */ -2,-26,-127,-59,58,-35,-32,-114,24,-22,-19,-36,-33,8,46,-11, 
  /* [89][0][][] */ 41,-39,7,-104,36,-18,-27,127,94,-51,27,25,-3,56,17,42, 
  /* [90][0][][] */ -1,15,-35,52,71,-11,117,-90,74,127,-50,40,24,5,-13,-16, 
  /* [91][0][][] */ 51,-10,-44,-2,-1,-127,-8,-2,1,4,-54,1,41,-8,9,31, 
  /* [92][0][][] */ 12,-5,127,48,31,23,2,35,-40,16,-61,30,26,84,-11,4, 
  /* [93][0][][] */ 117,-33,-46,-28,-51,-66,8,32,-27,27,-127,-14,-4,20,-6,59, 
  /* [94][0][][] */ 16,-19,44,77,111,-32,-10,57,7,-15,-2,55,-6,127,-23,-77, 
  /* [95][0][][] */ -113,35,37,35,20,40,17,5,5,2,127,8,-23,30,-24,-36, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00052157539175823331, 0.0010096975602209568, 0.00059102801606059074, 0.0028050139080733061, 0.00093259412096813321, 0.00059940182836726308, 0.00058371829800307751, 0.0015363905113190413, 0.0012363115092739463, 0.00030905904714018106, 0.00065073586301878095, 0.001217367360368371, 0.0015580441104248166, 0.00050857145106419921, 0.0008090438786894083, 0.0012445725733414292, 0.00091157807037234306, 0.00059071357827633619, 0.00078633608063682914, 0.0017924634739756584, 0.0010167034342885017, 0.00057710317196324468, 0.0010646773735061288, 0.00061811698833480477, 0.00068874098360538483, 0.0012629287084564567, 0.00091626914218068123, 0.00065464031649753451, 0.0017683628248050809, 0.0012009510537609458, 0.00067652930738404393, 0.0006709895096719265, 0.00042109432979486883, 0.0016024534124881029, 0.00060872884932905436, 0.0015392149798572063, 0.00044648206676356494, 0.00093012070283293724, 0.0016824163030833006, 0.00050692365039139986, 0.0023452169261872768, 0.00049335835501551628, 0.00051438965601846576, 0.00057962979190051556, 0.0010325256735086441, 0.00070147996302694082, 0.00072291900869458914, 0.00072379282210022211, 0.0011336569441482425, 0.0007441412890329957, 0.0013510080752894282, 0.002544549060985446, 0.0004995209164917469, 0.00069813738809898496, 0.0011095949448645115, 0.0004040681233163923, 0.0013493954902514815, 0.00074064824730157852, 0.00083771249046549201, 0.0014559972332790494, 0.00048908585449680686, 0.00057259824825450778, 0.00070192012935876846, 0.00097730394918471575, 0.00053944054525345564, 0.00074533908627927303, 0.00080562388757243752, 0.0012088357470929623, 0.00064345746068283916, 0.00045081970165483654, 0.00087261339649558067, 0.0013608038425445557, 0.00098636862821877003, 0.0012744885170832276, 0.00077440252061933279, 0.0019007415976375341, 0.00037562620127573609, 0.00086149887647479773, 0.00045041681732982397, 0.0013991794548928738, 0.00083701213588938117, 0.0011811804724857211, 0.00066170509671792388, 0.0013599087251350284, 0.00080285355215892196, 0.0011079381220042706, 0.00084357045125216246, 0.00090826756786555052, 0.00047912000445649028, 0.0013242447748780251, 0.00049892580136656761, 0.001361904782243073, 0.00049224169924855232, 0.00041124105337075889, 0.00082108209608122706, 0.00080807215999811888, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -39761, 5075, 2047, -7132, -1809, -7239, -12392, -39913, -857, 23334, 32369, -9190, -1838, -23338, 39179, -46773, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00062500132480636239, 0.00083278829697519541, 0.0012225073296576738, 0.0009751284378580749, 0.0007793098920956254, 0.0010444497456774116, 0.0013836352154612541, 0.00057276530424132943, 0.00073389423778280616, 0.00075762538472190499, 0.00094656203873455524, 0.00061175558948889375, 0.0014217798598110676, 0.0014427922433242202, 0.00046412783558480442, 0.00076532707316800952, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -15,1,-23,11,22,1,-1,101,-49,17,36,-3,13,-19,-14,13,13,-16,-11,-11,60,-3,23,127,-14,84,-2,-11,29,-10,22,-27,-15,51,22,-48,17,41,20,-14,-99,-19,17,36,36,23,-118,-49, 
  /* [1][0][][] */ -37,-16,17,15,-30,8,4,53,-51,-37,7,-41,-19,-16,2,-2,-29,117,-9,16,10,8,-23,-18,26,-39,16,21,-23,-85,-34,23,-23,-7,33,-3,-6,-43,-1,18,-22,-32,127,14,7,0,24,-15, 
  /* [2][0][][] */ -20,-9,-9,-36,-5,-69,7,-21,1,9,15,24,15,16,-11,7,-4,-20,-24,-11,-6,0,-2,-127,-13,76,-12,3,-2,-23,-1,-5,-10,55,14,-1,23,14,27,-1,-39,1,-16,-5,-2,-11,13,9, 
  /* [3][0][][] */ -8,37,3,-34,-2,1,5,-3,-21,-6,2,36,-127,4,-8,-2,3,7,-21,2,-34,8,4,14,-7,-15,3,23,-10,18,4,19,5,0,16,20,-9,28,42,5,10,5,26,-29,7,-6,7,19, 
  /* [4][0][][] */ 40,-27,11,12,20,31,23,-23,-30,2,-16,-19,-2,6,2,16,26,-10,-79,9,-5,15,13,78,4,-36,8,50,7,-74,17,7,11,-32,35,-127,18,35,-1,17,-14,19,12,-23,-12,-21,16,3, 
  /* [5][0][][] */ 28,3,-22,55,-3,-4,7,27,0,-2,40,6,1,52,2,2,-25,20,27,6,7,7,0,-28,2,-48,6,-18,-6,-12,1,5,66,-127,2,28,-12,-7,17,-1,-91,56,18,-6,-5,-5,-98,-7, 
  /* [6][0][][] */ 28,-1,7,6,-12,-5,2,-14,-4,7,-5,4,-19,6,3,6,2,-14,127,9,4,13,15,-32,4,0,25,-11,-12,-2,-6,4,-2,-8,33,-37,3,-47,70,13,4,-5,-8,6,-9,1,6,-10, 
  /* [7][0][][] */ -49,-20,-14,35,-12,83,1,43,3,24,-1,127,81,1,-5,-6,-9,-19,-6,-20,-28,-8,-17,60,-4,-35,-55,-33,-12,-17,-8,-9,4,-2,-28,8,5,-54,95,-2,18,22,-66,-53,12,-6,10,4, 
  /* [8][0][][] */ -49,-43,2,4,-9,5,-1,35,-5,-65,2,37,45,2,9,4,-11,56,-31,8,-54,24,-9,-6,-2,-1,5,46,-13,116,-12,18,-4,8,-14,-127,-106,65,37,26,26,-1,108,-26,10,27,20,24, 
  /* [9][0][][] */ -25,7,-5,27,20,-31,-7,-1,56,-34,9,53,-59,7,12,3,-5,14,-41,-22,48,11,-12,-23,-1,10,50,-21,11,13,8,-7,-2,18,77,-106,-7,-127,-91,9,-32,29,52,6,9,5,-18,-37, 
  /* [10][0][][] */ -18,-6,-34,-127,49,92,12,-15,0,37,18,11,49,-56,-36,19,34,-44,55,-31,32,-21,37,57,-47,-115,6,-32,45,32,45,-48,-29,-80,24,-5,20,-46,7,-37,-28,-63,-14,10,13,15,20,-40, 
  /* [11][0][][] */ 1,55,-3,58,31,-55,-68,-14,-5,62,-19,-5,-9,45,-7,-76,28,46,5,-5,-55,-103,11,3,14,-52,26,-14,51,-31,22,-84,45,-15,-43,-94,87,31,12,-127,6,62,91,-70,-3,-51,33,31, 
  /* [12][0][][] */ 127,-6,-21,13,4,17,4,104,22,-14,-55,-25,1,14,-11,1,-10,9,-4,-2,5,0,3,23,-1,17,-6,1,-7,10,-6,5,1,-65,-9,13,-16,-14,-29,1,-16,-83,8,-126,-59,-12,82,-3, 
  /* [13][0][][] */ 10,4,0,5,8,-9,2,1,0,6,4,20,-7,1,4,0,6,-1,11,6,11,-9,6,-1,2,-3,18,127,10,-3,5,-5,4,2,-35,21,12,-7,6,-14,-11,-2,3,5,0,-4,-8,-13, 
  /* [14][0][][] */ 59,-22,49,-65,53,26,37,-98,-52,-50,-3,127,-71,1,60,10,48,21,-49,64,26,9,77,-16,20,66,-36,-113,29,-31,60,44,-4,68,-124,-52,-47,38,85,12,-41,13,51,0,0,7,9,-30, 
  /* [15][0][][] */ -4,-49,-78,-35,59,28,70,-53,-8,19,-17,-27,76,21,-95,61,56,46,76,-88,-95,-16,54,-12,-92,48,30,55,59,56,47,-53,28,55,103,127,-15,-113,-12,-32,90,62,117,-50,-1,-35,-19,65, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.026562554761767387, 0.035393502563238144, 0.051956560462713242, 0.041442956775426865, 0.033120669424533844, 0.044389113783836365, 0.058804493397474289, 0.024342525750398636, 0.031190503388643265, 0.032199077308177948, 0.040228884667158127, 0.025999613106250763, 0.060425642877817154, 0.061318669468164444, 0.019725432619452477, 0.032526399940252304, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 2776, 29844, -964, 49253, 3940, 124113, -1289, 54037, 6889, 27203, 24349, 440, 3806, 29639, -913, -4505, -861, 4498, 4123, -2067, 1095, -2565, 287, -20316, -4388, 38772, 134828, 102382, 4271, 226, -2689, -263, 23770, 303, -4071, 6797, 30822, 1262, 69552, 2177, 1092, 73051, 1052, 7894, 44904, 207, 1538, 49748, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.1945261626970023e-05, 3.3850436011562124e-05, 0.00018525577615946531, 4.9517831939738244e-05, 0.00016462829080410302, 7.1673261118121445e-05, 0.00013400160241872072, 0.00010227585153188556, 7.0233996666502208e-05, 3.8451798900496215e-05, 5.7079305406659842e-05, 0.00010830591781996191, 4.0250160964205861e-05, 4.3482017645146698e-05, 0.00015635986346751451, 0.00015250733122229576, 0.00016779608267825097, 5.2583625802071765e-05, 0.00010129254224011675, 0.00016270986816380173, 0.00011402239761082456, 0.00017239089356735349, 9.3539543740916997e-05, 0.00013521162327378988, 0.00010938893683487549, 0.0001161808249889873, 3.894144538207911e-05, 6.8790584919042885e-05, 0.00013689724437426776, 0.00014630178338848054, 0.00011916605581063777, 0.0001057333720382303, 5.0150872993981466e-05, 0.0001403518981533125, 4.2259580368408933e-05, 4.8402260290458798e-05, 0.00018463144078850746, 0.00010889671102631837, 7.8568948083557189e-05, 8.5574523836839944e-05, 0.00010999181540682912, 7.7995762694627047e-05, 8.6997562902979553e-05, 7.0605201472062618e-05, 3.6083827581023797e-05, 0.0001821611076593399, 0.00010732201917562634, 3.7472746043931693e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-93,97,70,53,-34,106,-62,59,-88,-80,47,51,-42,-71,-90,101,79,49,77,66,-75,-83,50,-32,-40,-64,-64,-67,61,-63,-113,-13,41,68,63,-65,52,-49,-22,50,-75,57,62,-93,10,76,-32, 81,-97,127,85,-77,-68,-57,-84,96,-102,-63,74,80,-109,-95,91,-38,97,82,127,85,-117,52,72,-52,-78,-68,-80,56,79,-29,-127,-85,79,80,83,-83,82,-83,-15,76,-95,82,89,-73,-127,94,-102, 35,-46,70,37,18,-41,-48,-38,42,-31,5,34,28,-78,-55,-2,-52,38,34,69,33,-56,31,26,-28,-45,-43,-22,31,30,88,-89,-84,44,34,34,-29,39,-38,-9,41,-41,33,42,-6,-9,37,-72, 
  /* [0][1][][] */ 92,-113,-42,93,54,-82,127,-89,86,-112,-71,81,84,-111,-13,-127,127,107,73,-38,83,107,-127,73,74,-76,-94,-99,-127,86,-68,-8,-87,71,105,96,-85,78,-81,89,84,-101,87,89,-89,106,94,-90, 127,-127,-66,127,-127,-127,-91,-127,127,-127,-127,127,127,-127,-23,97,-64,127,127,-50,127,127,69,127,127,-127,-127,-127,53,127,-28,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 63,-77,-34,65,37,-62,-48,-62,56,-43,-60,58,47,-54,-18,10,-62,50,57,-30,56,64,51,64,66,-65,-61,-44,36,55,127,15,-61,69,48,49,-48,60,-60,56,60,-59,54,62,-60,-67,59,-55, 
  /* [0][2][][] */ 44,-49,-46,50,27,-52,63,-43,40,-71,-4,39,55,-73,83,-79,72,51,34,-30,26,-10,-77,29,-24,-44,-49,-49,-74,32,-41,90,-73,36,49,42,-27,37,-43,-86,47,-50,41,44,-23,15,40,-73, 72,-74,-49,79,-57,-63,-73,-67,51,-76,-66,61,74,-49,127,32,-46,60,61,-44,54,-17,41,67,-50,-66,-79,-62,31,62,-23,117,-55,64,58,58,-50,62,-67,-105,68,-69,60,61,-85,49,63,-51, 41,-41,-26,46,28,-19,-18,-33,14,-25,-52,28,31,5,67,24,-35,22,28,-32,27,2,39,41,-25,-28,-48,-24,33,33,62,67,1,34,15,23,-22,30,-29,-55,28,-32,25,29,-64,9,31,-3, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0034826735500246286, 0.0014386434340849519, 0.0078733703121542931, 0.0021045077592134476, 0.0069967019371688366, 0.0030461135320365429, 0.0056950682774186134, 0.0043467236682772636, 0.0029849447309970856, 0.0016342013841494918, 0.0024258703924715519, 0.0046030012890696526, 0.001710631768219173, 0.0018479857826605439, 0.0066452943719923496, 0.0064815613441169262, 0.0071313334628939629, 0.0022348039783537388, 0.0043049328960478306, 0.0069151693023741245, 0.004845951683819294, 0.0073266127146780491, 0.003975430503487587, 0.0057464935816824436, 0.004649029579013586, 0.0049376850947737694, 0.0016550114378333092, 0.0029235996771603823, 0.0058181327767670155, 0.0062178256921470165, 0.0050645573064684868, 0.0044936682097613811, 0.0021314120385795832, 0.0059649557806551456, 0.0017960321856662631, 0.0020570959895849228, 0.0078468360006809235, 0.0046281102113425732, 0.0033391802571713924, 0.003636917332187295, 0.0046746521256864071, 0.003314819885417819, 0.0036973962560296059, 0.0030007208697497845, 0.0015335626667365432, 0.007741847075521946, 0.0045611858367919922, 0.0015925916377454996, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 513, 776, 1794, 492, 8776, 12404, 1972, -192, -744, -536, 861, 1042, 3011, 813, 26488, 2474, 1403, -996, -185, 2370, -1752, 10407, 7710, 7436, 5058, 202, 4224, 3969, 8071, -445, 9324, 5498, 410, -124, 4087, 2834, -1391, 192, -559, 5117, 791, -493, -737, -8, 875, 3117, 548, 968, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00045216802391223609, 0.00089033186668530107, 0.00032138239475898445, 0.00030423561111092567, 0.00024845893494784832, 0.00032663359888829291, 0.00055414909729734063, 0.0002305078087374568, 0.0004307282215449959, 0.00085107865743339062, 0.0011651531094685197, 0.00029850413557142019, 0.00042493280488997698, 0.00091083801817148924, 0.00013649869651999325, 0.00050629436736926436, 0.00034885123022831976, 0.00039040853152982891, 0.0003095227584708482, 0.00038023962406441569, 0.0003535812720656395, 0.00024692900478839874, 0.0004799577291123569, 0.00020694552222266793, 0.0003167102113366127, 0.00035866166581399739, 0.0016471761045977473, 0.00047095719492062926, 0.00021691856090910733, 0.00047864433145150542, 0.00028245759312994778, 0.00021787550940643996, 0.00091674906434491277, 0.00032128236489370465, 0.000911389768589288, 0.00063659402076154947, 0.00099260162096470594, 0.00044918301864527166, 0.00024253144511021674, 0.00036238136817701161, 0.00019644241547212005, 0.00030041462741792202, 0.00037151461583562195, 0.00026917736977338791, 0.0022094359155744314, 0.00044124858686700463, 0.00042602766188792884, 0.0012243875535205007, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,-2,-2,71,-37,41,24,-30, 
  /* [1][0][][] */ 25,77,52,18,21,-38,117,127, 
  /* [2][0][][] */ -35,3,1,-6,-127,-17,12,-2, 
  /* [3][0][][] */ 97,1,-9,-116,-127,14,37,-15, 
  /* [4][0][][] */ -127,40,-8,-20,77,-16,40,13, 
  /* [5][0][][] */ -104,-28,27,-13,-127,14,3,79, 
  /* [6][0][][] */ -15,-127,22,-14,13,4,-3,34, 
  /* [7][0][][] */ -69,-2,2,102,127,-28,-36,6, 
  /* [8][0][][] */ 66,6,2,-127,4,-24,-42,-30, 
  /* [9][0][][] */ -5,-127,-10,-10,6,96,-64,94, 
  /* [10][0][][] */ -99,-7,3,20,-127,66,73,-9, 
  /* [11][0][][] */ 116,12,38,12,-58,-47,-32,-127, 
  /* [12][0][][] */ 3,14,40,-6,5,-80,127,62, 
  /* [13][0][][] */ 68,-25,-12,-8,120,127,116,-39, 
  /* [14][0][][] */ 118,64,-8,37,-127,-25,-23,-21, 
  /* [15][0][][] */ -19,-127,16,-6,7,4,5,35, 
  /* [16][0][][] */ -51,-13,2,1,-127,-4,18,5, 
  /* [17][0][][] */ -23,112,-109,3,12,-127,107,-89, 
  /* [18][0][][] */ 127,-28,-47,14,-62,24,13,102, 
  /* [19][0][][] */ 127,-49,-21,-11,39,2,27,5, 
  /* [20][0][][] */ 127,32,-17,122,-1,37,0,-60, 
  /* [21][0][][] */ 7,28,-59,5,-19,90,-127,-82, 
  /* [22][0][][] */ -127,22,28,1,-34,4,-52,-21, 
  /* [23][0][][] */ -37,-54,-1,27,-127,63,79,-17, 
  /* [24][0][][] */ 127,-2,-8,-9,-86,-16,9,16, 
  /* [25][0][][] */ 31,-9,2,-23,127,54,54,-40, 
  /* [26][0][][] */ 5,-95,9,-43,0,-127,80,-58, 
  /* [27][0][][] */ -16,-127,30,-13,-3,-62,37,-5, 
  /* [28][0][][] */ -97,37,-26,22,-15,-22,127,97, 
  /* [29][0][][] */ -18,47,14,3,5,46,-110,-127, 
  /* [30][0][][] */ 127,-23,9,8,-88,-6,-40,-27, 
  /* [31][0][][] */ 1,-10,60,-21,8,-124,127,57, 
  /* [32][0][][] */ -75,28,3,9,-127,-99,-94,53, 
  /* [33][0][][] */ -24,11,2,25,-127,-53,-49,13, 
  /* [34][0][][] */ 10,-127,47,-7,-6,89,-73,59, 
  /* [35][0][][] */ -23,-50,-127,-10,-1,-74,47,-51, 
  /* [36][0][][] */ 4,127,60,3,-12,8,-18,-35, 
  /* [37][0][][] */ -127,35,40,-22,51,-32,-10,-114, 
  /* [38][0][][] */ -127,-16,-44,-13,40,24,32,113, 
  /* [39][0][][] */ 2,-41,76,-12,25,-86,127,106, 
  /* [40][0][][] */ -32,-21,-6,-41,-127,107,120,-27, 
  /* [41][0][][] */ -127,43,9,-77,-96,-95,-93,56, 
  /* [42][0][][] */ -42,-123,-101,-6,-7,69,-127,-86, 
  /* [43][0][][] */ -80,10,-21,-127,113,72,70,7, 
  /* [44][0][][] */ 127,-5,18,-90,30,-33,-16,38, 
  /* [45][0][][] */ -18,-127,-9,-12,-3,-65,76,13, 
  /* [46][0][][] */ 105,-9,-4,-24,127,-40,-26,8, 
  /* [47][0][][] */ 127,-1,-9,111,-9,28,9,-51, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0007473089499399066, 0.0014714727876707911, 0.00053115637274459004, 0.00050281750736758113, 0.00041063406388275325, 0.00053983519319444895, 0.00091585551854223013, 0.00038096579373814166, 0.00071187486173585057, 0.001406598137691617, 0.0019256764790043235, 0.00049334496725350618, 0.00070229661650955677, 0.0015053638489916921, 0.00022559467470273376, 0.00083676481153815985, 0.0005765547975897789, 0.00064523756736889482, 0.00051155569963157177, 0.00062843115301802754, 0.00058437226107344031, 0.00040810549398884177, 0.00079323764657601714, 0.00034202382084913552, 0.00052343454444780946, 0.00059276871616020799, 0.0027223273646086454, 0.00077836227137595415, 0.00035850651329383254, 0.00079106696648523211, 0.00046682442189194262, 0.00036008807364851236, 0.0015151331899687648, 0.0005309910629875958, 0.0015062757302075624, 0.0010521141812205315, 0.0016404965426772833, 0.00074237555963918567, 0.00040083753992803395, 0.00059891637647524476, 0.00032466510310769081, 0.00049650244181975722, 0.00061401113634929061, 0.00044487588456831872, 0.0036515877582132816, 0.00072926213033497334, 0.00070410611806437373, 0.0020235746633261442, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -39514, 26250, -14034, -14567, 19260, -5683, 33371, 42833, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00045656264410354197, 0.00065976555924862623, 0.0014391398290172219, 0.0016764097381383181, 0.00080199568765237927, 0.00060965714510530233, 0.00073421705747023225, 0.0011872476898133755, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -54,-9,-35,24,11,-22,2,-1,-117,127,-39,117,111,8,66,-22,-2,-34,3,-2,-8,-3,-26,-37,25,-88,15,61,-11,8,20,-30,1,-80,114,20,-8,-8,-6,-17,115,2,43,-17,-35,22,-15,-13, 
  /* [1][0][][] */ -4,36,127,7,-8,-20,-1,-81,31,-2,19,3,-24,2,-3,-120,8,-56,9,10,-23,37,26,-31,-22,-13,9,7,14,-4,10,5,-6,18,16,9,-13,-34,69,-54,11,33,-11,26,-15,6,22,-1, 
  /* [2][0][][] */ 6,-52,15,-45,32,32,-6,-29,9,1,-6,14,-12,62,7,-1,-41,127,-25,-31,-19,26,-41,-8,123,1,-2,-7,-31,-7,0,-37,-9,-15,-2,9,-11,-4,-16,10,15,-22,-17,-5,5,25,-26,-42, 
  /* [3][0][][] */ 2,-90,-3,8,2,-4,-13,0,-8,-10,14,21,12,-12,52,2,-9,-21,2,27,-7,23,-27,6,4,52,-3,8,-4,3,127,3,13,11,0,0,-20,-15,-9,14,-8,8,-8,26,-9,-2,-3,32, 
  /* [4][0][][] */ -100,6,-3,4,-3,-40,1,10,39,-36,19,-18,-34,1,-11,-4,-2,6,2,22,8,-32,12,4,-8,45,7,113,0,1,-8,-30,-2,-127,-34,10,-1,-7,0,-1,-49,-8,-13,16,-57,1,8,7, 
  /* [5][0][][] */ -19,25,17,3,-53,13,-1,55,21,9,10,7,-10,-47,12,34,0,-92,17,10,39,-32,1,46,10,5,-83,-41,-37,-38,17,9,-3,-65,1,-67,72,9,-49,19,23,-47,5,9,127,-14,-48,-5, 
  /* [6][0][][] */ -29,-25,-11,-3,40,-35,2,-29,-10,-8,36,-18,-5,40,-3,-59,2,5,-3,-27,-35,44,-7,-82,5,-14,-49,-68,24,45,-14,-1,4,-62,-16,69,-66,-47,6,-61,-10,14,17,41,127,-27,44,14, 
  /* [7][0][][] */ 10,35,-75,27,-22,16,8,60,-7,-4,66,-31,11,-33,-9,-6,-15,-127,38,-37,60,42,16,-60,18,-19,17,3,-17,28,-11,6,7,36,0,-26,-10,-53,-38,-62,-14,-26,39,65,-30,-19,-7,3, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.019403912127017975, 0.028040036559104919, 0.061163440346717834, 0.071247413754463196, 0.03408481553196907, 0.025910427793860435, 0.0312042236328125, 0.050458025187253952, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52536, -33, 8211, 246, 5551, -4435, 1074, 19929, 916, 34159, -2491, 28170, -6178, -715, 26819, 2481, 476, 14013, 24093, 12304, -268, -505, -205, 6258, -8236, 25796, 45415, 34199, 2624, 39, -1171, 1563, 788, 17337, -6892, 18214, -10872, 17834, -22206, 119080, 12677, 20521, 10215, -1817, 15422, 3609, 903, 72, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00031604961259290576, 0.00025570779689587653, 0.00019446227815933526, 0.00021237799955997616, 0.00015820455155335367, 9.5381663413718343e-05, 0.0011056150542572141, 0.00017568797920830548, 0.00013306501205079257, 0.00014331031707115471, 0.00010553079482633621, 0.00015326681022997946, 0.00029797956813126802, 0.00022257602540776134, 9.2957365268375725e-05, 0.00059653655625879765, 0.00027670167037285864, 0.000292158656520769, 9.42140759434551e-05, 0.00015703252574894577, 0.00018855223606806248, 0.00021230654965620488, 0.00019881584739778191, 0.000307596375932917, 0.00016627750301267952, 0.00014426904090214521, 0.00065213878406211734, 0.00010198793461313471, 0.00028210619348101318, 0.019555265083909035, 0.00010126700362889096, 0.00017317083256784827, 0.0010344344191253185, 0.00016806978965178132, 0.00017287736409343779, 0.00013579944788943976, 0.00041290867375209928, 0.00014328170800581574, 0.00027587520889937878, 2.0980063709430397e-05, 0.00025858895969577134, 6.9880443334113806e-05, 0.00015744978736620396, 0.00015298537618946284, 0.00015106819046195596, 9.5444840553682297e-05, 0.0002581639273557812, 0.00011762317444663495, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,20,108,4,81,-1,28,15,8,9,8,-8,-9,-45,9,-2,9,-22,-116,-6,-22,127,-9,-2,6,-5,8,-5,5,16,98,21,28,38,-28,1,34,-1,2,18,-68,-9,-9,16,2,-7,-10, 127,9,15,-127,28,86,10,11,125,127,7,43,-50,-23,5,8,127,-56,-59,-57,-100,25,-108,15,17,70,-32,-84,23,21,9,-125,5,-62,127,10,-40,-47,-5,116,-79,-97,-29,3,-34,-8,-127,22, -32,-3,8,14,0,64,3,18,29,9,-14,32,-14,-3,16,4,-103,29,-3,77,-31,-11,-17,-6,-4,-59,-3,29,-17,5,4,-23,8,-24,17,-19,-1,47,42,-13,50,39,-15,11,-43,3,-1,-6, 
  /* [0][1][][] */ 126,7,0,-98,14,-27,35,-16,9,9,-12,54,-7,-1,18,-32,0,-49,-60,-88,11,-73,-124,-18,5,97,-15,-127,-8,33,12,-109,18,-53,-2,127,-3,59,-41,40,-62,-127,39,-87,-44,-14,-12,-5, 27,-127,-127,114,-127,-127,-127,-127,-127,-95,127,-127,127,127,35,-127,-83,127,127,-107,127,127,112,127,127,-127,-127,28,-127,-127,94,127,-127,127,-29,-40,127,-127,127,127,127,-79,127,127,127,-122,103,106, 54,5,49,-13,6,-61,43,19,-23,15,-104,-8,0,-40,127,5,63,-65,-71,86,14,-45,12,-33,2,6,-38,67,20,40,1,2,33,-44,9,67,-5,65,68,-11,-81,9,-84,-30,27,-17,-11,6, 
  /* [0][2][][] */ -53,-7,25,-17,7,34,-37,22,8,-23,12,33,6,-6,-37,18,5,22,-14,104,7,-31,-16,-12,-3,21,0,50,-9,3,47,-33,-18,-44,-31,-39,0,31,8,-23,9,-4,41,-37,-36,18,-11,17, 68,125,75,21,16,-21,123,35,19,-3,43,26,-5,-1,-90,25,-58,-56,-37,122,-37,49,12,20,32,-63,-40,29,77,1,127,21,86,-26,8,-35,-25,-17,-13,118,-27,-11,-40,45,21,-32,8,-127, -41,-4,7,-4,5,-6,-62,8,-18,-10,-40,-40,20,-9,-9,12,33,24,-9,-127,24,-9,5,-9,-6,10,-10,-55,-15,8,6,7,-20,87,-36,-22,-4,37,24,-62,4,9,-37,7,-42,127,-5,-3, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013432108797132969, 0.010867580771446228, 0.008264646865427494, 0.0090260645374655724, 0.0067236931063234806, 0.0040537207387387753, 0.046988639980554581, 0.0074667390435934067, 0.0056552626192569733, 0.0060906880535185337, 0.0044850585982203484, 0.0065138395875692368, 0.012664131820201874, 0.0094594806432723999, 0.0039506880566477776, 0.025352802127599716, 0.011759821325540543, 0.012416742742061615, 0.0040040980093181133, 0.0066738822497427464, 0.0080134700983762741, 0.0090230284258723259, 0.0084496736526489258, 0.0130728455260396, 0.0070667937397956848, 0.0061314343474805355, 0.027715897187590599, 0.0043344870209693909, 0.011989513412117958, 0.83109873533248901, 0.0043038474395871162, 0.0073597603477537632, 0.043963462114334106, 0.0071429656818509102, 0.0073472880758345127, 0.0057714763097465038, 0.017548618838191032, 0.0060894722118973732, 0.01172469649463892, 0.00089165265671908855, 0.010990031063556671, 0.0029699187725782394, 0.006691616028547287, 0.0065018781460821629, 0.0064203981310129166, 0.0040564057417213917, 0.010971967130899429, 0.0049989847466349602, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 43102, 6522, 5809, 6915, 1206, 7288, -1938, -228, 995, 2151, 3255, 296, 1819, -735, 736, -1801, 4864, 10800, -229, 22807, 4626, 2069, 8928, -481, 2694, 4832, 20095, 7037, -48, -2583, 138, 1628, -1934, 7076, 2711, 6018, 7468, 4096, 19194, 1667, -1009, 2530, 1221, 3447, 3713, 1915, -1230, 2348, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 9.9855336884502321e-05, 0.00034569390118122101, 0.00026655002147890627, 0.00046657735947519541, 0.0018756536301225424, 0.00068799586733803153, 0.00098936061840504408, 0.0012674699537456036, 0.00057234748965129256, 0.00063158408738672733, 0.00068882113555446267, 0.00053783919429406524, 0.00053002790082246065, 0.00065543368691578507, 0.00061538082081824541, 0.0020016389898955822, 0.00033231041743420064, 0.0003896104171872139, 0.0022703076247125864, 0.00012016446999041364, 0.00026171971694566309, 0.00048459437675774097, 0.00044449686538428068, 0.0010427834931761026, 0.00044804063509218395, 0.00024112498795147985, 0.00020048384612891823, 0.00051740679191425443, 0.0011135874083265662, 0.0010106671834364533, 0.0005845420528203249, 0.0005224194610491395, 0.0010226058075204492, 0.00031104532536119223, 0.00038538838271051645, 0.00030799926025792956, 0.00049372605280950665, 0.00032898571225814521, 0.00012148459063610062, 0.0027300666552037001, 0.0005855988129042089, 0.001100067631341517, 0.00040362821891903877, 0.00043266432476229966, 0.00032507497235201299, 0.0005591297522187233, 0.00093661557184532285, 0.0011359864147379994, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 82,27,-2,-8,127,34,-52,-27, 
  /* [1][0][][] */ -8,1,5,127,13,-5,5,13, 
  /* [2][0][][] */ 32,-127,-21,44,-11,-64,78,10, 
  /* [3][0][][] */ 127,-31,-9,13,-14,-36,29,2, 
  /* [4][0][][] */ 5,-58,127,-10,-7,-49,10,-93, 
  /* [5][0][][] */ 63,9,-3,2,127,5,-2,-4, 
  /* [6][0][][] */ -5,103,-8,127,23,57,-73,-61, 
  /* [7][0][][] */ -9,127,-3,4,3,-13,15,-2, 
  /* [8][0][][] */ 127,60,-2,8,-61,-34,11,-34, 
  /* [9][0][][] */ -127,15,4,17,52,5,-5,0, 
  /* [10][0][][] */ -83,-15,18,127,45,32,-18,-1, 
  /* [11][0][][] */ -127,-6,13,-65,34,11,-25,-40, 
  /* [12][0][][] */ 127,26,-3,14,-46,-16,7,-46, 
  /* [13][0][][] */ -13,74,-127,-6,2,100,-70,74, 
  /* [14][0][][] */ -55,-25,-13,127,29,10,-3,-24, 
  /* [15][0][][] */ -6,127,1,-5,2,-18,13,-46, 
  /* [16][0][][] */ -13,-124,-30,-7,1,-111,127,-40, 
  /* [17][0][][] */ 18,127,2,-11,11,83,-81,-21, 
  /* [18][0][][] */ -1,52,-127,0,1,56,-35,58, 
  /* [19][0][][] */ -82,17,-3,6,-127,2,28,26, 
  /* [20][0][][] */ -127,-30,7,1,83,-21,33,8, 
  /* [21][0][][] */ -55,-8,1,3,-127,7,10,1, 
  /* [22][0][][] */ -127,-20,-2,3,80,-19,43,45, 
  /* [23][0][][] */ -21,-22,-7,-10,0,75,-127,-89, 
  /* [24][0][][] */ -9,40,-127,4,7,50,-19,73, 
  /* [25][0][][] */ 100,-48,-8,127,-77,-20,15,-36, 
  /* [26][0][][] */ 6,-16,-6,1,-11,127,126,-34, 
  /* [27][0][][] */ 70,-7,-6,9,127,29,31,-23, 
  /* [28][0][][] */ -2,127,-70,5,2,77,-32,119, 
  /* [29][0][][] */ -7,13,-5,-9,-2,88,-127,-86, 
  /* [30][0][][] */ 2,-5,-2,-127,-4,4,-6,-16, 
  /* [31][0][][] */ -70,2,4,8,-127,8,15,1, 
  /* [32][0][][] */ -3,39,4,-127,-15,30,-81,-102, 
  /* [33][0][][] */ -74,-5,-1,-4,-127,41,51,1, 
  /* [34][0][][] */ -127,57,5,22,45,-30,16,16, 
  /* [35][0][][] */ -17,127,-6,-7,-3,-93,70,-23, 
  /* [36][0][][] */ -11,53,4,-26,7,103,-127,-34, 
  /* [37][0][][] */ 33,-54,-7,22,22,-127,116,-16, 
  /* [38][0][][] */ 16,-127,18,8,4,60,-61,67, 
  /* [39][0][][] */ 6,-127,-16,-6,-5,-10,-56,-107, 
  /* [40][0][][] */ 115,47,5,-9,-53,84,-127,-106, 
  /* [41][0][][] */ 6,-127,21,6,-5,86,-65,126, 
  /* [42][0][][] */ 66,-9,-9,-127,-67,-10,0,-40, 
  /* [43][0][][] */ -84,-31,10,-127,52,18,-22,-12, 
  /* [44][0][][] */ 1,-26,-6,21,-31,100,127,-17, 
  /* [45][0][][] */ -127,-49,-10,0,6,21,10,-35, 
  /* [46][0][][] */ 14,86,127,4,-6,8,11,21, 
  /* [47][0][][] */ -2,4,9,127,8,1,0,-2, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00022019716561771929, 0.00076231092680245638, 0.00058778590755537152, 0.0010288784978911281, 0.0041361195035278797, 0.0015171420527622104, 0.0021817001979798079, 0.0027949761133641005, 0.0012621186906471848, 0.0013927450636401772, 0.0015189619734883308, 0.0011860223021358252, 0.0011687972582876682, 0.0014453371986746788, 0.0013570141745731235, 0.00441393768414855, 0.00073279818752780557, 0.00085915392264723778, 0.0050063952803611755, 0.0002649820817168802, 0.00057713425485417247, 0.001068608951754868, 0.0009801874402910471, 0.0022995062172412872, 0.00098800205159932375, 0.00053171959007158875, 0.00044209929183125496, 0.0011409656144678593, 0.0024556401185691357, 0.0022286844905465841, 0.0012890096986666322, 0.0011520193656906486, 0.0022550111170858145, 0.00068590522278100252, 0.00084984366549178958, 0.00067918817512691021, 0.0010887457756325603, 0.00072546669980511069, 0.00026789316325448453, 0.0060202381573617458, 0.0012913401005789638, 0.0024258268531411886, 0.00089006545022130013, 0.00095409475034102798, 0.00071684288559481502, 0.0012329714372754097, 0.0020653887186199427, 0.0025050337426364422, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -4214, -25629, 25097, 23082, 2580, 93, 38380, 12553, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.001591999433003366, 0.00061617163009941578, 0.0017216510605067015, 0.0014233323745429516, 0.0010585690615698695, 0.0011394473258405924, 0.00076466205064207315, 0.00054363918025046587, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -13,-2,9,-93,10,25,6,6,3,5,4,-5,97,0,1,7,0,-10,-4,0,77,-4,1,4,29,34,13,12,8,3,2,-127,10,6,2,1,-27,0,-17,33,7,-26,-9,4,1,-3,2,4, 
  /* [1][0][][] */ -34,-7,0,-4,48,28,-30,78,20,7,-32,-20,14,0,16,38,0,41,19,-48,-1,22,127,17,-30,-3,55,3,20,-4,21,-7,14,-10,-7,-23,5,-51,9,4,-6,-7,-82,-9,-33,7,-50,-100, 
  /* [2][0][][] */ -58,18,2,13,42,-13,28,25,-10,56,8,-3,0,0,6,51,0,12,-127,25,-2,13,5,-14,-33,-1,36,3,13,29,19,0,4,-5,-11,-14,8,9,3,0,37,-8,-28,0,24,-53,23,14, 
  /* [3][0][][] */ 0,0,-1,11,-7,30,5,-3,66,20,-1,-3,27,0,-30,-9,0,0,-9,0,-3,0,6,-18,-15,-6,-11,-1,-7,-2,-2,-7,-50,49,-57,-4,9,-1,4,-127,-1,2,0,-56,-4,-3,-2,4, 
  /* [4][0][][] */ 0,-4,82,35,1,-20,-3,-3,2,-2,-2,-6,-81,0,-11,4,0,10,5,0,65,4,1,-4,-16,34,-5,45,-9,-1,0,100,2,5,-1,-3,17,-12,-8,-16,-2,-127,1,1,-1,-2,-2,-1, 
  /* [5][0][][] */ -6,47,8,-6,2,45,24,14,-22,33,8,58,24,0,-127,-2,0,16,-39,20,-10,10,-12,44,-20,-1,30,-4,-7,21,20,-18,50,32,-40,-4,7,21,-47,14,23,-12,-13,31,19,62,22,22, 
  /* [6][0][][] */ -24,-58,0,4,38,-45,-21,10,27,-24,-13,90,-1,0,-127,39,0,-8,50,-20,-3,2,27,-34,34,1,-2,-14,49,-14,-11,-2,91,-31,24,-1,-4,-10,-70,-21,-16,-14,-4,-26,-22,-84,-18,-26, 
  /* [7][0][][] */ -116,-26,-12,9,127,22,66,27,16,4,29,-31,-27,0,89,105,0,12,0,64,-12,-1,-33,43,17,2,44,4,53,64,57,-7,-11,-14,-22,-21,4,27,25,38,75,5,-26,-14,62,5,67,81, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.067659974098205566, 0.026187293231487274, 0.073170170187950134, 0.060491625219583511, 0.04498918354511261, 0.048426508903503418, 0.032498136162757874, 0.02310466393828392, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 71922, 53143, 62386, 42399, -6, 14111, 2878, 29420, 25972, 17333, 29804, 3320, -46218, -127, 36060, 198, -204, 20112, 3380, 1829, -15722, -7262, 47719, 27640, -20795, 26124, 33031, 20275, -2532, 15293, -8025, -50681, 12488, 92158, 28164, 1692, 58111, 21, 128227, -28847, 14032, -27796, 3749, 84424, -1568, 70658, 1169, -22436, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.3618746430147439e-05, 7.4386436608619988e-05, 0.00015757049550302327, 0.00012922252062708139, 0.00012532589607872069, 0.0001607677259016782, 0.0001183680651593022, 5.0877442845376208e-05, 8.8311084255110472e-05, 3.804004518315196e-05, 8.9550230768509209e-05, 3.3286440157098696e-05, 0.00016818966832943261, 0.005541567225009203, 7.1593727625440806e-05, 0.00018473320233169943, 0.0027484172023832798, 2.4531413146178238e-05, 9.0255045506637543e-05, 0.00017442993703298271, 0.00012154109572293237, 0.00014611212827730924, 0.00012100664753234014, 3.9208905945997685e-05, 8.7003601947799325e-05, 0.00010356871644034982, 4.0875544073060155e-05, 4.6289093006635085e-05, 0.00030150765087455511, 6.7333327024243772e-05, 5.321184653439559e-05, 0.00018356638611294329, 0.00019266419985797256, 1.0207946615992114e-05, 8.9517736341804266e-05, 0.00015308281581383198, 1.7299838873441331e-05, 0.00044990700553171337, 3.5970337194157764e-05, 0.00010186552390223369, 7.9559780715499073e-05, 0.00021013975492678583, 9.71477638813667e-05, 1.1076506780227646e-05, 0.00013570446753874421, 8.197673741960898e-05, 0.00021153228590264916, 0.00013933866284787655, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-22,-7,-16,7,-40,-79,-68,-27,-50,9,65,34,-71,114,-43,-113,-84,37,-7,-2,-71,-111,-79,-35,-124,-63,-21,71,15,96,27,-127,-89,-6,54,18,48,-127,78,-76,-14,105,-108,-3,-35,-87,107, 75,12,-29,-28,57,-127,-127,-81,61,-75,-115,108,38,-82,-1,62,-52,-111,59,6,10,-112,-127,-69,-4,-127,-120,-40,-54,21,-57,53,29,-127,64,85,14,72,-93,127,-127,6,125,-127,1,-22,-127,94, -32,43,6,-5,-65,-108,-58,-17,87,-8,-127,38,8,-71,-100,-10,-127,-24,27,12,-16,-76,-36,-24,-11,-29,-58,-12,-10,17,-24,10,107,-86,70,31,14,35,-5,16,-78,4,6,-79,-17,5,-55,14, 
  /* [0][1][][] */ -85,-127,-44,-43,-10,54,98,-105,-26,-109,-21,112,89,-64,27,-96,-121,-93,89,-77,41,-88,-103,-127,42,-119,-77,-38,127,-60,127,85,-43,-85,-14,84,-35,-77,-107,89,42,60,104,-108,-91,-117,82,119, 127,-82,-127,-127,127,40,93,-127,101,-127,-111,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-121,-120,127,-98,-127,-127,-119,-127,-71,127,29,-112,127,127,-68,-127,-98,90,60,127,127,-116,-112,-127,125,127, -53,31,-61,-85,-119,-23,31,-37,127,-21,-77,35,56,-70,-25,-43,-37,-30,54,-71,56,-81,-39,-23,48,-5,-45,-60,15,-88,-36,20,30,-98,117,22,-36,-63,1,-15,37,54,10,-74,-57,-36,65,35, 
  /* [0][2][][] */ -61,-107,-34,-34,0,34,-5,-34,-38,-59,-16,60,76,-127,-127,-63,-43,-19,64,75,51,-33,-12,-60,33,-54,-10,-60,76,28,77,63,108,-27,-37,-10,-95,35,-18,30,9,38,15,-56,96,-77,4,31, 87,-73,-88,-85,81,18,7,-47,48,-72,-33,56,83,-26,16,93,-24,-31,77,118,81,-53,-18,-58,95,-67,-18,-100,-50,39,-45,110,-18,-49,67,7,-127,50,-16,-1,11,32,15,-68,127,-100,-12,41, -29,29,-42,-36,-79,-19,22,-11,59,-5,-13,32,31,-43,112,-28,-93,-4,31,59,73,-28,-1,-3,44,2,-4,-64,-13,28,-19,40,-90,-44,65,3,-20,21,27,-38,7,35,-5,-15,62,-34,-4,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0035537965595722198, 0.0031614236067980528, 0.0066967462189495564, 0.0054919570684432983, 0.0053263502195477486, 0.0068326285108923912, 0.0050306427292525768, 0.0021622912026941776, 0.0037532211281359196, 0.0016167018329724669, 0.0038058848585933447, 0.0014146736357361078, 0.0071480609476566315, 0.23551659286022186, 0.003042733296751976, 0.0078511610627174377, 0.1168077290058136, 0.0010425850050523877, 0.0038358394522219896, 0.0074132722802460194, 0.0051654963754117489, 0.0062097655609250069, 0.005142782349139452, 0.0016663784626871347, 0.0036976530682295561, 0.004401670303195715, 0.0017372105503454804, 0.0019672864582389593, 0.012814074754714966, 0.0028616662602871656, 0.002261503366753459, 0.0078015713952481747, 0.0081882281228899956, 0.00043383773299865425, 0.0038045037072151899, 0.0065060192719101906, 0.00073524314211681485, 0.019121047109365463, 0.0015287393471226096, 0.0043292846530675888, 0.0033812907058745623, 0.0089309392496943474, 0.0041287797503173351, 0.00047075154725462198, 0.005767439492046833, 0.0034840113949030638, 0.0089901220053434372, 0.0059218928217887878, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4105, 69, 9931, 6891, 7209, 6863, 11116, -32, 24, -306, 2139, 437, 12292, -79873840, 2628, 17562, -64478308, -114, -456, 9978, 3820, -19, 0, 390, 3451, -826, 66, 635, 3968, 1759, 2420, 13952, 3598, 320, 331, -1885, 354, 3198, -154, 12384, 2255, 12059, -379, -90, 14916, 157, 9658, 4493, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.0005105872405692935, 0.00048652035184204578, 0.00031848734943196177, 0.00027530913939699531, 0.00027676901663653553, 0.00030299308127723634, 0.00034650176530703902, 0.0015233089216053486, 0.00040606636321172118, 0.0023917325306683779, 0.00069370889104902744, 0.0019622615072876215, 0.00017951361951418221, 2.0304977699225901e-09, 0.00099912600126117468, 0.00018739499500952661, 2.0304977699225901e-09, 0.0063095348887145519, 0.00041087192948907614, 0.00038732454413548112, 0.00028153625316917896, 0.0046128779649734497, 0.00033093846286647022, 0.0016020375769585371, 0.0011009033769369125, 0.0006763286073692143, 0.0023185273166745901, 0.0019465385703369975, 0.00028281437698751688, 0.0016658903332427144, 0.0012232757871970534, 0.00016795955889392644, 0.00020916698849759996, 0.010026125237345695, 0.00046438435674645007, 0.00063058931846171618, 0.0043434514664113522, 0.00039663843926973641, 0.0025685890577733517, 0.00027869854238815606, 0.00125538045540452, 0.00018401331908535212, 0.00046153535367920995, 0.0093357926234602928, 0.00033809957676567137, 0.00055392214562743902, 0.00028928395477123559, 0.00019415737187955528, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 14,-127,49,-41,25,-19,-46,23, 
  /* [1][0][][] */ 71,68,-21,-90,11,-12,-74,127, 
  /* [2][0][][] */ 29,5,-46,127,56,123,45,94, 
  /* [3][0][][] */ 86,77,-78,127,-96,-8,-8,14, 
  /* [4][0][][] */ -34,-104,72,11,11,24,-45,-127, 
  /* [5][0][][] */ 22,5,-41,47,7,-28,45,127, 
  /* [6][0][][] */ 54,-21,-127,-95,117,17,48,-43, 
  /* [7][0][][] */ 127,17,19,-21,27,-7,84,-55, 
  /* [8][0][][] */ 19,-98,13,104,1,23,-13,-127, 
  /* [9][0][][] */ 109,-125,15,-1,-15,18,-127,89, 
  /* [10][0][][] */ -127,-35,-116,15,-8,11,-105,53, 
  /* [11][0][][] */ -21,-46,-9,-100,-127,-34,45,-17, 
  /* [12][0][][] */ 19,7,-36,73,-78,-21,62,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -3,-37,-5,8,46,127,44,45, 
  /* [15][0][][] */ 37,5,19,-127,67,41,-57,69, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 18,26,127,20,-24,-7,26,30, 
  /* [18][0][][] */ 94,-127,27,37,-10,27,-119,4, 
  /* [19][0][][] */ -127,-11,25,69,-51,-68,-91,63, 
  /* [20][0][][] */ 39,31,-40,117,-22,-127,0,59, 
  /* [21][0][][] */ 56,22,127,9,-14,-10,67,11, 
  /* [22][0][][] */ -78,-18,-127,6,0,11,-101,1, 
  /* [23][0][][] */ -95,126,-19,-16,2,-11,127,-73, 
  /* [24][0][][] */ 7,-48,-48,89,-14,-57,97,127, 
  /* [25][0][][] */ 13,47,36,32,127,117,-72,-52, 
  /* [26][0][][] */ -80,-30,-127,-4,5,14,-95,1, 
  /* [27][0][][] */ 0,-22,-34,9,-49,127,68,52, 
  /* [28][0][][] */ 2,-16,-18,40,20,127,61,67, 
  /* [29][0][][] */ 98,27,127,-2,-16,-19,83,2, 
  /* [30][0][][] */ -86,127,-30,-26,9,-8,105,-49, 
  /* [31][0][][] */ -47,-93,-24,2,34,-71,127,113, 
  /* [32][0][][] */ 8,1,-52,115,-16,92,82,127, 
  /* [33][0][][] */ 2,58,-12,-102,7,-11,-6,127, 
  /* [34][0][][] */ -26,97,-1,-96,29,-6,20,127, 
  /* [35][0][][] */ 127,5,-17,-32,16,23,100,-34, 
  /* [36][0][][] */ -125,-3,26,65,-36,18,-127,80, 
  /* [37][0][][] */ -5,-28,-15,22,33,127,46,48, 
  /* [38][0][][] */ 12,24,8,88,127,-13,-19,34, 
  /* [39][0][][] */ 9,27,36,-127,29,2,-36,120, 
  /* [40][0][][] */ 97,30,127,3,-12,-9,97,-7, 
  /* [41][0][][] */ -1,-27,-31,88,53,127,73,106, 
  /* [42][0][][] */ -74,-6,127,24,-37,15,-30,59, 
  /* [43][0][][] */ -11,-49,9,100,-20,2,16,-127, 
  /* [44][0][][] */ 35,-8,-80,-126,77,-27,-11,-127, 
  /* [45][0][][] */ -83,127,3,-51,6,-1,73,-49, 
  /* [46][0][][] */ -127,-22,35,22,-28,31,-86,37, 
  /* [47][0][][] */ 121,17,127,6,23,-14,126,-21, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00098999671172350645, 0.00094333250308409333, 0.00061752705369144678, 0.00053380720783025026, 0.00053663778817281127, 0.00058748462470248342, 0.00067184522049501538, 0.0029536006040871143, 0.00078733725240454078, 0.0046374197117984295, 0.0013450580881908536, 0.003804702078923583, 0.00034806565963663161, 3.937008052901092e-09, 0.0019372428068891168, 0.00036334714968688786, 3.937008052901092e-09, 0.012233792804181576, 0.0007966549601405859, 0.00075099803507328033, 0.00054588116472586989, 0.0089440811425447464, 0.00064166897209361196, 0.0031062504276633263, 0.0021345827262848616, 0.0013113587629050016, 0.0044954791665077209, 0.0037742163985967636, 0.00054835935588926077, 0.0032300569582730532, 0.0023718550801277161, 0.00032566307345405221, 0.00040556170279160142, 0.019440028816461563, 0.00090041221119463444, 0.0012226732214912772, 0.0084216799587011337, 0.00076905707828700542, 0.004980333149433136, 0.00054037902737036347, 0.0024341039825230837, 0.00035679028951562941, 0.00089488812955096364, 0.018101517111063004, 0.00065555388573557138, 0.0010740204015746713, 0.00056090345606207848, 0.00037645897828042507, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -1145, -43548, -7648, -14320, -32307, -2375, -26721, -29219, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0021495490800589323, 0.002137164119631052, 0.0024848466273397207, 0.0011778561165556312, 0.001238103024661541, 0.0021093583200126886, 0.0014755638549104333, 0.0009845065651461482, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-24,0,-2,127,3,-2,4,2,-127,-90,-4,0,123,-1,0, 
  /* [1][0][][] */ 0,-31,0,88,75,13,23,7,3,-5,127,-40,0,31,-12,0, 
  /* [2][0][][] */ 0,3,-1,-11,-58,0,11,-1,0,3,-18,1,0,127,-7,0, 
  /* [3][0][][] */ 0,-15,-18,-127,82,29,70,22,-3,62,-1,37,0,2,18,0, 
  /* [4][0][][] */ 0,50,-24,36,-56,30,127,9,-1,-60,19,-7,0,-7,14,0, 
  /* [5][0][][] */ 0,-14,-11,1,-23,-25,-11,16,-1,10,-7,-47,0,-5,127,0, 
  /* [6][0][][] */ 0,13,-1,3,54,-18,-24,-3,1,-104,112,65,0,127,64,0, 
  /* [7][0][][] */ 0,10,-16,127,9,2,18,15,1,69,-52,75,0,-6,52,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.091355830430984497, 0.090829469263553619, 0.10560598224401474, 0.050058886408805847, 0.052619379013776779, 0.089647725224494934, 0.062711462378501892, 0.041841529309749603, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 38319, 21408, 12038, 10916, 109300, 15188, 95090, -1285, 7210, 29972, 14297, -445, 27095, 10495, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 6.8604160333052278e-05, 0.00018847343744710088, 0.00029268453363329172, 0.00016464867803733796, 3.0296978366095573e-05, 0.00034113888978026807, 4.1115203202934936e-05, 3.0316838092403486e-05, 0.00024900140124373138, 0.00019752263324335217, 0.00072962662670761347, 0.00072724185883998871, 0.00023039788356982172, 0.00019944146333727986, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-83,-127,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,24,-127,127,127,-127,127,-127,-84,127,-127,51,-105,5,127,-25, 24,-24,89,-2,-72,68,-95,78,-95,-27,4,-16,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-23,13,-44,16,-29,14,-28,1,3,-110,-49,8,-30,-14, -78,-42,-58,-15,-8,-26,8,-28,-107,-89,21,-12,-104,-127,1,23, 14,1,64,2,3,34,-26,33,-127,7,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,67,2,-6,39,-39,52,-77,0,0,4,40,2,-27,23, 23,-4,30,-2,-27,40,-34,21,-125,-13,0,84,-58,0,-29,-111, 21,-7,18,0,4,14,9,22,-115,4,-1,-127,107,2,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0029156766831874847, 0.0080101210623979568, 0.012439092621207237, 0.0069975685328245163, 0.0012876215623691678, 0.014498402364552021, 0.0017473960760980844, 0.0012884655734524131, 0.010582559742033482, 0.0083947116509079933, 0.03100913017988205, 0.030907778069376945, 0.0097919097170233727, 0.0084762619808316231, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 30924, -113390, -12175, 200973, 56756, 24681, 33383, -259950, 13038, 29577, 728521, -1073741824, 56236, 15881, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00017709440726321191, 0.00020343590585980564, 4.2299434426240623e-05, 1.1922260455321521e-05, 0.00019661833357531577, 0.00014732679119333625, 0.00028168834978714585, 3.5750981624005362e-06, 4.817563240067102e-05, 9.9998738733120263e-05, 8.3388249549898319e-06, 1.1533876076441629e-09, 6.5359410655219108e-05, 0.00012863901793025434, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 44,-7,27, -7,-27,11, -127,-123,-72, 
  /* [1][1][][] */ 1,-7,-4, -22,1,-7, 3,-31,5, 
  /* [1][2][][] */ -1,19,0, -3,8,-2, 42,-17,14, 
  /* [2][0][][] */ 32,-5,-4, 79,114,3, 42,-38,9, 
  /* [2][1][][] */ 14,14,2, 71,127,-26, 18,-6,-7, 
  /* [2][2][][] */ 49,-66,21, 72,-45,-22, 29,-57,13, 
  /* [3][0][][] */ 8,35,5, 36,97,24, 1,6,-4, 
  /* [3][1][][] */ 20,35,5, 68,127,27, -13,-18,4, 
  /* [3][2][][] */ 5,2,4, 25,25,7, -4,-6,0, 
  /* [4][0][][] */ 47,82,-2, 20,89,-6, -15,11,0, 
  /* [4][1][][] */ 48,97,53, 34,127,34, 29,52,-17, 
  /* [4][2][][] */ 53,77,33, 43,119,11, -26,20,17, 
  /* [5][0][][] */ 5,-1,-124, -3,1,-106, -7,27,-29, 
  /* [5][1][][] */ 7,-41,-127, -1,-45,-116, -3,11,-25, 
  /* [5][2][][] */ 2,13,-13, 0,-4,-13, -1,11,-14, 
  /* [6][0][][] */ 25,-62,34, 46,-87,38, 9,-20,9, 
  /* [6][1][][] */ 35,-96,60, 62,-127,70, 7,-28,16, 
  /* [6][2][][] */ 19,-35,12, 16,-42,27, -11,9,1, 
  /* [7][0][][] */ -33,15,2, -110,-41,0, -19,29,7, 
  /* [7][1][][] */ -13,-7,1, -127,-93,-7, -2,-1,9, 
  /* [7][2][][] */ -25,29,-10, -16,8,-3, -25,22,-5, 
  /* [8][0][][] */ 101,113,93, 82,95,74, 113,127,109, 
  /* [8][1][][] */ 94,105,84, 79,91,69, 114,127,108, 
  /* [8][2][][] */ 69,81,59, 62,76,53, 97,112,89, 
  /* [9][0][][] */ -25,-7,5, -17,-10,-4, 6,6,-7, 
  /* [9][1][][] */ 96,114,-9, 73,127,15, -2,25,32, 
  /* [9][2][][] */ -25,-23,18, 6,-28,3, 14,8,-16, 
  /* [10][0][][] */ -25,-83,-18, 34,94,20, -9,-13,-2, 
  /* [10][1][][] */ -59,-102,-13, 79,127,15, -17,-26,0, 
  /* [10][2][][] */ -32,-19,2, 36,23,-11, -8,0,8, 
  /* [11][0][][] */ -16,-28,-2, 7,-45,3, 7,-103,-55, 
  /* [11][1][][] */ -49,-45,-21, -38,-66,-39, -17,-62,-56, 
  /* [11][2][][] */ -9,-41,-81, 118,127,63, -41,12,-49, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -50,-96,-17, -61,-110,-24, -8,-16,-4, 
  /* [13][1][][] */ 61,114,15, 58,127,25, 9,17,12, 
  /* [13][2][][] */ -8,-19,3, 1,-18,-1, 1,5,-3, 
  /* [14][0][][] */ 46,-5,-36, 80,-25,-48, 33,-8,-18, 
  /* [14][1][][] */ 88,-17,-73, 127,-40,-88, 58,-19,-37, 
  /* [14][2][][] */ 56,-8,-44, 74,-20,-52, 26,-6,-17, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 4.89632157041342e-07, 0.066181398928165436, 0.076025396585464478, 0.015807589516043663, 0.0044554308988153934, 0.073477625846862793, 0.055057037621736526, 0.10526887327432632, 0.0013360388111323118, 0.018003566190600395, 0.037370216101408005, 0.0031162763480097055, 4.310288943543128e-07, 0.024425262585282326, 0.048073288053274155, 4.646576812206149e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.51574641466140747, } };
const TfArray<1, int> quant46_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.45348149538040161, } };
const TfArray<1, int> quant50_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.46754077076911926, } };
const TfArray<1, int> quant53_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.60506170988082886, } };
const TfArray<1, int> quant54_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.39203864336013794, } };
const TfArray<1, int> quant58_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.23868395388126373, } };
const TfArray<1, int> quant61_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.40293839573860168, } };
const TfArray<1, int> quant62_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.24445599317550659, } };
const TfArray<1, int> quant65_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.42999812960624695, } };
const TfArray<1, int> quant66_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.0517776720225811, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.090925790369510651, } };
const TfArray<1, int> quant69_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
