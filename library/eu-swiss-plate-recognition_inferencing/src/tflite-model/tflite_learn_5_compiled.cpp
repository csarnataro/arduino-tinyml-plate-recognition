/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 17.04.2024 18:42:50

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0037524029612541199, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 21489, -27757, -27792, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00023275404237210751, 0.00020432245219126344, 0.00020219199359416962, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 80,48,127,-68,-79,-3,-1,-1,-29,32,11,-16,-27,-91,83,2,-61,67,117,95,-1,-14,50,-67,-98,61,-76,6,66,32,-19,-15, 
  /* [1][0][][] */ 48,-36,-78,21,-9,127,-24,-10,121,-44,-3,-86,-62,107,29,-50,91,-47,-39,-93,-115,29,102,76,17,23,3,-13,-89,-55,-3,-24, 
  /* [2][0][][] */ -34,77,-87,73,83,-42,-38,116,93,39,127,-52,-97,-86,78,119,-84,-53,-30,-111,70,116,-51,-86,85,-67,-14,-114,-3,-77,84,-20, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0037834581453353167, 0.003321297699585557, 0.0032866667024791241, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -20, 244, 506, -299, 150, -90, 329, 71, -44, -422, 67, 506, -322, -313, -604, 178, -297, -328, 1728, -363, -74, -319, -335, -365, -355, 480, -384, -361, 409, 48, -332, -324, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.2178460716968402e-05, 4.2202358599752188e-05, 4.8580332077108324e-05, 4.4769127271138132e-05, 4.5794658944942057e-05, 5.0304475735174492e-05, 4.6608845877926797e-05, 5.361831426853314e-05, 5.2006347686983645e-05, 4.3968833779217675e-05, 4.5790351578034461e-05, 8.2586288044694811e-05, 4.2479183321120217e-05, 4.4041091314284131e-05, 4.4045435060979798e-05, 4.6364366426132619e-05, 4.5506414608098567e-05, 4.3157186155440286e-05, 6.8015899159945548e-05, 4.1218096157535911e-05, 4.6860048314556479e-05, 5.1305196393514052e-05, 4.230896956869401e-05, 5.2072991820750758e-05, 4.2198578739771619e-05, 5.4141990403877571e-05, 4.4342163164401427e-05, 4.8007888835854828e-05, 8.451516623608768e-05, 4.64531549368985e-05, 4.1888819396262988e-05, 4.1978786612162367e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -44,-51,107,3,101,-13,-92,-110,63,-94,-117,-3,38,10,-40,52,-54,-38,-64,-1,-75,-108,4,112,-120,38,75,-46,112,-4,-29,-91,90,-69,-91,66,-111,-85,-107,23,73,-94,-116,98,48,-122,106,-19,22,-57,-47,93,-74,-56,-95,127,25,66,120,-111,-81,86,-56,43,-15,8,71,89,52,83,85,-123,97,-94,63,87,-114,15,-65,32,50,19,95,-16,-65,-47,-91,98,33,114,-6,-120,13,62,20,5, 
  /* [1][0][][] */ -56,34,-80,-12,-43,96,44,9,64,-124,-100,115,68,-31,31,68,118,-40,23,126,-46,-2,40,38,35,18,-39,96,10,4,95,-67,51,104,-11,25,52,66,-7,-60,-59,12,-24,-91,-35,32,-27,-61,-27,-87,82,63,4,80,-66,-48,31,98,73,87,-75,97,-61,-95,-60,42,83,42,100,28,25,9,-108,90,-57,44,87,-43,-38,60,-79,69,-75,-126,32,127,-69,-60,81,86,104,10,69,96,30,-5, 
  /* [2][0][][] */ 37,69,-27,80,-36,-70,82,87,-94,127,-29,119,77,5,88,-98,-32,-23,16,38,-71,-5,113,29,-23,78,95,37,-40,62,76,80,-66,-21,-91,-55,-32,84,93,-27,-100,-64,16,19,-64,109,-25,-59,95,47,112,-87,-44,45,23,33,-71,73,-25,7,4,108,-41,49,75,44,51,72,-93,55,12,-65,38,-57,55,44,-50,-4,8,4,34,-66,33,-41,8,-82,-10,-30,89,103,-17,-1,-26,-73,-43,-66, 
  /* [3][0][][] */ 81,-14,26,-19,-53,62,-103,35,43,2,68,-12,76,82,69,5,91,98,-68,18,96,-88,-73,-109,-13,-111,-82,86,31,-112,71,12,-55,-28,-5,-31,-106,-16,43,55,-20,-89,-108,-10,71,17,-38,-86,59,-95,24,4,86,37,85,-110,-103,-122,-118,-56,-107,18,-22,72,65,-34,-61,-20,-20,-82,-7,96,13,-97,56,-59,34,84,94,-74,-88,-127,20,86,20,48,-52,-109,-93,37,6,-103,83,-88,-90,30, 
  /* [4][0][][] */ 59,79,-25,49,-13,5,38,14,45,33,1,55,-15,-35,-7,-55,-13,4,-59,29,98,-80,84,34,-12,5,68,-88,-48,41,-64,-46,78,112,28,-114,-62,3,-101,55,-38,-50,-76,-85,32,93,43,48,27,-42,-49,-59,-77,48,-67,22,44,-83,13,22,-1,-119,-20,-57,-37,56,8,-29,30,-90,-81,-71,-39,19,110,35,64,-16,-1,-68,11,-51,-127,-21,4,75,84,8,-110,-66,56,39,26,98,-87,-7, 
  /* [5][0][][] */ 89,-97,58,77,49,-96,23,45,101,-127,-2,-68,19,84,22,35,48,57,-49,83,16,45,15,-31,-80,-57,-12,-79,41,28,18,-82,-24,13,-48,-8,-110,-29,36,24,-76,-43,41,65,-28,19,33,-39,-91,89,2,35,40,31,16,-32,103,54,-67,-29,28,-68,38,-39,-11,82,-23,34,79,10,88,-56,-45,71,-5,-66,12,-42,11,81,93,40,-8,99,-71,65,-4,29,54,-88,100,79,-6,22,63,-56, 
  /* [6][0][][] */ 17,2,127,69,-77,-67,5,63,-18,-23,11,-64,77,74,117,-105,53,8,-10,84,-58,-99,117,63,-53,-70,-1,-29,-13,-114,49,-74,-79,-108,-36,-52,28,40,-99,76,84,59,30,1,-96,102,-79,-36,-71,32,24,-64,52,-52,87,-14,4,-8,-45,111,-62,65,59,-65,-52,63,102,-44,69,-2,-90,2,63,-58,-54,-20,-75,-73,-46,-28,33,-1,94,-24,-60,-74,-26,-88,85,90,94,13,-34,-61,69,-25, 
  /* [7][0][][] */ 99,39,-51,-35,-51,108,-11,-3,88,-36,-73,16,35,-75,38,63,46,17,-3,100,39,30,-4,74,-52,84,37,25,-63,90,-18,30,24,22,60,62,-96,74,-5,-16,80,-57,66,53,40,-8,88,-93,43,-43,-127,-48,-16,73,21,25,101,-69,4,-42,-5,-35,72,-89,-51,-42,57,22,-84,22,60,70,74,19,52,38,-47,45,-77,22,76,-40,-50,-61,71,32,-88,79,64,6,77,46,-52,-30,-1,-47, 
  /* [8][0][][] */ 18,4,-52,-69,66,38,-59,-20,13,-7,40,76,3,-39,-73,-55,-57,84,-38,23,16,-19,67,90,-90,77,41,53,-56,22,-73,99,87,-19,53,-27,78,7,-16,65,69,88,-89,-109,-9,-27,-13,90,17,-69,-87,8,-44,6,-25,-95,51,100,-96,91,89,5,46,107,-13,-38,-17,89,-59,52,30,4,63,59,25,10,-34,87,71,68,33,64,-127,-67,21,37,61,-33,28,-32,-67,82,-64,-79,-36,66, 
  /* [9][0][][] */ -3,2,102,36,71,-107,-57,-124,31,48,-19,46,-38,-86,-107,-36,-2,-9,-105,-63,-9,87,-116,-111,101,1,-21,15,-20,-61,-95,94,53,-8,16,-21,-84,12,-39,-54,41,-76,42,-94,74,15,-106,42,43,-17,-70,-52,63,-81,-71,100,74,-71,-23,-14,-87,96,84,-82,-88,-3,93,35,-45,88,95,-102,-5,77,-107,-103,-82,-127,-48,94,24,17,105,21,-51,-100,24,-22,87,26,-40,103,109,-6,60,-48, 
  /* [10][0][][] */ -53,58,64,-63,-7,118,106,23,27,-21,27,-64,80,72,-32,15,-29,80,-91,-49,-26,29,53,-60,34,52,-106,-127,-47,79,-93,-77,85,97,119,47,-53,11,-29,40,-30,113,-110,-39,-93,-63,3,-62,-1,0,-12,18,64,24,-50,-33,-86,-11,28,-38,-16,40,115,41,116,-70,-89,-18,23,-16,-81,-61,86,60,-72,90,-10,61,66,8,75,-14,11,93,-94,70,94,-20,29,8,3,-77,-58,-45,-43,-55, 
  /* [11][0][][] */ 57,32,0,50,48,20,31,22,52,120,-36,64,22,-27,31,-34,-1,-52,28,19,30,43,25,-44,-54,-36,-7,42,65,-18,24,-10,-46,-39,16,54,14,44,-1,-38,-4,56,-42,64,-11,-16,-47,-41,46,69,94,34,-53,-55,42,45,-54,-34,6,-41,-30,127,33,-2,51,53,-24,5,55,23,-44,-39,38,58,-21,34,-13,33,-23,40,-53,14,23,-24,36,-24,12,-9,-28,6,9,-33,-2,5,44,-20, 
  /* [12][0][][] */ 2,84,-56,-5,72,-8,-45,29,-82,101,-23,5,-22,5,43,-89,-111,-43,-61,-88,28,-19,8,91,-77,-57,91,-106,83,8,-47,112,-98,-81,-62,27,-5,-84,-25,33,109,32,-119,-44,-25,-88,-49,111,-52,-127,-52,94,25,-10,-90,81,-33,-72,57,56,56,124,-17,37,101,28,-55,110,46,92,33,65,75,110,-37,-8,-45,26,-126,-88,-67,101,81,8,-44,24,47,110,-100,-116,87,44,91,-24,22,60, 
  /* [13][0][][] */ 110,-83,91,103,108,108,76,57,86,-125,7,-36,87,66,52,-41,-127,-65,-51,28,56,-29,113,-60,-54,36,7,20,-87,-79,90,41,53,111,-9,10,-98,-30,15,68,-65,76,-44,-16,-43,28,-2,-24,36,98,-30,-94,-88,46,82,-91,-35,39,-49,-71,-18,100,-75,41,-50,-67,-94,92,-18,-2,92,5,-101,40,-60,-46,-101,60,78,-47,53,-93,68,32,-83,-109,92,110,-15,-63,-81,63,123,-52,56,9, 
  /* [14][0][][] */ -57,-110,72,60,77,-43,-29,-117,-81,-47,55,76,-29,-87,-102,-87,-66,-73,9,10,-51,19,-15,46,-121,-85,-47,18,-121,-116,-86,25,85,-37,-44,-5,80,101,34,-120,-19,-119,27,74,52,-117,51,-94,97,34,73,39,90,-30,-29,-2,-56,7,41,85,-22,-92,-39,64,-100,-23,62,-110,-101,-94,-90,88,0,67,33,-84,43,-118,40,23,31,-25,-124,-36,-127,-103,-115,95,95,-5,74,-54,76,83,-30,57, 
  /* [15][0][][] */ 23,-28,-42,61,88,-60,65,-91,41,-26,-57,22,105,1,-76,-99,92,14,-95,34,49,23,71,113,76,69,44,73,22,57,58,-91,2,6,-53,-11,-64,112,107,-54,22,111,-47,-16,25,-77,-32,-79,-5,-70,-33,36,-95,-97,-30,0,68,49,-32,108,-52,-81,12,89,-31,98,-59,5,-56,8,67,-65,28,-14,54,-106,4,57,104,60,-70,43,-127,-62,-106,-23,-82,44,82,70,-93,-46,42,109,-95,105, 
  /* [16][0][][] */ -63,-16,92,-46,52,97,-54,36,62,28,-107,59,-13,-43,-60,-52,93,79,83,59,96,74,-37,36,-24,50,-64,65,-92,17,47,16,-86,85,63,38,-41,48,-53,-64,16,-44,76,65,60,100,94,-4,-50,-102,11,108,-30,127,45,35,35,98,43,15,120,106,30,83,63,8,-36,96,59,103,-30,-4,21,94,73,81,-8,90,-103,2,15,-68,37,23,8,85,99,4,72,6,-14,117,81,-30,-77,36, 
  /* [17][0][][] */ 33,-117,33,76,-63,-120,-71,-92,32,-88,79,64,121,59,-120,44,27,45,96,113,-83,-19,5,-53,11,71,-84,18,105,-49,-40,67,-35,-35,31,-2,-48,95,-62,-35,-99,-49,-29,-12,2,12,80,-109,82,104,42,22,-25,64,93,-74,-127,81,-43,-121,54,-93,70,85,-96,-78,38,-104,-112,-18,109,22,18,-119,-82,64,113,-59,39,-72,5,-5,-32,-97,-118,68,74,-37,23,78,-112,-118,-4,91,13,3, 
  /* [18][0][][] */ -58,112,126,-27,-19,-88,-35,54,0,104,-38,-10,-19,39,92,-18,48,-1,24,-9,91,5,48,1,37,-40,12,109,53,32,16,54,17,-6,-79,-18,43,38,36,54,-1,22,-6,51,-36,41,25,33,29,-3,63,16,-51,-6,47,94,-30,19,37,-54,58,127,0,-1,-31,-36,17,61,36,-38,-16,76,-35,2,-57,-11,59,73,28,-41,-12,12,30,-32,100,8,68,73,-42,-4,-9,81,56,15,63,-11, 
  /* [19][0][][] */ 16,28,75,35,56,-92,95,92,91,-62,25,-15,-89,30,-62,58,72,-113,109,56,-27,79,-62,9,74,-85,25,-73,-98,-126,-72,43,80,-90,29,-3,6,-76,-61,-108,42,-125,-91,8,-94,27,75,-100,-33,36,-34,42,-40,9,4,-13,19,98,6,-32,54,-59,100,59,-75,-6,-31,-5,-13,51,75,-58,-67,-127,-60,-86,-28,-121,11,106,55,-118,-12,76,-94,-12,4,-8,88,27,-7,62,-38,114,70,-53, 
  /* [20][0][][] */ -12,80,69,83,-83,91,17,59,7,46,-76,5,-5,80,46,-74,-49,-41,-69,-13,24,-43,-74,-58,65,-62,-100,39,18,11,-44,105,87,36,-19,75,38,-28,-2,-101,-76,-33,-85,-78,-18,-56,-65,95,55,-109,-82,31,38,96,67,14,78,55,127,74,106,-54,-57,-48,-16,-58,-48,13,-80,-77,-69,67,-62,-67,23,19,102,67,100,93,75,5,107,-26,53,108,-18,69,18,89,34,62,17,23,-1,-7, 
  /* [21][0][][] */ 77,41,38,-82,95,-58,61,2,2,-89,-60,26,-8,22,-65,-73,-94,-24,36,-71,75,-43,53,-77,52,-90,-32,50,6,8,-21,-34,5,24,-69,-116,73,76,-104,-19,-15,4,23,-35,-101,-85,-70,72,-28,-58,-28,74,38,72,-109,-4,-30,51,-60,103,30,-88,20,-10,81,21,-32,-39,-81,-2,53,61,27,-31,50,46,-82,-31,54,83,9,77,1,-65,11,-84,53,-70,-96,55,110,-127,-48,-57,49,-22, 
  /* [22][0][][] */ 27,-61,-92,-117,86,-59,103,52,-117,87,-84,-117,116,-122,-124,-95,34,75,-117,-49,84,-84,25,26,86,-7,-125,90,-65,-82,-73,-121,66,54,13,5,-3,-24,-66,-125,-6,-22,-7,91,48,-125,86,-28,-71,-86,-1,-23,-77,-102,-52,24,-19,-37,-14,-37,101,-90,-83,-127,-72,12,-124,-52,109,94,-30,-8,-73,-2,63,-100,39,-59,58,77,101,-99,-87,-125,74,79,93,-41,-62,27,-46,55,14,16,-39,86, 
  /* [23][0][][] */ 39,-88,9,59,72,-107,-3,-83,61,-75,59,54,16,-94,5,-38,57,-30,-76,77,66,-70,77,-42,-18,-32,59,24,54,27,50,-34,-29,34,14,14,70,-20,-99,-4,-101,-6,8,-113,-62,-88,79,24,65,-94,-127,-56,74,-47,-56,61,-66,-17,62,29,-101,-74,-59,-9,20,21,-99,-91,50,-5,91,-62,-19,-37,-38,-77,29,-27,73,111,-50,-49,3,-94,69,-11,88,-31,-81,25,102,-7,78,-49,-33,79, 
  /* [24][0][][] */ -85,-58,-115,-76,-90,-117,-79,-101,60,113,77,36,108,55,-49,-127,-92,35,19,-56,89,-91,-65,-47,48,-37,66,50,99,54,-4,-67,-3,3,45,22,-63,-94,57,-29,-83,-110,97,-3,15,-45,38,65,-95,-58,-30,10,63,56,63,-84,-14,71,19,-7,84,-15,33,89,-103,90,-56,-97,-110,46,-68,-36,-47,35,89,95,58,-85,-115,-90,-90,-104,-73,-126,-6,56,-21,-110,18,-118,-2,-81,-27,22,-104,24, 
  /* [25][0][][] */ -51,-21,-36,-1,74,-63,-78,71,44,-42,-26,22,54,16,-60,-13,-49,54,31,-70,68,73,0,-40,16,-13,-74,43,69,-65,49,119,84,-78,40,83,97,-35,-11,-13,-51,81,-74,32,108,60,61,47,-67,76,-25,13,37,-9,-14,49,-14,44,-68,63,127,55,43,49,-1,69,-9,-5,-53,-2,-20,-82,29,-63,68,29,58,65,17,26,50,59,7,79,-45,-31,-77,-68,-5,-5,67,47,-65,-4,16,-59, 
  /* [26][0][][] */ 57,-120,-41,-16,-91,5,-13,-17,-91,-127,99,86,-80,-44,4,-15,108,30,-67,-57,18,65,90,8,46,72,11,32,6,13,-85,-3,-2,-62,-82,-102,-77,84,-55,103,-96,96,42,19,-73,72,-37,96,-16,26,60,100,4,-46,-15,-106,93,64,44,23,26,-97,66,-6,104,-25,-59,57,-81,67,73,100,76,-92,-65,-8,41,-113,-96,11,-29,84,80,-66,74,-2,-51,10,-76,106,2,38,-31,109,48,78, 
  /* [27][0][][] */ 4,0,-47,-95,-122,-69,-69,-18,38,108,26,-76,-10,40,68,-33,52,-22,72,-76,-87,3,-34,-27,-100,37,-100,24,58,26,-30,-12,44,53,-87,-75,-72,-65,-101,72,-91,8,21,11,81,18,54,86,72,91,68,-71,-57,-86,-8,-30,83,-31,-107,-78,-54,-26,-37,48,24,-47,-106,87,38,9,-111,-1,46,-52,-23,-75,37,-68,72,89,70,-32,127,-54,-70,-81,-37,23,-47,-7,-44,-48,42,13,75,49, 
  /* [28][0][][] */ 39,8,69,25,-67,-4,-44,-14,-23,34,32,96,-36,-39,24,53,72,53,-28,65,6,19,-48,-20,-60,56,-37,-17,40,-33,15,-4,-57,4,44,52,58,-56,34,11,54,21,-45,50,-51,3,4,35,17,46,9,-20,-43,4,83,83,21,-13,78,27,11,38,-55,7,21,46,-1,33,-46,10,-50,-24,38,30,7,-32,-44,-25,-40,15,-33,-44,127,-15,49,-53,37,-35,-24,-21,-20,-3,-16,71,6,-38, 
  /* [29][0][][] */ 45,77,73,-50,-91,1,-109,10,86,44,-84,-83,101,-82,-39,-45,-88,91,12,-72,-58,-29,56,7,-36,8,-40,-10,-90,-15,101,-6,39,-2,-81,-22,13,92,-8,83,43,97,-35,89,3,102,-53,-22,17,-10,92,-93,59,-101,101,52,-94,43,-42,98,-88,127,-94,-51,-70,-59,50,77,81,-77,30,-68,102,71,55,36,99,-50,-29,32,-7,-64,38,-72,60,106,43,69,-31,89,61,71,-87,12,-3,54, 
  /* [30][0][][] */ 21,-76,-72,30,-102,21,-75,-19,111,-19,-9,-44,-103,11,50,9,-10,28,95,-112,40,-111,-122,5,-121,16,-77,116,-14,-111,-99,-1,-88,-80,-124,-61,12,-27,-8,20,82,-85,-19,92,97,-50,96,54,-80,76,17,-109,96,-59,-19,96,-84,-57,-84,-58,-109,-9,-80,-30,-113,-97,-104,89,-66,107,48,-40,-92,99,34,-93,-62,-78,-84,-68,23,26,-107,-26,-117,21,-114,105,-40,-127,74,53,-38,-8,5,-76, 
  /* [31][0][][] */ 80,-97,35,100,46,60,-65,-105,-35,-12,-85,-92,108,-127,-52,110,-67,-96,38,47,64,33,-35,105,41,-120,34,42,-77,-79,45,108,16,17,-98,-9,96,-36,-73,-118,58,-75,-34,29,2,-59,-44,22,70,25,101,-34,-121,-63,-86,22,-125,67,6,113,-41,32,84,-81,68,111,-50,-84,71,-126,-127,7,-104,-47,0,4,-64,-52,47,91,-81,-45,61,71,54,95,-101,14,16,-56,-90,-61,10,103,-6,-28, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017925845459103584, 0.0017936002695932984, 0.0020646641496568918, 0.0019026878289878368, 0.0019462729105725884, 0.0021379401441663504, 0.0019808758515864611, 0.0022787782363593578, 0.0022102696821093559, 0.0018686753464862704, 0.0019460899056866765, 0.0035099172964692116, 0.0018053653184324503, 0.001871746382676065, 0.0018719310173764825, 0.0019704855512827635, 0.0019340226426720619, 0.0018341804388910532, 0.0028906757943332195, 0.0017517689848318696, 0.0019915520679205656, 0.0021804708521813154, 0.0017981311539188027, 0.0022131020668894053, 0.0017934395000338554, 0.0023010345175862312, 0.0018845419399440289, 0.0020403352100402117, 0.0035918944049626589, 0.0019742590375244617, 0.0017802747897803783, 0.001784098451025784, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -2490, 2365, 6874, 1970, -3458, -2731, 12380, 2845, 1857, -1021, 11568, -190, -6998, 1725, 14852, 5409, 9598, 5529, -4674, -5683, 4279, 23214, 17174, 9883, 1151, 783, 4388, 2923, 1570, -3765, 5696, -2181, -159, 3553, 47, 681, 7257, 4058, -2111, 3949, 6261, 5168, 3895, 11865, 3369, 3260, 1562, 5962, 3085, -4754, -5267, 170, -249, -921, 1525, 47, 189, -743, -2705, 7429, -700, 1186, -1069, -2022, -2433, 7324, 16882, 1294, -2008, 569, 1275, 1819, 1784, -1123, 456, 7983, -464, 13534, 10234, -670, 7775, 1876, -183, 932, 10989, 9062, 3534, 1250, 5172, 2791, -234, -6067, 468, -2064, -1305, -1705, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00025705754524096847, 0.00067800452234223485, 0.00034667135332711041, 0.00044578974484466016, 0.00030445089214481413, 0.00053987465798854828, 0.00026767110102809966, 0.00025634028133936226, 0.00031227144063450396, 0.00054950983030721545, 0.00017003857647068799, 0.00034399106516502798, 0.00036732808803208172, 0.0016232884954661131, 0.0002091771166305989, 0.0002107198815792799, 0.0001957312342710793, 0.00026260281447321177, 0.0004232522624079138, 0.00029703768086619675, 0.0001409591204719618, 0.00011513301433296874, 0.00017925763677340001, 0.00017015878984238952, 0.00016224160208366811, 0.00063338858308270574, 0.00068250240292400122, 0.00037449225783348083, 0.00032461006776429713, 0.00052141433116048574, 0.00026119011454284191, 0.00035299171577207744, 0.00035116111394017935, 0.000324759486829862, 0.0005513093201443553, 0.00034868772490881383, 0.00026097954832948744, 0.00027236976893618703, 0.00026505161076784134, 0.0004470798303373158, 0.00019915698794648051, 0.00050275510875508189, 0.00039563907193951309, 0.00019624347623903304, 0.00057007116265594959, 0.00031389723881147802, 0.00031495996518060565, 0.00035658312845043838, 0.00044324254849925637, 0.00027176048024557531, 0.00028450207901187241, 0.00025243981508538127, 0.00059805344790220261, 0.00032165058655664325, 0.00051945669110864401, 0.00040830773650668561, 0.00055025599431246519, 0.00036415277281776071, 0.00056142330868169665, 0.00024725584080442786, 0.0010825204662978649, 0.00068908522371202707, 0.00024691899307072163, 0.00038399582263082266, 0.0007713502855040133, 0.00026176570099778473, 0.00013028607645537704, 0.00030192660051397979, 0.00058468850329518318, 0.00051326520042493939, 0.00029485917184501886, 0.00027888023760169744, 0.00075520435348153114, 0.00037345086457207799, 0.00044155830983072519, 0.00027155378484167159, 0.00030151833198033273, 0.00013876668526791036, 0.00017810122517403215, 0.00033476372482255101, 0.00018830961198545992, 0.00017176140681840479, 0.00018294969049748033, 0.00024034330272115767, 0.00016874262655619532, 0.00025974345044232905, 0.00065807707142084837, 0.00022142085072118789, 0.00013802123430650681, 0.00074087886605411768, 0.00030459850677289069, 0.00032300522434525192, 0.00041334849083796144, 0.0005043703131377697, 0.00048576574772596359, 0.0002485515724401921, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -44,113,5,-127,-71,-37,-48,-80,-23,14,12,91,23,-81,5,79, 
  /* [1][0][][] */ -35,25,-57,-12,-38,-21,22,-73,48,35,-63,25,-2,-10,30,-127, 
  /* [2][0][][] */ -10,-3,-27,49,37,31,-48,-72,127,-16,25,16,-29,99,-50,19, 
  /* [3][0][][] */ 59,-74,-6,-110,29,-45,4,-17,127,-6,77,54,-4,46,8,119, 
  /* [4][0][][] */ -97,86,29,67,-2,-39,-16,63,9,12,27,-31,-127,-13,11,52, 
  /* [5][0][][] */ -9,86,123,0,16,89,-79,81,-66,59,-28,-37,40,-59,-127,31, 
  /* [6][0][][] */ 28,-42,108,-127,27,18,-37,103,-78,-99,30,-25,0,75,-30,61, 
  /* [7][0][][] */ 37,121,-37,-56,96,10,14,-55,127,111,-26,24,17,-32,62,45, 
  /* [8][0][][] */ 13,-78,18,-74,18,-39,12,-61,28,66,75,-9,17,127,81,56, 
  /* [9][0][][] */ -12,-17,-12,104,31,-6,44,-48,-69,127,33,-35,-24,-73,2,-1, 
  /* [10][0][][] */ -21,21,-44,-127,8,-1,-17,46,28,-25,31,-31,-22,-36,18,50, 
  /* [11][0][][] */ -9,25,25,-27,69,-22,71,-48,-94,36,-1,24,-5,127,-76,-20, 
  /* [12][0][][] */ 67,-8,-127,-15,44,-75,56,1,26,46,-75,-53,-17,112,-34,24, 
  /* [13][0][][] */ -16,3,-27,11,8,-127,-4,19,11,-11,16,-4,9,-15,22,13, 
  /* [14][0][][] */ 43,-51,79,-30,93,1,-126,-127,-3,-37,40,38,10,-67,-42,-67, 
  /* [15][0][][] */ -85,34,-5,-50,-10,9,127,54,-53,44,59,-44,41,86,66,13, 
  /* [16][0][][] */ 5,58,127,78,-10,31,79,80,-98,9,-73,-14,12,6,2,-69, 
  /* [17][0][][] */ -44,-101,-8,27,-77,-18,-65,21,-127,-25,21,-49,-6,35,66,-30, 
  /* [18][0][][] */ 12,45,5,81,56,0,29,-15,83,37,-40,-28,23,127,52,13, 
  /* [19][0][][] */ 2,-9,52,9,98,26,-115,-60,-127,-83,-76,-127,-32,-61,-10,-30, 
  /* [20][0][][] */ 99,-40,-36,-44,0,-127,-21,41,-71,55,-113,-26,20,5,46,18, 
  /* [21][0][][] */ 73,-11,84,4,-15,-7,-2,98,-21,-86,95,25,7,127,78,95, 
  /* [22][0][][] */ -39,53,-20,127,-76,17,67,88,-22,42,-1,33,-11,9,41,17, 
  /* [23][0][][] */ 49,9,89,-96,32,9,-14,65,-5,22,-19,-21,3,-21,-127,31, 
  /* [24][0][][] */ -127,42,8,-19,9,114,32,-24,-3,17,96,-6,-80,15,44,-36, 
  /* [25][0][][] */ 20,29,19,17,6,13,63,-45,-12,-127,-19,-22,-16,-36,8,24, 
  /* [26][0][][] */ -35,-8,-4,8,-51,-13,-33,-24,-112,-34,0,-30,6,127,-35,43, 
  /* [27][0][][] */ -7,32,15,62,36,-21,-20,-27,58,5,-21,-7,6,127,-5,17, 
  /* [28][0][][] */ 28,43,39,69,127,-13,33,20,-65,-29,-40,-14,31,85,31,-46, 
  /* [29][0][][] */ -1,-10,13,15,31,14,9,36,-23,-4,-11,-127,4,-15,-25,0, 
  /* [30][0][][] */ -13,72,-48,76,-30,-23,43,-127,-33,56,-11,1,58,37,80,76, 
  /* [31][0][][] */ -30,-21,-20,-64,2,-10,-54,-105,32,77,-18,-127,-37,-42,32,17, 
  /* [32][0][][] */ -127,-70,0,48,48,42,-18,15,-7,-44,-104,37,66,-6,45,69, 
  /* [33][0][][] */ -22,-32,-31,-11,-96,-3,-90,10,55,16,19,-58,19,-114,127,44, 
  /* [34][0][][] */ 37,3,55,18,33,20,-51,83,-88,-38,53,17,4,-12,-11,127, 
  /* [35][0][][] */ -46,54,-67,13,-13,-14,33,-127,84,93,-78,-3,6,-14,79,-124, 
  /* [36][0][][] */ 8,-3,15,127,50,23,86,16,25,74,-1,-6,0,41,-41,-53, 
  /* [37][0][][] */ -3,-2,18,-86,-15,12,-46,-37,-89,-26,-12,-6,-3,-127,43,-37, 
  /* [38][0][][] */ 52,94,-22,-55,127,-5,41,-43,118,96,-24,7,4,-29,50,18, 
  /* [39][0][][] */ -31,67,-2,-127,-33,16,-57,50,54,-75,-25,-13,19,92,59,41, 
  /* [40][0][][] */ 7,-29,9,-85,-10,-12,10,-34,-127,-8,-23,-22,-3,-119,67,-74, 
  /* [41][0][][] */ -14,-12,-34,-23,-2,-27,8,-2,-36,12,-46,-16,-127,8,34,40, 
  /* [42][0][][] */ 119,99,-10,-31,-89,-58,-39,-62,-14,23,94,-68,-72,54,127,-106, 
  /* [43][0][][] */ 4,97,-83,12,73,-34,127,-52,74,102,-18,9,39,-106,-62,-67, 
  /* [44][0][][] */ -36,-2,9,-49,51,6,-95,-127,-33,-6,5,-8,-1,-49,81,-55, 
  /* [45][0][][] */ -8,50,-127,-28,27,-73,24,-77,13,29,2,-68,31,-12,63,-20, 
  /* [46][0][][] */ 2,4,-10,-83,-16,13,14,-29,-125,-25,13,7,-10,-127,80,-23, 
  /* [47][0][][] */ 24,43,21,-14,127,-19,-32,15,-49,42,6,19,2,6,125,-21, 
  /* [48][0][][] */ -127,-80,-20,32,83,11,15,-37,2,-25,-121,45,67,0,58,40, 
  /* [49][0][][] */ 10,14,107,82,127,-12,33,28,-117,-56,-43,-75,9,126,33,-60, 
  /* [50][0][][] */ 12,-47,-127,-64,26,-127,-29,12,-60,-58,3,-55,26,-7,28,17, 
  /* [51][0][][] */ 15,37,49,17,37,5,-1,31,-101,53,7,-127,19,-107,-12,82, 
  /* [52][0][][] */ 13,45,-8,56,52,-12,29,19,68,84,-40,-41,37,127,52,15, 
  /* [53][0][][] */ -14,-40,-11,-17,-85,0,-89,12,48,15,17,-64,26,-125,127,25, 
  /* [54][0][][] */ 67,-25,-55,20,127,70,-107,-47,-64,-6,-18,-73,4,-31,-6,-48, 
  /* [55][0][][] */ 52,-20,-8,7,44,-47,-52,-127,-23,-66,-56,18,-2,-12,24,-14, 
  /* [56][0][][] */ -25,21,30,-25,-12,-20,-104,70,-15,127,-5,-19,25,1,3,17, 
  /* [57][0][][] */ -1,25,-36,-16,-43,-50,103,80,-24,32,-1,-7,21,29,127,-1, 
  /* [58][0][][] */ 39,-5,-127,-1,82,63,-39,34,-90,-40,-2,0,-52,15,-3,-19, 
  /* [59][0][][] */ -87,63,100,18,-73,-57,116,127,20,0,22,-13,14,8,57,-3, 
  /* [60][0][][] */ -1,8,-47,-1,16,-127,-36,9,-14,-21,9,-39,34,-33,21,17, 
  /* [61][0][][] */ 7,-13,19,127,50,21,24,9,-95,-6,16,42,-11,11,28,-50, 
  /* [62][0][][] */ -53,127,17,-48,-37,3,-62,67,-20,-57,-78,-50,-1,-102,-49,-29, 
  /* [63][0][][] */ -48,31,-30,127,-79,4,-76,-22,-63,-16,-14,-38,16,62,56,46, 
  /* [64][0][][] */ 13,-5,-4,45,5,2,-10,52,27,8,-19,-43,-9,-127,66,-3, 
  /* [65][0][][] */ -16,-54,6,-127,47,-40,72,-34,-8,58,21,-110,-12,9,35,-59, 
  /* [66][0][][] */ 47,-17,68,-18,10,1,14,101,0,-91,23,37,15,127,-14,48, 
  /* [67][0][][] */ -3,64,-20,-127,-14,-7,-67,37,93,-99,-19,-6,28,84,93,47, 
  /* [68][0][][] */ -25,34,127,16,15,-4,-5,-7,-38,-18,-9,-32,10,-12,86,-35, 
  /* [69][0][][] */ 127,70,-11,1,-87,-40,-28,-45,3,33,109,-56,-78,74,84,-86, 
  /* [70][0][][] */ 34,6,-52,-10,-26,20,44,127,-32,99,-23,3,2,69,-10,26, 
  /* [71][0][][] */ 10,-7,-10,4,10,-79,4,24,-29,16,-84,2,-127,0,39,45, 
  /* [72][0][][] */ 11,17,-127,14,8,22,37,94,-46,-29,-1,-5,30,15,-25,1, 
  /* [73][0][][] */ -59,36,59,2,40,-33,-93,-127,12,-79,30,-24,17,-60,47,-9, 
  /* [74][0][][] */ -6,46,43,116,7,0,-86,92,-78,3,-52,39,15,-127,27,-84, 
  /* [75][0][][] */ -18,38,-48,3,2,3,18,-2,127,15,-23,-18,20,117,-37,11, 
  /* [76][0][][] */ 8,-26,-2,23,14,-16,-12,60,26,-37,-25,-127,-1,-5,-1,4, 
  /* [77][0][][] */ -25,42,-2,127,-64,34,65,119,4,50,-3,26,-23,-30,3,1, 
  /* [78][0][][] */ -9,21,38,-127,35,-13,-56,61,19,-41,2,-47,16,115,31,61, 
  /* [79][0][][] */ -14,-91,-71,-51,-80,5,10,-63,127,4,27,54,13,33,55,-45, 
  /* [80][0][][] */ -65,27,122,-95,-12,-18,-17,-65,-67,48,-14,-124,16,83,127,-8, 
  /* [81][0][][] */ -48,48,-127,22,67,-116,-13,60,-1,-43,64,-8,23,1,9,-2, 
  /* [82][0][][] */ 123,-13,-4,19,7,-127,-23,18,-27,-18,-111,-1,96,-2,-7,30, 
  /* [83][0][][] */ -36,77,-122,-74,-31,-25,45,-127,77,52,-34,-123,16,57,82,107, 
  /* [84][0][][] */ -17,9,60,-34,18,-25,60,-127,-17,45,-13,-47,37,46,43,-23, 
  /* [85][0][][] */ -77,127,22,-125,-76,-21,-35,9,-46,-13,-65,20,1,-12,-79,-21, 
  /* [86][0][][] */ -6,5,-31,6,-30,-38,127,21,2,-12,7,5,10,41,107,-9, 
  /* [87][0][][] */ -19,-46,-4,-120,17,-42,58,-24,0,25,-7,-127,-20,6,11,-45, 
  /* [88][0][][] */ 79,-6,57,-13,7,-90,-11,34,-59,22,-127,-57,36,19,56,5, 
  /* [89][0][][] */ 30,-29,-46,-51,33,-16,-20,-18,-52,-4,32,-60,127,-8,18,-52, 
  /* [90][0][][] */ -17,-61,22,-79,58,-10,-84,96,62,-87,-27,-14,-46,127,35,-126, 
  /* [91][0][][] */ -46,8,-24,-46,-1,-18,-34,-79,7,58,-21,-127,-30,0,17,32, 
  /* [92][0][][] */ -17,13,34,19,9,-127,16,-5,7,-16,6,-13,3,-18,25,4, 
  /* [93][0][][] */ 43,-24,127,-9,-47,52,35,-30,-19,23,-77,-14,-18,2,26,-3, 
  /* [94][0][][] */ 30,-2,-17,-18,28,-10,-10,-6,-30,-20,17,-53,127,-14,29,-33, 
  /* [95][0][][] */ 127,72,-17,31,-88,-32,-62,-16,-23,-11,95,-33,-47,31,79,-67, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00060096621746197343, 0.0015850840136408806, 0.00081047130515798926, 0.0010421968763694167, 0.00071176554774865508, 0.001262154895812273, 0.00062577927019447088, 0.00059928937116637826, 0.00073004892328754067, 0.0012846806785091758, 0.00039752747397869825, 0.00080420519225299358, 0.00085876398952677846, 0.0037950316909700632, 0.00048902817070484161, 0.00049263495020568371, 0.00045759350177831948, 0.0006139302859082818, 0.00098950730171054602, 0.00069443444954231381, 0.00032954360358417034, 0.00026916561182588339, 0.00041908040293492377, 0.00039780852966941893, 0.00037929919199086726, 0.0014807779807597399, 0.0015955994604155421, 0.00087551289470866323, 0.00075889501022174954, 0.0012189970584586263, 0.00061062764143571258, 0.00082524749450385571, 0.00082096777623519301, 0.00075924431439489126, 0.0012888875789940357, 0.00081518536899238825, 0.00061013532103970647, 0.00063676416175439954, 0.00061965524218976498, 0.0010452129645273089, 0.00046560243936255574, 0.0011753742583096027, 0.00092495133867487311, 0.0004587910370901227, 0.0013327501947060227, 0.00073384982533752918, 0.00073633436113595963, 0.00083364377496764064, 0.0010362418834120035, 0.00063533970387652516, 0.0006651278818026185, 0.00059017055900767446, 0.0013981690863147378, 0.00075197615660727024, 0.001214420422911644, 0.00095456896815448999, 0.0012864250456914306, 0.00085134059190750122, 0.0013125326950103045, 0.00057805114192888141, 0.002530788304284215, 0.0016109892167150974, 0.00057726365048438311, 0.00089773093350231647, 0.0018033139640465379, 0.0006119732279330492, 0.0003045914345420897, 0.00070586404763162136, 0.0013669236795976758, 0.0011999454582110047, 0.00068934139562770724, 0.0006519847665913403, 0.0017655669944360852, 0.00087307824287563562, 0.0010323043679818511, 0.00063485652208328247, 0.00070490961661562324, 0.00032441798248328269, 0.00041637688991613686, 0.00078263290924951434, 0.00044024272938258946, 0.000401555240387097, 0.00042771195876412094, 0.00056189054157584906, 0.00039449773612432182, 0.00060724548529833555, 0.0015384963480755687, 0.00051765237003564835, 0.00032267521601170301, 0.0017320758197456598, 0.00071211066097021103, 0.00075514306081458926, 0.00096635357476770878, 0.001179150422103703, 0.0011356554459780455, 0.00058108038501814008, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -9272, 20868, -8860, -6219, -16115, 11602, 23952, -46454, -6295, 13137, 22987, 12416, -6658, 6006, -9500, 15351, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00071963440859690309, 0.00056590541498735547, 0.00033141270978376269, 0.00023672351380810142, 0.00037300091935321689, 0.00033139530569314957, 0.00040736905066296458, 0.00031572318403050303, 0.00029574011568911374, 0.00028710911283269525, 0.00064849964110180736, 0.00062693667132407427, 0.0004628499154932797, 0.00027653735014609993, 0.00059048837283626199, 0.00049271841999143362, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -20,-10,5,-28,18,-2,-43,-5,14,0,-8,4,8,-16,-29,9,1,4,-15,-3,2,-29,0,5,11,25,5,127,35,-32,32,-4,-4,11,5,-2,2,11,-33,-14,-10,3,9,42,1,7,8,-4,27,-3,-5,6,13,-18,-10,74,2,8,-22,-29,-6,22,1,-13,-33,-57,-14,39,-3,9,17,-23,-8,-32,-13,-25,-23,14,-4,1,12,-26,16,20,4,-15,-12,-85,9,-18,14,0,55,-37,-29,-7, 
  /* [1][0][][] */ 33,-63,-70,-59,127,-26,66,33,-11,-86,-42,-27,1,-7,-56,44,-55,15,65,48,29,34,-27,-57,5,-28,-5,-84,39,-16,-66,31,-17,25,1,-19,-15,-10,-5,24,-24,24,-50,-33,-48,85,10,24,20,-72,2,-38,-26,40,53,1,-74,-32,-34,-47,24,-9,3,-48,-66,104,6,-36,-3,-34,-28,25,41,-111,-20,0,28,-67,23,12,-1,-9,46,0,-48,9,-28,29,24,-35,1,4,19,-4,31,109, 
  /* [2][0][][] */ 9,46,-56,-12,55,56,27,57,5,-80,6,-10,-17,8,25,10,4,-23,-25,33,29,-8,62,9,23,3,-18,-39,17,-4,39,-50,23,18,-20,26,-127,-61,23,32,-6,-23,3,-13,37,-19,5,42,-26,18,-29,-1,62,-21,-7,41,24,0,14,-8,21,6,26,-38,2,-15,-25,-5,-44,-5,-19,-17,-36,-51,9,41,54,35,28,3,-23,-26,15,-13,-28,22,26,29,-13,25,-24,-26,-16,-16,-60,1, 
  /* [3][0][][] */ 68,14,93,-3,49,10,18,-6,-26,-77,21,-45,7,45,31,90,4,10,15,0,121,-22,36,15,50,12,-27,38,17,32,-18,78,-110,33,24,2,-10,-36,-7,40,-84,-31,82,45,31,43,-51,-109,-64,-41,-45,25,-10,-127,-13,32,-90,70,49,47,16,101,-30,-37,30,71,-22,-31,17,-27,-5,-69,60,-29,55,-15,23,-6,56,40,-15,-91,-3,-2,-21,14,29,44,63,24,15,31,54,107,51,-30, 
  /* [4][0][][] */ 17,4,37,-16,127,74,-3,-30,-48,-58,-30,-41,-37,23,-28,70,10,-76,-60,82,-46,23,27,-12,30,25,8,-25,13,-11,58,-11,99,16,-31,19,76,4,13,-8,-17,-17,-4,-10,-18,-63,-25,-17,50,18,-15,15,-21,-34,-10,-32,42,-22,-21,28,-8,61,52,49,57,45,-37,14,-62,-8,41,54,11,-73,-54,-36,25,34,91,-43,23,-35,-29,-7,-65,11,32,67,-20,44,16,-29,45,2,37,-12, 
  /* [5][0][][] */ 11,-1,-10,5,12,-9,39,-33,-17,-40,-4,10,-4,32,1,16,-16,-9,11,-18,33,14,-39,58,5,-4,2,-90,-15,32,11,27,-1,0,2,-61,13,17,8,3,-13,-7,32,-7,11,3,-3,-38,-14,-15,3,-8,-11,-44,-16,-53,3,6,-25,6,66,5,-3,35,-2,41,0,83,-7,82,2,22,3,18,-14,60,-28,-2,18,15,-9,-5,1,12,-8,23,0,127,16,39,-19,-14,4,21,-60,23, 
  /* [6][0][][] */ 20,-73,21,-40,-25,23,27,9,-2,2,-11,-74,-16,-13,-39,34,12,1,-27,-15,-56,43,5,8,-4,11,-13,9,-7,13,26,-9,60,36,51,1,8,-14,18,-110,-12,73,22,2,-2,-27,-30,2,-5,32,-23,63,-18,-58,-9,-4,4,-64,4,2,-17,51,36,-57,44,-30,3,-11,-16,-2,127,-17,-45,3,-42,26,-76,-16,11,-2,70,38,6,10,-11,-8,28,31,15,2,55,-24,21,-12,-40,-9, 
  /* [7][0][][] */ 12,127,32,8,104,34,54,-25,-9,-24,30,1,-50,27,37,17,30,-56,17,28,54,-40,39,10,-29,-18,13,-8,9,-12,20,-12,40,-15,-41,7,-18,22,5,94,-57,40,-3,2,1,-5,37,-16,-42,-29,14,25,33,-58,-31,47,50,8,-31,-4,-5,-35,6,-15,-69,69,-30,-94,-23,-39,-1,77,-16,-29,18,19,40,63,45,-11,-95,-40,15,-19,-26,49,8,-14,-50,21,-63,-49,-87,1,3,-21, 
  /* [8][0][][] */ -13,5,60,13,-127,-28,51,-23,26,92,74,3,8,9,12,19,-55,32,-4,-7,-60,7,-121,74,32,-26,65,0,16,27,-10,71,87,-9,-6,-5,-10,-18,-5,30,28,-42,56,21,-63,-16,43,0,-104,14,31,25,-70,-29,-34,44,11,-67,-79,-21,13,-37,-32,14,23,81,8,-48,28,-17,-54,-45,36,54,54,-22,-23,-47,-26,22,-57,12,-42,1,36,19,51,52,26,-39,77,67,31,-18,53,28, 
  /* [9][0][][] */ 0,-113,-17,24,104,65,-25,-27,46,-48,69,97,-3,11,105,-93,26,-15,-18,23,-77,-41,32,-6,-15,-2,-5,34,-5,12,-9,-16,20,19,-92,23,11,14,-35,74,39,-80,-3,53,-26,-18,-66,-21,32,26,-12,-81,71,61,-12,-70,-13,116,-6,11,10,-46,-31,127,-90,-9,16,-4,9,50,-38,-100,41,-20,1,36,55,-68,21,-2,27,-14,30,20,-1,-65,14,-7,12,-48,-31,47,-62,-10,15,-37, 
  /* [10][0][][] */ -48,-20,-23,-45,-14,-6,64,-27,31,15,25,31,39,-16,-11,-5,1,24,-30,-10,-8,27,16,24,-13,-11,15,-127,22,-35,45,-26,-2,20,-3,-15,1,32,0,-10,8,-35,25,-48,1,-13,20,18,-4,26,-24,-19,-28,-14,1,-54,3,14,-3,-33,21,10,5,13,-28,100,1,-33,10,-22,-4,-21,-29,-10,9,53,-4,35,-20,12,-2,2,12,21,3,-22,-14,112,5,-15,27,14,21,-44,39,-25, 
  /* [11][0][][] */ -82,18,-4,-4,13,-38,-22,-6,-47,-2,-2,22,32,14,-22,-13,36,2,-70,-57,22,-7,-1,-4,72,25,56,5,-30,26,-37,20,-11,32,-14,-11,-12,3,26,-5,-10,-2,11,15,84,18,75,2,45,36,1,27,4,-69,17,0,-55,-18,-37,-38,-3,-7,-12,34,-10,-27,16,12,15,12,-1,23,-19,22,24,2,-13,92,-117,67,-27,-16,-76,-60,127,36,45,-11,15,42,-30,-57,-6,44,-27,-2, 
  /* [12][0][][] */ -11,2,-29,-2,43,21,-3,-16,-17,13,26,-8,5,-9,24,-2,-38,-11,3,-20,-13,-11,-39,38,-9,41,-26,96,-11,32,-35,5,-10,24,7,28,-11,-23,14,2,9,-12,11,4,-10,-2,15,5,0,3,-1,-34,-25,5,-21,-21,-4,-14,18,11,-17,-17,-8,35,26,-83,5,54,-30,-127,0,41,-2,4,15,72,1,-20,-5,5,5,14,-42,-2,13,-11,0,-37,7,22,5,5,-24,26,-2,27, 
  /* [13][0][][] */ -59,49,-2,-14,-42,-10,-3,3,-38,-14,30,25,89,-6,-20,3,3,22,-46,-9,-1,-10,53,-45,53,37,8,-1,21,-17,-42,-77,-73,-26,-7,2,7,36,37,-25,-22,64,5,24,21,-5,6,0,55,-18,44,70,65,-46,80,-9,-33,46,46,6,13,24,-11,39,18,-23,20,14,6,23,25,-127,9,-19,-69,7,47,47,-54,-30,86,-19,-2,-21,55,-34,66,6,-23,-15,-15,32,44,-49,-21,12, 
  /* [14][0][][] */ -20,16,-21,-50,48,-17,0,33,-86,11,11,7,-28,-54,-74,-25,-73,-18,76,23,32,-1,8,-99,-43,-2,-37,-26,26,-23,-12,-39,-59,-24,27,9,-17,-3,1,16,16,64,-82,-28,-63,19,14,42,127,-33,24,-11,33,76,-99,15,-41,33,-99,15,9,38,44,17,7,49,9,3,-33,30,58,30,30,-21,-16,22,57,-88,-28,-97,11,-22,19,35,23,-83,-54,3,-58,19,47,53,-1,25,19,-19, 
  /* [15][0][][] */ -31,-84,-12,-54,13,-5,-1,-60,-23,22,-17,-26,28,-1,59,-27,-74,-21,8,23,-8,-3,-66,-39,-25,-22,-2,-7,-26,-12,66,-99,-3,14,21,4,-32,36,-97,19,18,-74,-19,11,-18,-46,64,56,42,11,-13,-127,-1,53,5,41,25,-12,-28,39,12,-2,52,-23,2,-1,-2,-25,-18,25,0,58,-42,0,7,-35,-38,-7,17,15,-45,48,12,65,-30,-53,-31,-43,-59,60,21,75,-76,-4,-13,-21, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.030584461987018585, 0.024050978943705559, 0.014085040427744389, 0.010060749016702175, 0.015852538868784904, 0.014084300026297569, 0.017313184216618538, 0.013418234884738922, 0.01256895437836647, 0.012202137149870396, 0.027561234310269356, 0.026644809171557426, 0.0196711216121912, 0.011752837337553501, 0.025095755234360695, 0.02094053290784359, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 22360, 67049, -1557, -1862, 15092, -6293, 104, 327, 6211, 8572, -5303, 1065, 318, 7351, 5062, -9077, -4081, -227, -73, 12101, -10371, 15765, -2549, 6399, 19322, 192, -7133, 13139, 13667, -19057, 1804, 21606, 24661, -9610, 2622, 345, -453, 158, 3294, -5678, -5594, -931, -7480, -231, 30046, -1549, 12846, -1127, -14871, 659, -141, 291, -2061, 16274, -3205, 14744, 24611, 151, 34924, -417, -9052, -456, 1427, -246, -1841, 13914, -1388, -4962, -2758, 3429, 911, -3113, 396, 27, -1945, -6868, -491, -2191, 30184, -9582, -4680, -12037, 636, 1112, 50656, -13077, -11367, -26817, -7405, 9533, -1124, 39530, 17, -2422, -3362, 802, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 9.9780249001923949e-05, 8.4089653682895005e-05, 0.00011423054820625111, 0.00021212171122897416, 0.00022946046374272555, 0.00013264240988064557, 6.090633905841969e-05, 8.2133970863651484e-05, 0.00023271744430530816, 0.0002741836360655725, 0.00021877681137993932, 0.00012838440306950361, 0.00028085586382076144, 0.00021112058311700821, 0.00040665551205165684, 0.00015816136146895587, 0.00020739730098284781, 0.00023865871480666101, 0.00023212803353089839, 8.9261942775920033e-05, 7.8951590694487095e-05, 4.1624247387517244e-05, 0.00013569436850957572, 0.00011156973778270185, 8.1235164543613791e-05, 0.00014126498717814684, 0.00013991333253215998, 0.00025946454843506217, 7.8126984590198845e-05, 0.00048965122550725937, 0.00037678462103940547, 0.00027131603565067053, 0.00011250075476709753, 0.00015822387649677694, 0.0002772972802631557, 0.00046072533586993814, 0.00042338937055319548, 0.00025604100665077567, 0.00023789542319718748, 0.0001445846282877028, 0.00022950311540625989, 0.00019325964967720211, 0.00040818308480083942, 8.9897337602451444e-05, 0.00034645438427105546, 7.3588860686868429e-05, 0.00011234905105084181, 0.00032919363002292812, 0.0006619454943574965, 0.00013676304661203176, 0.00042056178790517151, 0.00014041749818716198, 0.00024402442795690149, 0.00017511060286778957, 0.00025867321528494358, 0.00012244257959537208, 0.00011037298099836335, 0.00053277425467967987, 3.899919829564169e-05, 0.00019312194490339607, 0.00032645152532495558, 0.00028585619293153286, 0.00010463871876709163, 0.00015110163076315075, 0.0001225843298016116, 0.00013626183499582112, 0.00028124198433943093, 0.00043520712642930448, 0.00020656963170040399, 0.00010915708844549954, 0.00024748677969910204, 0.00011465897114248946, 0.00024990394013002515, 0.00015230050485115498, 0.00040646674460731447, 0.00026922908728010952, 0.00011666720092762262, 9.8131102276965976e-05, 8.3476188592612743e-05, 0.00012853064981754869, 0.00046379916602745652, 0.00022683318820782006, 0.00017136099631898105, 0.0003370801277924329, 7.1382222813554108e-05, 0.00011717690358636901, 6.7649758420884609e-05, 0.0004898441256955266, 0.00029357944731600583, 0.00013577891513705254, 0.00045434173080138862, 2.7199945179745555e-05, 0.00015096619608812034, 8.4551218606065959e-05, 0.00030618184246122837, 0.00024290892179124057, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -45,-71,-9,127,22,69,73,-59,-16,-17,-16,-6,-28,0,36,-1,-12,-45,27,22,19,-127,127,7,-85,7,51,-29,-124,-127,39,29,11,26,60,-19,-29,-12,31,-9,-14,27,-106,75,25,-67,38,46,-19,50,-26,19,1,-6,13,46,-89,-49,-61,-20,-11,-3,8,39,68,-26,75,14,-8,17,18,127,25,24,25,1,-10,18,127,-5,-14,15,-33,20,127,21,-76,-17,4,-31,-15,-37,3,-25,-16,27, 127,-127,75,106,-43,127,40,-118,70,4,-19,127,127,-95,-13,13,9,127,127,-109,127,-78,83,68,-127,-108,-66,-34,-55,46,-59,-15,-89,51,-127,-85,-42,-15,-50,65,-2,127,127,79,-51,-113,-113,-50,-16,-127,42,84,64,-31,44,82,-47,42,-82,-113,-46,-43,-62,68,73,-62,27,31,-81,34,-19,88,118,127,13,20,2,61,-31,51,65,127,127,-23,-9,76,-112,127,-118,-96,5,-127,-89,-127,-40,107, -74,-12,30,-79,15,-22,66,-8,79,-33,-28,19,-20,-7,-9,-13,-9,-16,6,-1,-24,-105,30,-1,-121,98,9,-56,120,49,-15,9,0,16,12,-30,-8,33,20,14,23,11,-114,63,18,-19,38,14,-15,11,-16,4,-11,1,-4,20,-67,7,-34,51,2,39,33,-3,-7,-40,-31,25,9,4,-5,30,10,-26,-8,5,-11,-6,-82,2,-23,-25,-19,2,-111,13,-36,-23,-45,25,-24,-29,30,-25,-15,1, 
  /* [0][1][][] */ -65,-77,74,-32,-47,90,17,127,-54,-21,-1,-121,27,-115,78,30,-5,-61,-17,90,56,-66,47,48,-98,-9,127,-23,-23,63,120,-103,-127,93,-86,-57,-36,31,-27,94,-50,-27,-5,48,-50,127,-25,65,16,96,20,-2,14,-55,24,31,127,122,-72,-85,127,-35,-36,127,72,-39,-17,-2,127,39,127,96,-39,102,-3,13,15,13,-30,10,-44,123,-85,110,0,34,-55,30,80,-127,-33,-7,127,-70,-22,1, 65,126,57,-111,127,84,92,38,-127,127,127,-40,-63,-127,-127,127,127,-63,-123,-50,104,93,-122,127,-110,-85,-44,127,-127,109,-127,-127,-86,127,106,127,127,-127,-101,127,-66,-97,113,-127,-127,-34,-127,-127,127,-110,86,43,127,127,127,-127,99,-127,-127,127,19,-80,-127,-101,-127,127,-127,127,-126,-127,-107,-80,-127,-81,127,127,-127,127,-76,127,127,31,-43,-127,59,127,92,45,127,11,127,1,-69,35,127,-127, -54,-14,-50,39,-57,-98,35,-27,17,-33,-29,95,2,83,14,9,-4,65,-8,127,4,-84,-41,7,-76,101,-71,-21,-66,-17,17,-66,-70,40,4,-18,-28,46,-66,44,127,-5,-37,28,-41,-59,18,46,9,118,-12,6,-37,-74,4,18,93,3,0,21,-36,127,93,-53,-44,12,37,-11,-78,120,-19,-87,0,-55,-16,-18,27,13,75,-36,-72,-42,60,13,-48,-17,67,22,21,61,-44,22,-44,96,-26,-4, 
  /* [0][2][][] */ -67,1,-2,-18,12,-49,63,22,54,-28,-37,-2,19,15,-27,0,-9,64,7,1,-46,-86,1,-9,-24,-49,36,-69,91,38,26,28,15,-12,-12,-47,-3,35,-2,5,-14,-6,-67,104,3,30,11,36,-15,-30,10,-21,21,-3,8,15,-69,23,-15,14,15,-2,-20,-4,1,-48,-47,16,-33,14,26,31,16,-19,30,4,18,7,-77,-12,-8,-8,16,14,-127,10,13,-44,-53,-48,-28,-48,10,59,-20,-8, 120,33,-127,-33,-73,-25,35,29,-64,-28,-20,-111,-76,106,-13,34,1,-51,-9,-124,97,-57,-38,0,-104,127,-52,20,-33,-21,-9,-2,-63,11,27,5,-18,-29,127,60,12,-14,67,-33,-38,74,-68,-44,-33,-5,-127,-127,-50,-26,2,39,-63,-8,12,40,-8,-19,9,-48,-54,31,66,-21,115,109,-23,-66,13,-57,6,4,100,6,51,22,10,-97,-53,1,3,13,127,40,-57,37,-18,-112,40,81,-11,26, -54,12,-17,27,15,-69,-127,1,-12,-7,-16,5,15,-30,20,-2,-9,-16,4,17,-39,-72,15,0,19,-87,21,3,-45,-40,-7,18,40,-21,-7,-25,-33,4,41,-35,25,-3,-47,-32,3,64,24,16,-9,-4,8,-9,16,4,-4,-6,-61,-11,3,-37,-12,10,85,-10,33,-3,0,28,1,4,-4,16,-17,17,0,13,35,1,71,-12,1,-9,-8,-18,74,3,40,-40,62,38,-17,-53,-9,4,-15,-16, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0042406604625284672, 0.0035738102160394192, 0.0048547983169555664, 0.0090151727199554443, 0.0097520695999264717, 0.0056373025290668011, 0.0025885193608701229, 0.0034906936343759298, 0.0098904911428689957, 0.011652804911136627, 0.0092980144545435905, 0.0054563372395932674, 0.011936374008655548, 0.0089726243168115616, 0.017282858490943909, 0.0067218574695289135, 0.0088143851608037949, 0.010142995044589043, 0.0098654413595795631, 0.0037936323788017035, 0.0033554425463080406, 0.0017690304666757584, 0.0057670106180012226, 0.0047417138703167439, 0.0034524942748248577, 0.0060037616640329361, 0.0059463167563080788, 0.011027242988348007, 0.0033203968778252602, 0.02081017754971981, 0.016013346612453461, 0.011530931107699871, 0.0047812820412218571, 0.0067245145328342915, 0.011785133741796017, 0.019580826163291931, 0.017994048073887825, 0.010881742462515831, 0.010110555216670036, 0.0061448467895388603, 0.0097538819536566734, 0.008213534951210022, 0.017347780987620354, 0.0038206367753446102, 0.014724310487508774, 0.0031275264918804169, 0.0047748344950377941, 0.013990729115903378, 0.028132682666182518, 0.0058124293573200703, 0.017873875796794891, 0.0059677436947822571, 0.010371037758886814, 0.007442200556397438, 0.010993611067533493, 0.0052038095891475677, 0.0046908515505492687, 0.02264290489256382, 0.0016574659384787083, 0.0082076825201511383, 0.013874188996851444, 0.012148887850344181, 0.0044471453875303268, 0.0064218193292617798, 0.005209833849221468, 0.0057911276817321777, 0.011952783912420273, 0.018496302887797356, 0.0087792091071605682, 0.0046391761861741543, 0.010518187656998634, 0.0048730061389505863, 0.010620917193591595, 0.0064727715216577053, 0.017274836078286171, 0.011442236602306366, 0.0049583557993173599, 0.0041705719195306301, 0.0035477380733937025, 0.0054625524207949638, 0.019711464643478394, 0.0096404105424880981, 0.0072828424163162708, 0.014325904659926891, 0.0030337444040924311, 0.004980018362402916, 0.0028751145582646132, 0.020818375051021576, 0.012477125972509384, 0.0057706036604940891, 0.019309522584080696, 0.0011559976264834404, 0.0064160632900893688, 0.003593426663428545, 0.013012728653848171, 0.010323628783226013, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1593, 8273, 18711, 20003, 14690, -2697, -1636, 4851, 26102, -3692, 7007, 3094, 6741, 10641, 19079, 1718, 2661, 6653, 11342, 3930, -185, 497, 11082, -911, 4936, 115, 7590, 7916, 7782, 28246, 42666, 15716, 7210, -543, 7855, 3308, 1960, 3332, 30958, -777, 12719, 7923, 26872, -4002, 22524, 4590, 4891, 10559, 46500, 6665, -400, 7984, -3157, 37, -1688, 7254, -368, 12906, 5440, 8896, 4442, 16145, 5286, 4479, 10720, 10393, 4632, -3925, 5351, -2201, 5029, 6523, 18850, 3557, -4219, -4858, 5062, 163, 2183, -1426, 16951, 11757, 4246, 23780, 2620, 387, 7770, 96683, 7545, 9472, 7133, -64, 5320, 6316, 4880, 16132, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00025972345611080527, 0.00017791468417271972, 0.00010208358435193077, 0.00011587701737880707, 0.00020241935271769762, 0.00037578155752271414, 0.00048889039317145944, 0.00033718982012942433, 9.0456691395957023e-05, 0.00037296063965186477, 0.00038648385088890791, 0.00029705872293561697, 0.00018983130576089025, 0.00022120977519080043, 0.0001239178964169696, 0.00035203754669055343, 0.00019028874521609396, 0.00018587567319627851, 0.00018924417963717133, 0.00029415983590297401, 0.00046596274478361011, 0.00047562457621097565, 0.00018182685016654432, 0.00070731784217059612, 0.00052654114551842213, 0.00025121631915681064, 0.00029621465364471078, 0.00017205523909069598, 0.00021296492195688188, 0.00012508723011706024, 6.7204753577243537e-05, 0.0001626147422939539, 0.0002261659101350233, 0.00038349028909578919, 0.0002594698453322053, 0.00017870786541607231, 0.00024676494649611413, 0.00044375887955538929, 8.8615641288924962e-05, 0.00080134917516261339, 0.00014836961054243147, 0.00020203135500196368, 9.8308068118058145e-05, 0.00026472200988791883, 0.00014353009464684874, 0.00033678740146569908, 0.00036145473131909966, 0.00025042082415893674, 8.9453627879265696e-05, 0.00031593875610269606, 0.00027805531863123178, 0.00021738104987889528, 0.00034905163920484483, 0.00021241366630420089, 0.00060780846979469061, 0.00015414325753226876, 0.00025748671032488346, 0.00014338675828184932, 0.00037105989758856595, 0.00016782674356363714, 0.00036388530861586332, 8.9301458501722664e-05, 0.00028515420854091644, 0.00021835225925315171, 0.00022708135657012463, 0.00018450804054737091, 0.00027685996610671282, 0.00034489438985474408, 0.0003124983049929142, 0.00031079351902008057, 0.00022120719950180501, 0.00023562625574413687, 0.00011153326340718195, 0.00028830973315052688, 0.00036291478318162262, 0.00027691398281604052, 0.00033186969812959433, 0.00043117214227095246, 0.00035024920362047851, 0.00027370775933377445, 0.00011828276910819113, 0.00014303289935924113, 0.00020112533820793033, 8.2831356849055737e-05, 0.00044821135816164315, 0.00024153401318471879, 0.00030406395671889186, 4.0014281694311649e-05, 0.00018041205476038158, 0.00024050191859714687, 0.00017558045510668308, 0.00040557901957072318, 0.00027248391415923834, 0.00024926260812208056, 0.00023126433370634913, 0.00010877448949031532, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -5,72,-45,80,45,28,12,-26,36,38,-39,116,-3,-127,56,-98, 
  /* [1][0][][] */ 22,65,-1,-24,27,-35,112,-127,5,74,-2,-22,1,-51,55,37, 
  /* [2][0][][] */ -127,21,-25,-13,43,-41,72,126,-44,42,105,-1,-67,24,14,-80, 
  /* [3][0][][] */ -72,24,24,87,-64,51,114,120,8,98,-127,5,53,-53,-64,-95, 
  /* [4][0][][] */ 35,8,26,95,-1,49,18,14,9,-14,-3,0,48,5,-127,-43, 
  /* [5][0][][] */ 7,-20,53,5,20,-6,-8,32,-41,111,-7,-127,-12,34,-62,-37, 
  /* [6][0][][] */ 7,0,38,-24,38,65,-78,-72,-22,-12,46,-27,127,-40,-14,-25, 
  /* [7][0][][] */ 24,2,127,-10,-19,-54,2,-3,-66,29,-78,-49,8,2,53,-13, 
  /* [8][0][][] */ 12,18,83,52,-52,75,13,50,26,-6,1,-90,-26,14,-127,-65, 
  /* [9][0][][] */ 34,-117,59,48,14,-15,9,18,127,6,71,9,-15,17,-106,-32, 
  /* [10][0][][] */ -49,-72,-7,-26,-86,7,4,20,78,127,40,-3,-19,34,72,-8, 
  /* [11][0][][] */ 26,-1,-15,-85,-6,-18,-72,-127,-53,39,-18,-38,28,-36,32,-58, 
  /* [12][0][][] */ -9,26,8,-53,-25,-68,-69,-19,-33,-49,-47,8,25,127,89,37, 
  /* [13][0][][] */ -18,-80,-77,40,6,-50,22,-45,56,35,-16,-1,41,19,127,19, 
  /* [14][0][][] */ -13,-76,51,36,0,42,22,111,2,75,12,-31,15,56,-69,127, 
  /* [15][0][][] */ 29,-28,2,64,-2,-11,100,16,10,-127,7,-37,-11,-7,4,-20, 
  /* [16][0][][] */ 36,-64,-58,34,27,-4,67,-77,127,95,89,10,6,92,63,109, 
  /* [17][0][][] */ -71,-56,56,94,105,56,-7,-33,127,-39,-8,-33,-3,68,-47,62, 
  /* [18][0][][] */ -6,34,8,45,-127,-4,-26,30,-55,-26,-42,-60,6,-117,44,-2, 
  /* [19][0][][] */ 56,-49,37,-39,52,34,-93,84,127,-22,37,8,-30,123,34,99, 
  /* [20][0][][] */ 31,-10,60,-59,-24,12,-39,50,-29,-42,68,-19,24,-1,-47,127, 
  /* [21][0][][] */ -80,2,-7,-41,16,30,-80,-60,-14,68,-7,22,-127,-16,40,-27, 
  /* [22][0][][] */ 33,-35,19,-21,24,-81,21,-25,-127,40,-18,-35,-15,-21,82,-38, 
  /* [23][0][][] */ 16,8,16,-7,4,5,-12,1,-8,-6,35,-10,127,0,5,-34, 
  /* [24][0][][] */ -30,3,18,-88,-12,-18,55,-14,-65,-2,5,-127,6,-99,30,3, 
  /* [25][0][][] */ -119,16,-77,29,95,-5,-28,-127,-3,117,-48,-88,-113,-4,-17,-20, 
  /* [26][0][][] */ 6,-12,61,-116,127,-30,8,-22,58,-70,39,-3,9,49,-19,45, 
  /* [27][0][][] */ 98,-35,20,-28,-51,-52,-7,-21,-28,21,-127,6,2,-11,4,39, 
  /* [28][0][][] */ -121,-3,-127,-87,64,-5,80,-48,-3,29,-74,25,63,-49,-61,28, 
  /* [29][0][][] */ -57,-41,4,127,3,27,19,-34,-1,5,-66,32,-1,-58,30,-39, 
  /* [30][0][][] */ 62,1,127,-6,51,50,-38,79,-19,-77,67,-36,-23,28,-55,65, 
  /* [31][0][][] */ 22,-112,0,-46,14,-60,22,-72,-25,50,124,33,-1,79,61,127, 
  /* [32][0][][] */ -17,78,-31,43,-127,33,-70,-38,-51,-33,6,53,31,52,28,52, 
  /* [33][0][][] */ 28,5,19,127,24,2,46,-45,-85,66,65,-9,8,-1,8,86, 
  /* [34][0][][] */ 37,2,-6,-9,55,-47,-127,4,-67,87,-60,7,-42,11,-46,-14, 
  /* [35][0][][] */ 92,-4,-5,16,33,-127,-14,-22,-18,8,-78,-5,87,17,-16,2, 
  /* [36][0][][] */ 11,-37,-127,-13,-13,19,-83,34,-76,-33,14,-42,-31,-20,-26,56, 
  /* [37][0][][] */ -20,1,127,-38,-70,7,16,-61,-18,13,-47,-4,-8,-12,35,10, 
  /* [38][0][][] */ -127,38,6,75,29,114,15,-55,33,-10,116,-51,-42,28,-4,-33, 
  /* [39][0][][] */ -12,5,18,30,32,-5,-127,42,10,26,-11,-34,8,-23,3,0, 
  /* [40][0][][] */ 2,91,-62,127,21,32,47,43,-48,-26,-87,120,12,55,-80,-18, 
  /* [41][0][][] */ 8,28,-36,-26,-39,3,127,79,-45,77,-17,-1,5,43,25,0, 
  /* [42][0][][] */ -32,-56,-13,-43,-46,14,-70,38,16,-127,75,84,-49,20,-54,-8, 
  /* [43][0][][] */ -77,10,12,-54,46,6,-50,-73,-35,26,-8,-6,-127,-34,22,-24, 
  /* [44][0][][] */ 13,-7,-11,2,-2,-34,-5,-43,127,-5,18,49,16,79,3,50, 
  /* [45][0][][] */ -45,-98,-2,-79,38,-29,21,39,44,-50,-8,-28,21,127,-16,118, 
  /* [46][0][][] */ -45,26,-24,78,-84,-19,4,-63,-127,50,-45,-30,-21,28,-2,-37, 
  /* [47][0][][] */ -30,-27,-90,127,-62,44,-52,-17,21,44,59,37,-39,-5,70,5, 
  /* [48][0][][] */ -34,24,38,-127,20,-20,-21,-5,-58,10,-5,2,-5,67,77,60, 
  /* [49][0][][] */ -19,3,8,92,3,33,-49,-44,13,-31,-62,5,-18,-35,-31,-127, 
  /* [50][0][][] */ 1,54,37,-87,65,35,-17,48,127,-13,-9,7,-2,-33,4,-19, 
  /* [51][0][][] */ 0,-8,35,6,51,7,-54,-127,26,-65,-4,20,-4,6,0,-13, 
  /* [52][0][][] */ 33,-14,9,43,40,-6,-77,74,-57,127,-30,-43,82,124,31,-33, 
  /* [53][0][][] */ -40,122,-5,-127,-39,-7,34,-3,-84,-57,-90,46,-6,-106,-117,1, 
  /* [54][0][][] */ -15,16,12,23,46,-33,10,-41,-3,31,-12,-26,-7,127,-44,-10, 
  /* [55][0][][] */ -95,127,73,-14,35,-6,-19,-5,-41,31,93,-2,-19,-52,113,-20, 
  /* [56][0][][] */ 75,0,19,-115,99,-9,-10,35,62,-56,55,127,-24,9,87,52, 
  /* [57][0][][] */ 4,-23,6,92,-43,25,50,127,8,4,65,-36,12,42,9,19, 
  /* [58][0][][] */ 20,117,6,-127,13,36,-17,5,110,0,-16,89,4,-85,39,68, 
  /* [59][0][][] */ 28,67,66,-127,-39,-15,21,-12,30,28,21,-76,-3,-117,-74,19, 
  /* [60][0][][] */ 47,-21,105,-35,-32,127,40,-44,-4,41,-59,-7,19,16,23,-12, 
  /* [61][0][][] */ -35,34,-50,-43,-34,23,111,127,-30,35,8,4,7,36,43,-8, 
  /* [62][0][][] */ -30,-9,-6,-14,-82,14,-32,5,-27,-16,14,-54,9,-127,77,1, 
  /* [63][0][][] */ 29,-34,11,-83,52,-11,-126,-127,-51,74,-17,23,69,14,25,-54, 
  /* [64][0][][] */ -49,-13,39,48,87,7,-38,-127,17,-120,26,-33,-5,-18,-24,4, 
  /* [65][0][][] */ -127,11,34,-56,25,66,43,-38,-69,26,32,6,15,19,-19,-37, 
  /* [66][0][][] */ 53,5,82,24,-35,21,-37,30,-55,4,63,-57,-3,69,-127,2, 
  /* [67][0][][] */ 6,-24,-37,36,48,-40,-69,-79,49,-127,-38,-29,-102,12,-46,24, 
  /* [68][0][][] */ 9,-41,-69,59,-62,-105,3,-45,-53,-28,43,-69,-33,56,127,-9, 
  /* [69][0][][] */ -64,52,-82,31,-35,-127,23,80,6,10,66,-9,108,18,1,10, 
  /* [70][0][][] */ 23,29,-43,-44,-44,-9,127,108,-20,59,-34,10,14,55,16,-11, 
  /* [71][0][][] */ 24,9,-28,-33,19,17,2,60,-24,-50,-37,17,19,-127,43,-10, 
  /* [72][0][][] */ 21,33,-3,22,22,-8,-45,-127,9,54,-44,14,33,49,12,56, 
  /* [73][0][][] */ -37,-127,-15,-60,-60,-45,53,-27,-15,35,-38,-19,19,-28,75,-24, 
  /* [74][0][][] */ -34,32,55,88,-5,18,-127,108,32,-39,-39,-45,2,-18,3,-1, 
  /* [75][0][][] */ -34,40,-35,26,-22,99,88,127,3,48,21,-18,-103,80,48,15, 
  /* [76][0][][] */ 22,-37,-49,-35,29,-87,-127,-85,-25,-13,29,-18,23,-17,91,-33, 
  /* [77][0][][] */ -50,17,-36,-39,-52,-12,-12,-40,127,-2,-91,6,3,40,20,-93, 
  /* [78][0][][] */ -104,-127,-3,87,47,61,-40,59,-8,-78,-108,96,55,-30,95,60, 
  /* [79][0][][] */ 20,-8,26,-83,127,2,54,19,87,26,1,32,-19,-42,29,-34, 
  /* [80][0][][] */ -21,-8,99,-127,-66,5,-45,43,-80,-34,-23,-51,-15,123,-29,13, 
  /* [81][0][][] */ 14,-5,38,37,4,48,-22,3,-4,-20,-10,-28,-7,34,-127,8, 
  /* [82][0][][] */ -85,34,44,-53,1,3,21,-36,-14,-28,-43,-72,-4,-111,-127,9, 
  /* [83][0][][] */ 50,64,-97,-122,-69,-48,38,40,-74,18,43,-127,29,-110,28,93, 
  /* [84][0][][] */ 127,46,14,34,-55,4,-53,23,-6,-6,72,-8,-59,36,59,-61, 
  /* [85][0][][] */ -27,-12,-15,-69,33,0,-26,127,-108,-107,-86,-58,-32,53,86,-115, 
  /* [86][0][][] */ 41,-13,-8,16,-36,77,-34,39,-83,-53,7,-26,-21,-127,-32,31, 
  /* [87][0][][] */ 127,-28,4,-20,-53,-43,18,11,-10,37,-113,0,29,-21,9,50, 
  /* [88][0][][] */ 1,39,-35,-30,-35,16,-4,8,30,1,55,-14,-64,-66,127,-66, 
  /* [89][0][][] */ 54,48,-78,-2,-35,-35,42,-71,63,80,31,-31,-33,22,18,-127, 
  /* [90][0][][] */ -28,3,71,-108,-119,87,70,-1,52,-127,-26,-90,66,-40,-70,-24, 
  /* [91][0][][] */ -27,15,-6,-127,-43,23,24,-42,-36,24,33,23,-4,-14,18,118, 
  /* [92][0][][] */ 10,-33,-16,-10,65,-30,-57,-127,20,-66,39,-35,-42,-24,-2,-12, 
  /* [93][0][][] */ 58,17,56,-127,-28,18,-35,67,57,-85,58,-34,-25,106,-27,19, 
  /* [94][0][][] */ -117,52,-79,12,43,-127,-42,53,-48,-66,64,-49,8,0,-36,-13, 
  /* [95][0][][] */ -39,49,25,-127,-42,20,-35,23,28,-49,-63,-74,14,-8,-80,16, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00072028586873784661, 0.00049340724945068359, 0.00028310637571848929, 0.00032135943183675408, 0.00056136556668207049, 0.0010421475162729621, 0.0013558299979194999, 0.00093512178864330053, 0.00025086174719035625, 0.0010343242902308702, 0.0010718279518187046, 0.00082382705295458436, 0.00052645540563389659, 0.00061347667360678315, 0.00034365904866717756, 0.00097629876108840108, 0.0005277239833958447, 0.00051548529881983995, 0.00052482710452750325, 0.0008157876436598599, 0.0012922452297061682, 0.0013190401950851083, 0.00050425680819898844, 0.001961590489372611, 0.001460246043279767, 0.00069669319782406092, 0.00082148617366328835, 0.00047715735854580998, 0.00059061136562377214, 0.00034690191387198865, 0.00018637759785633534, 0.00045097622205503285, 0.00062722142320126295, 0.0010635260259732604, 0.00071958254557102919, 0.00049560697516426444, 0.0006843482842668891, 0.0012306676944717765, 0.00024575600400567055, 0.0022223656997084618, 0.00041147047886624932, 0.00056028953986242414, 0.00027263580705039203, 0.00073414831422269344, 0.00039804916013963521, 0.00093400577316060662, 0.0010024151997640729, 0.0006944871274754405, 0.00024807997397147119, 0.00087618670659139752, 0.00077112525468692183, 0.00060285854851827025, 0.00096801796462386847, 0.00058908259961754084, 0.0016856231959536672, 0.00042748241685330868, 0.00071408279472962022, 0.00039765163091942668, 0.0010290530044585466, 0.00046543055213987827, 0.0010091558797284961, 0.00024765796842984855, 0.00079081248259171844, 0.00060555199161171913, 0.00062976020853966475, 0.00051169248763471842, 0.00076781021198257804, 0.00095648877322673798, 0.00086664530681446195, 0.00086191744776442647, 0.0006134695140644908, 0.00065345759503543377, 0.00030931297806091607, 0.00079956365516409278, 0.0010064643574878573, 0.0007679600385017693, 0.00092036760179325938, 0.0011957611422985792, 0.00097133911913260818, 0.00075906829442828894, 0.00032803125213831663, 0.00039667030796408653, 0.00055777688976377249, 0.00022971455473452806, 0.0012430156348273158, 0.00066984147997573018, 0.00084325455827638507, 0.00011097081005573273, 0.00050033314619213343, 0.00066697917645797133, 0.00048693380085751414, 0.0011247842339798808, 0.00075567420572042465, 0.00069127499591559172, 0.00064136076252907515, 0.00030166213400661945, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -3898, -918, -1406, 28386, 28005, 13657, -7566, -3231, 15348, -2261, 25290, 21333, -2225, 12319, 25942, -20158, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00041176972445100546, 0.00030128442449495196, 0.00025571681908331811, 0.00025713906507007778, 0.00041152129415422678, 0.00033449369948357344, 0.00038132572080940008, 0.00041633620276115835, 0.00022380988229997456, 0.00026811170391738415, 0.00039515885873697698, 0.00074539828347042203, 0.00044427142711356282, 0.00037944092764519155, 0.00056373566621914506, 0.00034500387846492231, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -2,3,-22,20,32,71,-33,-27,33,1,21,14,-4,22,27,69,12,-23,-10,-12,98,-65,14,-19,-33,-28,-57,-82,-1,-11,62,53,124,6,13,-5,18,-18,-32,7,-16,24,24,-28,-2,-28,-2,26,-17,21,12,-8,-35,-7,12,3,36,30,-28,-32,-54,26,2,0,11,8,50,15,-6,5,7,-33,-58,0,-4,-9,-13,-94,-1,-9,53,-22,-62,-57,46,-18,12,22,8,17,-8,-35,29,19,-14,127, 
  /* [1][0][][] */ 59,-95,45,72,27,-33,1,-41,-10,-66,-22,30,14,-59,-23,-48,-70,-3,46,2,-36,-86,-43,24,127,-60,-49,2,-15,80,-21,51,18,7,-19,25,-38,4,41,-14,-3,-65,66,-8,-37,12,38,-19,28,28,-18,-56,59,-82,37,-3,20,33,5,-86,41,-74,18,-33,-1,-99,30,46,22,52,-36,24,-112,13,-16,76,29,85,29,-20,41,5,-70,11,-63,50,1,49,-40,-13,40,1,18,-26,36,6, 
  /* [2][0][][] */ 32,19,10,-26,23,-1,-17,42,78,-25,5,51,-13,-8,64,2,-28,6,18,9,-15,-64,18,-61,4,-33,-13,21,-15,41,117,-69,1,-67,-22,48,1,127,-39,-32,-20,-28,0,34,-53,-63,-73,-1,31,24,-21,-34,35,0,1,-33,-33,5,13,22,3,-13,88,86,7,-88,18,-84,-17,-18,-28,3,-39,16,-18,34,18,69,-5,8,24,105,41,-7,-30,0,9,19,13,-4,18,-57,-60,-5,-9,58, 
  /* [3][0][][] */ -7,-30,-32,34,15,-31,12,-26,-20,14,8,17,9,1,52,-3,60,-38,1,6,-11,-18,-2,10,-31,25,-3,7,18,-40,56,-28,14,-9,-28,42,11,-3,-15,7,33,-67,31,-22,-3,5,18,10,-123,36,3,38,-127,-34,-31,-41,34,1,-19,51,-7,25,9,30,-12,-78,-43,25,55,27,15,15,-33,20,-2,-51,-47,-44,23,-34,15,-23,17,73,33,53,38,5,47,-7,-17,7,-31,1,-17,-24, 
  /* [4][0][][] */ 0,-33,14,-69,-15,-12,-40,8,-28,-64,-33,-13,16,87,23,19,59,-16,-9,10,-15,34,62,16,-18,19,-3,14,0,-15,-15,-4,-12,5,-12,6,31,-18,-6,-24,20,-7,-100,-32,42,-6,3,-4,-4,72,-6,-17,-23,-17,0,-20,-5,-20,18,37,22,24,6,-9,42,-95,25,-28,-31,8,-1,7,-10,9,-15,16,-28,75,31,7,6,0,127,-35,61,-26,-21,-19,62,18,-2,11,-35,12,-4,-48, 
  /* [5][0][][] */ -5,7,-21,-7,-9,-17,-7,103,55,-25,-27,-51,-26,32,49,33,-20,-5,2,-27,-50,-21,6,-43,7,9,16,74,60,19,53,49,-59,27,-9,-10,-52,-63,-31,-38,-48,-31,-10,-9,60,17,18,-6,4,13,9,1,-36,-21,10,-26,-23,-25,-3,38,-48,16,-22,-50,16,30,-15,10,-1,19,2,-3,21,9,15,-6,-16,31,7,126,6,-43,21,39,-19,-10,14,-27,-23,-21,14,-127,-52,-26,-11,-124, 
  /* [6][0][][] */ -25,-8,-14,-62,-25,-26,-14,1,-10,9,-11,5,39,-43,-12,1,18,-85,38,-1,-8,0,-23,27,81,5,-13,19,22,-25,17,2,-7,-7,-30,9,31,15,7,30,-5,-29,-49,-16,-3,-19,32,-127,18,39,17,7,2,3,-3,-46,54,-2,-22,18,29,41,-10,28,50,56,28,-4,-19,-19,29,-25,24,13,44,-18,-35,36,-6,20,-6,3,43,-45,36,35,25,-34,31,-1,-68,-3,-19,-3,-7,23, 
  /* [7][0][][] */ 14,21,28,-21,7,4,-24,-23,5,-1,-14,-24,-18,-99,35,5,-16,-21,-18,-7,20,-17,-33,0,-23,-17,14,-30,4,21,-3,-3,-32,17,-2,-24,5,-16,-20,22,4,-14,-17,28,-3,12,-20,59,3,21,-6,-21,-28,6,-5,-51,31,-5,8,-3,-19,-15,-21,-8,-16,43,14,-31,-9,3,-6,32,-9,-8,-7,20,53,1,16,-18,2,-32,36,6,-62,127,-13,10,-41,-20,11,26,-26,5,-4,4, 
  /* [8][0][][] */ -68,27,-44,-8,30,5,-7,29,8,64,-48,16,35,44,53,-8,19,30,-63,6,5,39,-35,-1,-34,-26,10,6,50,-108,3,0,48,-4,-6,6,-12,31,-48,42,13,5,-2,-127,-25,6,44,5,-56,30,-29,50,-115,65,13,-8,8,-23,-33,-13,14,-22,4,15,-34,45,38,-19,1,-10,28,83,-2,21,16,23,-17,-79,-7,-18,-29,-7,14,-3,-39,-2,21,-60,7,29,-26,-3,52,-22,-19,1, 
  /* [9][0][][] */ 29,-58,-29,-31,12,33,-25,28,24,-17,8,23,-30,-18,22,23,-5,12,25,-17,-26,17,-14,-32,17,6,23,-13,-37,-45,-23,3,-6,36,25,32,4,38,-49,15,22,20,-15,-74,24,-2,41,-127,-40,5,4,26,-11,0,-11,10,-42,21,-7,30,16,6,4,38,16,106,44,42,24,11,4,-13,0,-8,-17,4,59,-3,17,18,-16,9,0,-27,17,16,-11,2,-44,53,-12,1,17,9,4,0, 
  /* [10][0][][] */ 31,65,-9,35,77,-114,2,-24,23,62,38,22,-1,13,5,-82,21,40,-24,36,-97,6,-4,-40,-80,-34,-60,61,14,7,20,38,17,-20,43,-4,85,-10,-29,-10,-29,69,59,-8,-51,-8,-33,25,-30,-19,-68,-11,-26,-20,-7,-17,12,39,-29,-5,9,1,-12,20,8,55,58,33,38,4,18,41,-50,-31,-76,-22,-2,29,-16,11,22,-10,-68,-50,79,-57,115,-23,-12,12,44,-14,98,44,-15,-127, 
  /* [11][0][][] */ 45,26,-31,25,-10,16,56,-8,-12,-24,-17,-9,0,10,39,5,8,-16,-97,-4,2,6,3,-2,-39,-14,-12,16,5,19,-2,2,-1,-1,-4,18,12,21,-12,20,21,23,59,-107,39,-44,6,1,-127,1,12,-47,29,30,-9,8,-17,-10,2,5,21,-13,-17,18,-43,56,-26,9,14,-7,30,20,-50,-21,6,27,-7,-33,-59,12,0,3,89,42,15,-10,-13,-10,-4,31,-25,7,-8,3,-23,13, 
  /* [12][0][][] */ -29,0,-1,-1,-35,34,10,-4,127,0,-17,-2,4,13,-28,-39,30,28,8,79,46,30,0,-10,-14,3,19,-30,-109,15,25,-34,6,-6,-21,-19,20,-12,39,-18,-51,-25,-2,8,1,33,9,-12,12,3,-36,12,-4,-12,10,-12,68,-32,6,19,25,1,17,-17,0,34,-36,-2,1,7,-6,-36,12,8,-71,4,21,-2,6,-66,-12,8,37,44,-20,-20,-30,-27,3,21,-9,40,-15,-36,12,0, 
  /* [13][0][][] */ 32,-3,-28,25,30,6,8,9,-6,6,11,3,24,-18,11,-11,25,-81,-48,11,-8,-9,13,-2,7,4,-1,-3,-9,-44,-1,11,9,12,13,36,17,9,-1,17,-1,10,25,47,25,19,-2,-127,19,-6,-1,-4,-21,5,16,4,-15,21,20,9,12,16,-8,2,-19,-13,-18,-63,16,15,-17,-42,-11,35,-17,15,-25,5,19,2,32,-10,-15,18,28,27,11,12,0,12,24,-3,17,14,-10,-3, 
  /* [14][0][][] */ -112,-60,39,48,33,-23,-21,24,-6,22,4,30,69,-12,-127,-3,56,-12,-7,16,-14,-1,22,4,-100,-16,28,-29,-29,-74,-22,-2,2,2,39,-54,28,33,3,41,27,40,-2,-32,13,123,66,71,-104,48,-16,22,-47,0,27,2,11,3,54,44,25,34,8,33,-12,-17,-36,48,7,86,-67,-85,-61,-7,-13,39,-10,32,101,7,45,21,30,31,32,12,43,22,27,46,78,-8,21,31,23,-13, 
  /* [15][0][][] */ 79,-2,44,2,-5,101,12,-5,4,62,19,35,-70,-45,-16,23,-29,68,40,-21,13,38,-63,53,20,-31,54,-12,24,56,-49,-81,-7,-39,43,-15,32,-22,-54,-96,-3,33,5,51,1,48,-15,-59,105,-42,-72,19,37,-112,44,-96,-10,-68,29,23,-127,-27,17,10,59,-18,-56,24,-29,66,-46,10,49,7,8,27,21,-80,75,-16,-35,-8,45,77,-57,1,-2,-46,-5,6,97,3,-53,49,22,-14, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.017500212416052818, 0.012804587371647358, 0.01086796447634697, 0.010928410105407238, 0.017489654943346977, 0.014215981587767601, 0.016206342726945877, 0.017694288864731789, 0.009511919692158699, 0.011394747532904148, 0.016794251278042793, 0.0316794253885746, 0.018881535157561302, 0.0161262396723032, 0.023958764970302582, 0.014662664383649826, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 9678, -9935, 2816, 42770, -927, -4639, -10796, 907, -2597, 377, 4048, -1107, 2331, -5671, 6275, -4340, -190, 16520, 25218, 2344, 2965, -3511, -1033, 138, 17028, 317, -1681, -3443, -5812, -7242, 6544, -9147, -744, -1235, 548, 13013, 2350, -3658, 19982, 1060, 91, 1842, -9323, -7313, -7477, 66547, -1369, 17033, 37166, -13239, -158, 7548, 8679, -438, -6104, 2182, -12294, 1730, 1256, -6327, -1601, -551, -10393, -1342, 1002, 16528, 29662, 25635, -11725, 297, -11370, -26, 50735, 10626, 320, -180, 18233, 34942, -693, -6621, -1150, -5519, -926, -3298, 55, 554, 775, -80, 1867, -3550, 473, 4, -785, -547, 44, 48826, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00023123508435674012, 9.1144909674767405e-05, 0.00024764236877672374, 4.6133343857945874e-05, 0.00016670889453962445, 0.00018051377264782786, 0.00034431449603289366, 7.1869588282424957e-05, 0.00013271532952785492, 0.00056413980200886726, 0.00016652520571369678, 0.00038771860999986529, 8.9281660621054471e-05, 0.00046538951573893428, 0.00016422042972408235, 0.00019328348571434617, 0.0001289250940317288, 0.00029252620879560709, 6.0401540395105258e-05, 0.00024819167447276413, 4.7699795686639845e-05, 0.00017286196816712618, 0.00010194854257861152, 0.00036026863381266594, 0.00020803978259209543, 0.00024892252986319363, 0.00012948998482897878, 0.00018452834046911448, 0.0001058531051967293, 0.00010063511581392959, 0.00012583764328155667, 0.00018766165885608643, 0.00013357264106161892, 0.00012522241740953177, 0.00023314975260291249, 0.00017860687512438744, 0.00041425519157201052, 0.00011353620357112959, 4.8054087528726086e-05, 0.00012330671597737819, 0.00024696154287084937, 0.0003141238703392446, 0.00036339287180453539, 0.00017259576998185366, 0.00017787293472792953, 4.7718302084831521e-05, 0.00017991429194808006, 0.00020223425235599279, 7.2349612310063094e-05, 0.00017889020091388375, 0.00018227750842925161, 0.00015549942327197641, 0.00021180007024668157, 0.0003183575754519552, 0.00031376510742120445, 0.00037856673588976264, 0.00030920514836907387, 0.00027897898689843714, 0.00011925811850233003, 9.6193383797071874e-05, 0.00029350037220865488, 0.00016153563046827912, 0.0003090218233410269, 0.00012464665633160621, 0.00017179365386255085, 0.00017056753858923912, 7.3976319981738925e-05, 7.0128109655342996e-05, 0.00035428541013970971, 0.00032747953082434833, 0.00016667772433720529, 8.1584475992713124e-05, 0.00011519775580381975, 0.00017011232557706535, 0.00015509550576098263, 0.00030214383150450885, 0.00047906566760502756, 5.2925232012057677e-05, 0.00029734720010310411, 0.00028855862910859287, 0.00018790693138726056, 0.00038483372190967202, 0.00020628712081816047, 0.0001404904032824561, 0.00013788153592031449, 9.3946830020286143e-05, 0.00015040537982713431, 0.00016466717352159321, 0.00018746574642136693, 7.7575648901984096e-05, 0.0002284914517076686, 0.00012622975918930024, 0.00013575807679444551, 0.00053597660735249519, 0.028061572462320328, 7.6994452683720738e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -19,8,-19,106,-19,24,-62,-54,17,-5,101,-9,5,-10,-3,56,2,16,-32,3,75,1,33,-35,2,17,43,50,21,13,24,49,-6,31,8,-14,4,49,-57,-27,21,8,25,16,-87,-58,27,-5,-11,-20,-7,-5,48,5,-7,0,-4,-36,29,-31,24,1,127,26,-14,-10,12,-50,64,36,2,-7,79,-32,68,6,18,-127,29,62,2,13,127,-13,38,31,-28,-19,34,-4,-13,80,3,20,-2,13, -50,13,-8,9,51,-7,-10,-127,38,14,-127,-4,-15,-12,6,91,15,-29,-14,-15,76,-97,127,25,-60,-32,-104,-15,28,36,-49,17,119,13,-14,-1,-25,127,-63,-127,8,-19,-32,13,45,-127,127,-44,-76,49,51,8,38,-63,32,55,38,43,-101,82,127,35,4,-20,43,-38,-94,-1,35,-30,-18,46,-48,-46,106,-3,-29,-60,-33,62,-65,58,-15,9,-10,48,55,-42,-27,55,-13,72,-127,-31,23,-127, 0,-2,-23,-74,8,17,37,22,-2,-1,3,63,2,-10,-9,9,-16,18,-16,17,5,24,24,-33,1,-31,10,11,-7,3,47,-82,46,17,9,-23,11,4,-35,-22,7,3,-17,7,20,-36,20,0,7,-8,7,-5,3,6,-4,8,-7,46,6,-4,9,-16,1,-17,-26,-17,32,-48,-109,-6,45,-18,-127,-21,-12,18,11,-10,6,11,-12,20,-35,-3,-39,22,28,36,-24,-16,25,-12,21,7,-2,-43, 
  /* [0][1][][] */ -42,57,-17,39,-87,-16,-9,-44,28,97,-47,-19,-32,-27,-8,63,127,-25,-92,-14,55,-127,-27,15,-37,-47,-127,-6,38,38,-49,27,-125,-76,-57,4,64,-3,-43,47,-19,86,1,-4,32,-48,-10,-31,127,46,-3,20,44,9,-35,-17,31,10,-122,127,-38,-89,20,127,-60,-36,-86,127,-36,127,-20,53,-36,-54,37,9,-35,-70,127,47,127,34,6,0,127,31,-94,48,-40,-36,-102,39,99,102,29,-56, 127,127,127,127,-47,-127,127,24,127,-127,13,-127,-109,127,127,127,-15,-127,-61,-127,127,24,-67,127,127,127,-54,-127,127,127,-127,127,-10,-127,-123,127,-127,-45,102,109,-127,-127,127,127,127,-111,-105,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-41,42,-102,-28,-69,-66,127,127,-72,127,127,-106,-127,127,-45,127,-127,-127,-127,120,-75,127,-41,127,80,127,-39,-127,-24,-110,-127,-127,-23,-127,-22,-127,-127,116, -25,67,-38,3,127,69,-21,48,7,25,-17,-5,-29,-27,-15,-5,-105,-20,-127,38,29,79,-12,-118,-35,-42,124,73,8,35,74,8,127,-47,127,-3,54,6,-90,12,35,24,-21,0,-24,-49,-11,-42,80,16,-10,41,-7,-4,-73,-13,25,21,127,-88,2,127,-1,-35,-111,-28,-75,99,13,-17,115,21,-19,-55,11,51,-32,-8,-43,-2,-44,6,44,23,-88,36,127,-50,32,-23,127,-10,-112,35,34,19, 
  /* [0][2][][] */ -5,-43,-20,-61,-5,14,41,32,0,11,-22,55,22,-35,-11,7,42,3,14,21,-8,32,-16,-27,1,-25,12,3,-11,-5,49,-75,-37,66,-27,-25,30,-36,-63,17,9,10,-34,22,13,-75,-10,0,-9,8,18,-7,7,1,-20,6,-2,44,-46,33,-6,-12,1,16,-6,-10,21,-49,-54,11,-23,-13,-118,-33,-1,18,15,-12,56,17,20,21,-40,16,11,25,-21,9,4,24,23,-4,21,41,-7,-28, -29,-12,-26,23,-46,74,-24,67,8,-4,51,-11,127,-4,-19,-17,0,-40,-54,23,-20,82,-44,-114,-47,-49,104,72,13,46,54,0,-121,63,-14,-22,-29,-27,-127,-4,43,-13,-15,39,-25,-41,-16,-47,-60,28,71,25,-11,-79,30,52,15,26,80,-54,23,-60,-10,0,19,-26,-127,-53,-9,-26,-62,23,37,-46,-31,-7,-46,22,-55,1,48,35,20,13,5,61,-92,127,16,125,-30,-17,116,-20,46,84, -10,-35,-25,30,11,66,-42,13,7,-4,-1,14,10,-46,-11,-12,-43,-6,18,19,-23,8,-19,3,-4,19,0,54,-4,-7,35,30,19,42,21,-23,-7,-26,-33,8,11,-10,22,11,-74,-30,-12,5,-1,-15,-1,-4,-8,9,-17,-4,0,-51,16,-30,-21,48,5,-27,-10,-2,36,-53,46,8,56,-21,31,-55,-19,24,10,11,-3,23,-29,30,88,-12,-18,54,37,-12,109,11,3,-18,11,-22,-6,-49, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.009827490895986557, 0.003873658599331975, 0.010524800978600979, 0.0019606670830398798, 0.0070851277559995651, 0.0076718353666365147, 0.014633365906774998, 0.0030544574838131666, 0.0056404015049338341, 0.02397594228386879, 0.0070773214101791382, 0.016478041186928749, 0.0037944705691188574, 0.019779054448008537, 0.0069793681614100933, 0.0082145482301712036, 0.0054793166927993298, 0.01243236381560564, 0.0025670654140412807, 0.010548146441578865, 0.0020272412803024054, 0.007346633356064558, 0.0043328129686415195, 0.015311417169868946, 0.0088416906073689461, 0.010579206980764866, 0.0055033243261277676, 0.0078424541279673576, 0.0044987569563090801, 0.0042769922874867916, 0.0053480998612940311, 0.0079756202176213264, 0.0056768371723592281, 0.0053219525143504143, 0.0099088642746210098, 0.007590792141854763, 0.017605844885110855, 0.0048252884298563004, 0.0020422986708581448, 0.0052405353635549545, 0.010495864786207676, 0.013350264169275761, 0.015444196760654449, 0.0073353201150894165, 0.0075595993548631668, 0.0020280277822166681, 0.007646357174962759, 0.0085949553176760674, 0.0030748583376407623, 0.0076028336770832539, 0.0077467942610383034, 0.0066087250597774982, 0.0090015027672052383, 0.013530196622014046, 0.013335016556084156, 0.01608908548951149, 0.013141218572854996, 0.011856607161462307, 0.0050684697926044464, 0.0040882187895476818, 0.012473765760660172, 0.0068652643822133541, 0.013133427128195763, 0.0052974829450249672, 0.0073012299835681915, 0.007249120157212019, 0.0031439936719834805, 0.0029804445803165436, 0.01505712978541851, 0.01391788013279438, 0.0070838029496371746, 0.0034673402551561594, 0.0048959045670926571, 0.0072297737933695316, 0.0065915589220821857, 0.012841112911701202, 0.020360291004180908, 0.0022493223659694195, 0.01263725571334362, 0.012263741344213486, 0.0079860445111989975, 0.016355432569980621, 0.0087672024965286255, 0.0059708422049880028, 0.0058599649928510189, 0.0039927400648593903, 0.0063922284170985222, 0.0069983550347387791, 0.0079672941938042641, 0.0032969650346785784, 0.0097108865156769753, 0.0053647644817829132, 0.0057697184383869171, 0.022779004648327827, 1.1926168203353882, 0.0032722640316933393, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 19334, 1487, 6464, -733, 5068, 5698, 20405, 5465, -1096, 18806, 5989, 1947, 7649, 27980, -364, -2138, 11793, 11649, 2286, -107, -775, 14676, 4715, 3093, 6498, 4165, 3288, 4505, 109, -156, 7958, 10337, 16712, 1931, 8341, -544, 21949, 8100, 921, 4698, 1000, 10373, 14340, 4383, 3264, 13677, 14904, 4357, 3111, 3638, 279, -705, 15521, 6003, 6757, 9787, -301, 10246, 2672, 3864, 18820, 5502, 2628, 7236, 8226, 3907, 5453, -872, 10597, 6927, 6299, -1007, -1047, 2869, 1209, 2076, 17725, 23527, 14704, -2353, 3108, -4091, -2046, 437, 5707, 5760, 7292, 4902, 8310, 2994, 5176, 4728, 14126, 23136, -9251, 14828, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00013322521408554167, 0.00025106460088863969, 0.00020723076886497438, 0.00077481550397351384, 0.00032155928784050047, 0.00015774935309309512, 0.00015299207007046789, 0.00064990576356649399, 0.0004287045740056783, 9.6196527010761201e-05, 0.00024540332378819585, 0.00043303563143126667, 0.00036058330442756414, 0.00016826015780679882, 0.00024551709066145122, 0.00034086880623362958, 0.00018879867275245488, 0.00020087322627659887, 0.00021206478413660079, 0.00090175628429278731, 0.0004397318116389215, 0.00017100962577387691, 0.00031538333860225976, 0.00025180191732943058, 0.00027175177820026875, 0.00050611660117283463, 0.0004330450901761651, 0.00019950846035499126, 0.00064393423963338137, 0.00038292558747343719, 0.00018569706298876554, 0.0001868949766503647, 0.00011542088759597391, 0.0005481904954649508, 0.00020101743575651199, 0.00053142930846661329, 0.00010386305075371638, 0.00032331989496015012, 0.00050750089576467872, 0.00020830526773352176, 0.00052848143968731165, 0.00018252487643621862, 0.00014777288015466183, 0.00017265744099859148, 0.00035737696452997625, 0.00024325725098606199, 0.00019216524378862232, 0.00033518762211315334, 0.00051595311379060149, 0.00025149260181933641, 0.00046059419400990009, 0.00095562072237953544, 0.0001743430329952389, 0.00026626922772265971, 0.000340385886374861, 0.00018996208382304758, 0.00035951408790424466, 0.00016993755707517266, 0.00029668823117390275, 0.00043120290501974523, 9.1087233158759773e-05, 0.0002519774716347456, 0.00039364292751997709, 0.00038000367931090295, 0.00012876318942289799, 0.00029389487463049591, 0.00035275338450446725, 0.00040580757195129991, 0.00025477717281319201, 0.00016827197396196425, 0.00031124078668653965, 0.00049294537166133523, 0.00033448947942815721, 0.00046190951252356172, 0.00034735410008579493, 0.00060211849631741643, 0.00013204556307755411, 0.00019037048332393169, 0.00011120339331682771, 0.00051635829731822014, 0.00034533761208876967, 0.00050914089661091566, 0.00017937217489816248, 0.00054188666399568319, 0.00026764985523186624, 0.00026658305432647467, 0.00022217388323042542, 0.00028585075051523745, 0.00020206726912874728, 0.00055271427845582366, 0.00027107831556349993, 0.00036035862285643816, 0.00014695279242005199, 0.00011985694436589256, 0.00031624294933862984, 0.00022136759071145207, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 51,-8,124,105,64,-14,35,-35,127,-40,-67,-67,36,108,-45,-77, 
  /* [1][0][][] */ 34,113,-4,3,79,7,21,39,58,115,-29,127,-15,-35,104,-99, 
  /* [2][0][][] */ 34,-52,-6,44,-15,24,-31,101,-61,-98,8,94,21,-110,64,-127, 
  /* [3][0][][] */ 120,117,6,37,-127,2,-75,-15,8,0,99,-63,-62,100,-43,-30, 
  /* [4][0][][] */ -20,14,16,1,-34,38,-17,40,-63,-18,8,-13,-21,-127,37,10, 
  /* [5][0][][] */ 109,-85,-22,-18,-14,-106,-33,27,-6,-2,-127,9,-6,9,-6,32, 
  /* [6][0][][] */ -117,-104,-3,101,-60,4,-64,39,-127,-111,-72,-37,32,74,-8,101, 
  /* [7][0][][] */ -19,31,-76,47,37,-127,-43,56,13,-53,15,9,11,11,-41,19, 
  /* [8][0][][] */ 36,-49,-8,-8,16,15,-52,-67,-15,7,-73,12,-127,2,-12,18, 
  /* [9][0][][] */ 17,-41,37,102,-22,19,-13,-53,127,-77,7,-35,2,54,-35,15, 
  /* [10][0][][] */ -127,-86,-26,-31,76,55,52,103,114,-58,-86,18,94,-97,-127,63, 
  /* [11][0][][] */ 78,-16,-127,45,44,19,-19,21,-8,-33,-38,-25,2,29,-55,19, 
  /* [12][0][][] */ 127,-54,4,24,1,-45,-34,-24,49,11,-117,-25,-35,-13,14,38, 
  /* [13][0][][] */ 20,-95,8,-69,-19,-3,-127,-49,-26,-91,9,59,-12,31,4,6, 
  /* [14][0][][] */ -73,38,-112,-73,66,-127,70,-60,34,32,12,-116,-5,97,-23,35, 
  /* [15][0][][] */ 38,-15,77,53,61,-45,-37,13,39,-86,-69,4,-127,-40,-10,40, 
  /* [16][0][][] */ -121,55,39,33,-19,112,81,97,-36,52,127,1,19,25,23,-32, 
  /* [17][0][][] */ -13,-9,-55,-39,-28,-9,56,72,-6,127,-19,24,-2,111,101,-9, 
  /* [18][0][][] */ -13,127,-62,-13,6,-19,66,-67,7,100,-37,102,5,-49,24,-67, 
  /* [19][0][][] */ 2,-16,18,9,-5,33,-2,18,10,8,-43,-16,-127,-1,-6,37, 
  /* [20][0][][] */ 95,-66,-13,-73,-19,25,40,-66,-38,22,-127,-31,45,19,58,-5, 
  /* [21][0][][] */ 56,-8,127,40,-16,53,11,-7,-6,16,-21,-20,-19,60,5,2, 
  /* [22][0][][] */ 31,-8,31,15,-15,-15,26,127,20,-10,7,52,18,71,35,23, 
  /* [23][0][][] */ -24,15,-79,12,21,-127,5,23,-5,-16,-7,-3,-60,-1,3,45, 
  /* [24][0][][] */ 44,-41,-9,-44,50,-15,-7,-12,31,38,43,87,-23,85,127,30, 
  /* [25][0][][] */ -94,-127,-40,23,-14,-2,-10,-24,-57,3,-74,-23,28,42,30,77, 
  /* [26][0][][] */ 20,-13,77,22,24,2,-49,49,-66,-75,-21,28,29,-127,40,-23, 
  /* [27][0][][] */ -95,44,-42,35,31,-10,2,24,29,-20,127,23,-17,-5,-6,-23, 
  /* [28][0][][] */ -23,-5,12,33,-2,6,20,92,29,20,-20,-12,-127,-15,-12,36, 
  /* [29][0][][] */ -9,52,41,-26,29,-1,13,-19,-127,23,-32,-5,-4,28,-90,6, 
  /* [30][0][][] */ -19,-4,-127,-44,32,-56,-5,19,-23,-15,1,-5,-40,-33,17,21, 
  /* [31][0][][] */ 116,-42,-127,10,41,13,-43,49,-25,6,-84,-42,36,-4,-75,63, 
  /* [32][0][][] */ -118,98,52,40,9,116,7,42,35,-12,127,5,-35,-4,-7,-14, 
  /* [33][0][][] */ 12,-22,127,-22,-65,26,16,-41,10,17,0,29,-10,46,60,10, 
  /* [34][0][][] */ -72,-15,-56,-122,34,-11,37,-72,-78,-49,-81,-127,-13,-19,45,-17, 
  /* [35][0][][] */ 6,-27,39,48,47,-24,15,-14,-104,22,-7,28,-28,127,-29,-38, 
  /* [36][0][][] */ -113,42,-55,-4,-23,29,37,119,18,41,127,-15,22,35,47,-28, 
  /* [37][0][][] */ -43,49,127,-32,-83,-53,30,-57,13,28,-4,20,0,-90,55,15, 
  /* [38][0][][] */ 22,-25,-17,29,20,-69,-65,2,-10,-18,59,-9,127,31,1,11, 
  /* [39][0][][] */ -12,-60,-37,-50,-20,-127,69,114,-39,8,-3,-38,9,58,112,71, 
  /* [40][0][][] */ 71,-5,-21,-11,-25,87,-20,19,25,3,12,-21,127,11,-7,-6, 
  /* [41][0][][] */ -4,-4,-48,-127,21,5,-21,-108,-10,-45,31,-61,-4,1,-10,39, 
  /* [42][0][][] */ 27,30,-4,81,-127,9,-103,6,-72,-39,48,-77,-46,99,-13,26, 
  /* [43][0][][] */ 10,127,-32,121,9,27,29,-82,-67,90,-9,28,-12,-55,43,38, 
  /* [44][0][][] */ 10,-24,-127,12,45,54,-26,55,-10,-8,36,-29,-6,-19,-50,15, 
  /* [45][0][][] */ 19,17,-35,-127,-62,0,49,18,-3,27,-46,-25,10,-64,71,-15, 
  /* [46][0][][] */ 6,34,47,-21,12,14,-51,38,23,-53,-33,15,4,127,55,-14, 
  /* [47][0][][] */ 12,-33,23,-46,-19,4,-67,54,-16,-40,31,32,8,-127,38,16, 
  /* [48][0][][] */ 5,-9,4,-127,-17,-12,-9,8,19,-28,1,-29,3,39,2,45, 
  /* [49][0][][] */ 34,-38,5,127,94,24,-1,46,-49,8,25,46,-12,41,106,-20, 
  /* [50][0][][] */ -20,1,51,-18,20,127,-1,-103,36,-14,104,51,118,-8,-4,-85, 
  /* [51][0][][] */ 29,52,2,12,9,0,-40,23,63,20,9,127,19,31,44,-39, 
  /* [52][0][][] */ -15,56,119,5,18,-28,16,-44,-39,17,22,15,-16,59,-127,-8, 
  /* [53][0][][] */ -3,-25,-23,-127,-27,-3,3,-16,-22,21,24,-2,18,-18,37,20, 
  /* [54][0][][] */ 27,3,-14,-30,42,13,-1,13,79,-10,-1,-12,13,127,7,19, 
  /* [55][0][][] */ -3,-11,-30,7,7,-17,-5,-127,23,-59,-6,-8,-29,-50,-28,-33, 
  /* [56][0][][] */ 45,42,31,74,5,-19,15,127,24,-21,1,-38,88,-4,-54,30, 
  /* [57][0][][] */ 123,-15,127,-16,-76,-71,9,-32,23,4,-106,11,63,-51,44,5, 
  /* [58][0][][] */ 98,63,18,127,-97,-28,-7,46,25,42,64,-24,-55,-21,-12,-60, 
  /* [59][0][][] */ 118,-39,1,-9,-34,7,5,5,-46,20,-127,-25,2,-20,-4,13, 
  /* [60][0][][] */ -127,90,-30,19,35,26,11,0,46,15,114,46,-24,-9,28,-10, 
  /* [61][0][][] */ -95,59,-17,21,44,-63,-53,-92,127,-55,92,-22,15,7,-47,-59, 
  /* [62][0][][] */ 18,-42,-127,97,77,87,-6,94,30,-25,40,-34,-80,-3,-105,5, 
  /* [63][0][][] */ -40,23,127,-41,-54,-62,46,-47,-20,18,24,2,0,-59,61,14, 
  /* [64][0][][] */ 45,98,-32,30,67,-24,119,-104,-11,118,-12,-1,8,-127,-18,47, 
  /* [65][0][][] */ 9,32,10,-29,62,24,-1,-127,-21,-48,-21,-56,-14,-48,44,14, 
  /* [66][0][][] */ -127,13,-26,-3,-40,20,24,-32,-64,-29,-79,48,58,6,50,77, 
  /* [67][0][][] */ -14,-84,11,127,5,-27,-54,56,97,18,30,-19,-32,-31,-104,-26, 
  /* [68][0][][] */ 15,-12,-6,127,-59,-9,-7,-15,-29,30,15,-35,-15,-54,-12,-32, 
  /* [69][0][][] */ 95,61,-18,127,-4,18,64,-81,49,96,-14,44,27,-12,34,-16, 
  /* [70][0][][] */ 13,-38,49,-79,127,-50,69,27,52,-67,90,-30,-4,74,47,62, 
  /* [71][0][][] */ 6,53,-6,51,31,-127,-34,88,40,-88,7,7,0,-51,-39,42, 
  /* [72][0][][] */ -127,-79,-38,55,17,4,-23,6,-39,-21,-91,38,53,21,21,120, 
  /* [73][0][][] */ -37,-11,-11,50,18,-5,3,-19,87,14,24,0,25,127,-57,-48, 
  /* [74][0][][] */ 66,-28,33,-25,-42,-8,37,-22,-30,-5,-98,2,-127,-19,36,44, 
  /* [75][0][][] */ 4,-26,-20,127,-27,12,-2,-20,-53,23,-19,-40,2,-39,-1,-26, 
  /* [76][0][][] */ -10,-9,-6,26,35,3,-31,-127,-13,-99,10,16,-45,-26,9,-9, 
  /* [77][0][][] */ 127,-18,57,70,-39,9,-55,-15,71,-27,-42,89,63,24,-42,47, 
  /* [78][0][][] */ -15,-5,28,6,6,30,-72,41,77,-22,-37,-37,29,127,37,-31, 
  /* [79][0][][] */ -6,21,47,14,38,59,-54,-53,14,-47,73,-19,127,-26,-29,-38, 
  /* [80][0][][] */ -85,-90,-94,127,13,38,60,26,-52,33,-54,5,74,-51,-13,28, 
  /* [81][0][][] */ 77,19,-91,33,127,123,-22,-14,10,-80,-3,-103,-25,-21,-90,46, 
  /* [82][0][][] */ 127,125,5,45,-120,-27,-74,-23,-82,-22,106,-50,-47,109,-22,-49, 
  /* [83][0][][] */ 127,50,20,-26,9,-1,-16,37,50,8,69,-22,-44,-35,-19,-85, 
  /* [84][0][][] */ 6,-92,-67,-23,91,-29,8,-127,-29,-46,47,16,15,25,23,-39, 
  /* [85][0][][] */ -30,6,-40,-73,-26,12,64,74,-28,127,-20,-34,14,45,82,-2, 
  /* [86][0][][] */ 81,-17,-2,-14,-10,-36,-13,-21,9,-8,-127,22,8,13,-3,28, 
  /* [87][0][][] */ -11,43,3,-27,-10,62,-15,49,-18,-26,22,8,11,-127,8,-2, 
  /* [88][0][][] */ 4,-5,-124,-50,70,-18,-38,-127,29,-45,-29,-53,-26,10,46,-48, 
  /* [89][0][][] */ 13,4,-7,-124,15,-10,-27,127,76,-23,1,11,-23,38,46,29, 
  /* [90][0][][] */ -7,-9,-13,38,12,-9,44,-62,68,127,-27,30,-15,45,15,10, 
  /* [91][0][][] */ 59,-11,-57,-5,-14,-127,-16,-9,-2,7,-59,-11,32,-6,9,39, 
  /* [92][0][][] */ 66,0,127,70,43,0,25,63,-55,32,-77,19,25,79,-8,-19, 
  /* [93][0][][] */ 127,-37,-55,-5,-42,-54,18,45,-19,50,-114,-12,6,20,15,36, 
  /* [94][0][][] */ 14,-22,47,76,116,-31,-11,55,5,-18,-1,58,-9,127,-21,-81, 
  /* [95][0][][] */ -117,34,41,36,18,43,15,10,4,2,127,-5,-23,45,-9,-29, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00040077921585179865, 0.00075527356239035726, 0.00062340893782675266, 0.002330864779651165, 0.00096734153339639306, 0.00047455480671487749, 0.00046024355106055737, 0.0019551008008420467, 0.001289665000513196, 0.00028938642935827374, 0.00073824281571432948, 0.0013026939705014229, 0.0010847368976101279, 0.00050617428496479988, 0.00073858501855283976, 0.0010254300432279706, 0.00056795997079461813, 0.00060428364668041468, 0.00063795101596042514, 0.0027127387002110481, 0.0013228380121290684, 0.00051444547716528177, 0.00094876257935538888, 0.00075749156530946493, 0.00081750639947131276, 0.0015225423267111182, 0.0013027224922552705, 0.00060017802752554417, 0.0019371368689462543, 0.0011519488180056214, 0.00055862945737317204, 0.00056223309366032481, 0.00034721876727417111, 0.0016491124406456947, 0.00060471746837720275, 0.0015986901707947254, 0.00031244952697306871, 0.00097263796487823129, 0.0015267067356035113, 0.00062664132565259933, 0.0015898221172392368, 0.00054908660240471363, 0.00044454273302108049, 0.00051940255798399448, 0.0010750913061201572, 0.00073178682941943407, 0.00057808757992461324, 0.0010083394590765238, 0.0015521333552896976, 0.00075656111584976315, 0.0013855979777872562, 0.0028747781179845333, 0.0005244733183644712, 0.0008010133751668036, 0.0010239772964268923, 0.00057145982282236218, 0.0010815203422680497, 0.00051122036529704928, 0.00089252239558845758, 0.0012971806572750211, 0.00027401623083278537, 0.00075801968341693282, 0.0011841895757243037, 0.0011431588791310787, 0.00038735620910301805, 0.00088411918841302395, 0.0010611822362989187, 0.0012207842664793134, 0.00076644198270514607, 0.00050620984984561801, 0.00093630055198445916, 0.0014829195570200682, 0.001006239210255444, 0.0013895548181608319, 0.0010449396213516593, 0.0018113432452082634, 0.00039723049849271774, 0.00057268841192126274, 0.00033453135984018445, 0.0015533522237092257, 0.0010388734517619014, 0.001531640300527215, 0.00053960236255079508, 0.0016301487339660525, 0.00080516672460362315, 0.00080195744521915913, 0.00066836207406595349, 0.00085992011008784175, 0.00060787564143538475, 0.0016627212753519416, 0.00081548048183321953, 0.0010840609902516007, 0.00044207568862475455, 0.00036056368844583631, 0.00095134851289913058, 0.00066593650262802839, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -45221, 1682, 2634, -9520, 346, -7724, -11584, -38618, 37, 22689, 30720, -6647, -4279, -23539, 44309, -41622, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.0005786458496004343, 0.00070685177342966199, 0.00094566494226455688, 0.00086938607273623347, 0.00082870933692902327, 0.0012155944714322686, 0.00099153281189501286, 0.00073727424023672938, 0.00071766710607334971, 0.0005691164406016469, 0.00065707310568541288, 0.00083064549835398793, 0.00074891519034281373, 0.0012097135186195374, 0.00052512239199131727, 0.00063930946635082364, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -15,9,-30,10,24,2,1,105,-46,22,40,-4,13,-1,-13,11,17,-13,-9,-9,64,0,27,124,-12,101,-10,-6,28,-1,18,-24,-19,55,15,-46,18,45,26,-9,-107,-23,24,35,41,22,-127,-56, 
  /* [1][0][][] */ -40,-17,26,23,-31,13,-8,54,-48,-37,6,-38,-25,-21,6,-1,-21,123,-9,19,7,4,-28,-17,15,-41,20,23,-20,-83,-41,16,-15,-5,31,5,-9,-42,1,23,-17,-26,127,10,6,-9,23,-11, 
  /* [2][0][][] */ -23,-6,-15,-38,-5,-65,6,-19,-5,13,12,23,14,12,-14,8,-6,-22,-23,-9,-8,-2,-5,-127,-9,73,-13,4,-5,-21,-4,-5,-8,50,12,-1,23,17,27,3,-42,5,-20,-5,0,-11,12,10, 
  /* [3][0][][] */ -11,33,2,-29,-4,2,5,-1,-18,-3,1,38,-127,12,-6,0,3,5,-17,-3,-30,11,9,15,-3,-12,0,26,-8,22,7,14,3,3,16,20,-10,26,42,6,12,3,26,-26,6,-1,4,13, 
  /* [4][0][][] */ 34,-27,11,16,19,27,23,-20,-27,0,-13,-23,0,10,2,21,27,-11,-69,1,-5,14,16,73,8,-37,5,43,4,-75,11,9,8,-29,34,-127,16,35,-1,20,-13,14,11,-15,-12,-15,10,-4, 
  /* [5][0][][] */ 26,4,-19,55,-9,-7,10,27,1,-3,35,6,0,52,5,4,-26,16,27,10,8,6,2,-25,7,-46,4,-16,-5,-10,1,1,59,-127,7,26,-10,-12,15,6,-89,55,20,-4,-6,-2,-100,-10, 
  /* [6][0][][] */ 24,0,4,6,-9,-3,5,-14,-2,4,-1,5,-17,8,1,4,3,-11,127,6,5,13,14,-36,8,0,25,-12,-11,-3,-6,5,0,-8,31,-38,4,-46,69,14,0,-6,-2,6,-10,0,8,-14, 
  /* [7][0][][] */ -42,-20,-3,35,-16,74,-8,44,0,27,-4,127,77,-8,-4,-1,-8,-21,-6,-12,-25,-15,-14,66,-12,-31,-49,-31,-6,-12,-10,-10,9,-9,-23,5,-2,-48,94,0,19,22,-65,-59,12,-2,2,5, 
  /* [8][0][][] */ -49,-48,-13,4,-3,7,-6,31,-4,-66,-2,34,48,9,7,-1,-2,61,-30,-1,-51,37,-13,-14,4,1,8,46,-8,112,-7,22,-5,6,-17,-127,-106,60,36,23,25,3,113,-24,8,25,21,31, 
  /* [9][0][][] */ -24,0,-1,30,22,-32,-5,-2,61,-47,6,59,-63,7,19,-10,-6,20,-37,-21,60,11,-16,-20,-1,12,48,-22,18,22,15,-5,-4,21,83,-111,-13,-127,-93,11,-38,27,69,5,8,11,-14,-43, 
  /* [10][0][][] */ -21,-1,-28,-127,50,91,6,-10,-3,32,25,6,41,-50,-42,20,32,-42,46,-38,25,-26,33,43,-55,-109,12,-29,44,29,43,-48,-25,-85,26,-6,22,-44,9,-33,-35,-59,-11,11,8,9,22,-31, 
  /* [11][0][][] */ 4,46,-3,61,36,-63,-73,-19,0,57,-18,0,-2,51,-15,-69,34,46,14,-12,-46,-97,5,8,27,-48,9,-18,54,-37,21,-68,37,-4,-36,-87,84,24,3,-127,12,52,93,-63,-8,-53,31,27, 
  /* [12][0][][] */ 127,-1,-19,12,0,16,0,103,18,-13,-55,-26,-3,19,-4,-5,-9,5,-5,-5,2,3,2,23,2,18,-4,8,-8,14,-7,3,-2,-59,-8,8,-15,-14,-26,-2,-11,-81,8,-126,-51,-10,76,-1, 
  /* [13][0][][] */ 10,6,-1,5,8,-9,-1,0,-1,7,2,21,-6,8,4,-2,7,2,10,3,12,-10,8,-4,2,3,15,127,13,1,7,-2,1,1,-38,21,10,-4,7,-11,-17,-1,4,4,-1,-2,-9,-14, 
  /* [14][0][][] */ 73,-27,47,-84,67,25,36,-110,-65,-63,-2,127,-80,-6,64,6,51,25,-63,67,21,21,66,-19,16,67,-36,-123,34,-37,76,52,-3,72,-127,-56,-43,44,95,1,-44,11,63,-3,0,-4,13,-13, 
  /* [15][0][][] */ -6,-51,-60,-39,53,14,63,-46,-10,0,-26,-37,65,13,-92,65,59,35,77,-77,-97,-25,44,-4,-112,40,26,45,63,53,48,-41,14,60,110,127,-12,-102,-12,-31,87,51,126,-43,0,-28,-18,75, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.024592448025941849, 0.030041199177503586, 0.040190760046243668, 0.036948908120393753, 0.035220146179199219, 0.051662761718034744, 0.042140144854784012, 0.031334154307842255, 0.030500851571559906, 0.024187449365854263, 0.027925606817007065, 0.035302434116601944, 0.031828895211219788, 0.051412824541330338, 0.022317700088024139, 0.027170652523636818, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { -28, 31648, -811, 54367, 3647, 129363, -3268, 45557, 5866, 34178, 24623, 422, 6957, 30307, -405, -3942, -652, -764, 5143, -1445, 402, -1552, -726, -18464, -5042, 43788, 132409, 101102, 4329, 1162, -2090, 215, 25900, 8, 15949, -6896, 35406, -1241, 57341, 2071, 1027, 72912, -367, 4877, 38592, -508, 4894, 49206, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 9.160169429378584e-05, 3.0419798349612392e-05, 0.00015611232083756477, 4.4216103560756892e-05, 0.00013800624583382159, 6.2376566347666085e-05, 0.00012366508599370718, 0.00012802996207028627, 6.9375855673570186e-05, 3.6770736187463626e-05, 4.6347322495421395e-05, 0.0001049689672072418, 3.6252684367354959e-05, 3.3848671591840684e-05, 0.00015447192708961666, 0.00014253186236601323, 0.00019142554083373398, 0.00010253171785734594, 8.3465609350241721e-05, 0.00012203030200907961, 7.9862744314596057e-05, 0.000197366185602732, 0.00010004979412769899, 0.00011988874030066654, 0.00010221003321930766, 9.9958757346030325e-05, 3.5820874472847208e-05, 7.0945454353932291e-05, 0.00012697353668045253, 0.00012681359658017755, 0.0001120984015869908, 0.00013755350664723665, 3.6112505767960101e-05, 0.00012444383173715323, 3.5140485124429688e-05, 6.0882131947437301e-05, 0.00016366448835469782, 0.00011016495409421623, 9.781100379768759e-05, 8.4421240899246186e-05, 0.00010775609553093091, 7.9374447523150593e-05, 0.00011357644689269364, 7.972465391503647e-05, 2.7946813133894466e-05, 0.00017437619681004435, 8.5293293523136526e-05, 3.2118627132149413e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 70,-92,97,71,53,-34,104,-65,60,-89,-79,47,52,-41,-73,-90,103,78,50,77,67,-76,-83,51,-30,-40,-61,-66,-68,63,-63,-115,-13,40,68,64,-65,51,-50,-22,50,-75,60,62,-93,11,75,-34, 82,-95,127,87,-77,-68,-59,-84,97,-100,-64,74,80,-106,-96,92,-38,96,82,127,86,-117,54,71,-50,-77,-66,-80,54,79,-31,-127,-91,79,80,84,-84,80,-82,-15,76,-95,84,90,-73,-127,93,-103, 34,-42,71,37,20,-41,-46,-38,42,-31,5,35,28,-78,-55,-1,-55,38,35,70,34,-56,32,25,-25,-44,-40,-22,31,31,89,-90,-88,43,34,34,-32,38,-39,-11,40,-42,36,43,-5,-9,37,-73, 
  /* [0][1][][] */ 93,-112,-41,95,54,-82,127,-91,86,-113,-73,82,83,-109,-15,-127,127,109,73,-39,85,107,-127,73,74,-75,-94,-99,-127,86,-71,-8,-89,69,106,97,-84,79,-80,89,84,-103,89,91,-90,106,94,-94, 127,-127,-65,127,-127,-127,-92,-127,127,-127,-127,127,127,-127,-21,98,-65,127,127,-52,127,127,68,127,127,-127,-127,-127,52,127,-28,18,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 63,-76,-32,67,37,-62,-47,-63,58,-43,-59,59,48,-50,-18,11,-63,50,59,-31,56,64,52,64,66,-63,-59,-44,38,55,127,14,-66,70,48,49,-50,59,-60,55,59,-59,54,62,-62,-67,60,-55, 
  /* [0][2][][] */ 47,-51,-46,53,26,-53,65,-44,41,-72,-5,39,56,-71,82,-81,77,50,34,-31,25,-12,-76,31,-24,-44,-50,-48,-74,32,-43,91,-75,37,49,44,-27,38,-43,-87,48,-49,42,46,-24,15,39,-75, 73,-75,-49,81,-58,-62,-72,-68,51,-77,-65,60,75,-48,127,33,-48,59,61,-44,56,-19,43,66,-51,-67,-79,-62,31,62,-26,118,-54,63,59,59,-49,62,-66,-105,67,-69,61,64,-84,49,63,-55, 41,-42,-27,47,29,-20,-16,-34,14,-27,-51,28,32,4,69,25,-36,22,29,-31,29,0,41,42,-23,-29,-48,-24,36,34,61,65,1,35,15,22,-23,31,-29,-55,28,-32,26,30,-63,9,32,-8, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.003893071785569191, 0.0012928413925692439, 0.0066347732208669186, 0.0018791843904182315, 0.0058652656152844429, 0.0026510038878768682, 0.0052557662129402161, 0.0054412735626101494, 0.0029484736733138561, 0.0015627562534064054, 0.0019697612151503563, 0.0044611808843910694, 0.0015407390892505646, 0.0014385684626176953, 0.0065650567412376404, 0.0060576042160391808, 0.0081355851143598557, 0.004357597790658474, 0.0035472884774208069, 0.0051862876862287521, 0.0033941667061299086, 0.0083880629390478134, 0.0042521161958575249, 0.0050952713936567307, 0.0043439264409244061, 0.0042482470162212849, 0.0015223871450871229, 0.0030151817481964827, 0.0053963749669492245, 0.0053895777091383934, 0.0047641820274293423, 0.0058460240252315998, 0.0015347815351560712, 0.0052888626232743263, 0.0014934706268832088, 0.0025874904822558165, 0.0069557405076920986, 0.004682010505348444, 0.0041569676250219345, 0.0035879025235772133, 0.0045796339400112629, 0.0033734138123691082, 0.0048269988037645817, 0.0033882977440953255, 0.0011877395445480943, 0.0074109882116317749, 0.0036249649710953236, 0.0013650415930896997, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 622, 787, 1792, 343, 8426, 13733, 2526, -56, -762, -582, 1029, 964, 3255, 995, 23637, 2796, 1741, -1476, -214, 3184, -1438, 11515, 9396, 8278, 4855, 286, 4213, 4339, 9073, -554, 8906, 7387, 491, -70, 4644, 3357, -1632, 341, -509, 5770, 853, -369, -1022, 7, 1041, 3063, 624, 959, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00039182259934023023, 0.00083983252989128232, 0.00030739358044229448, 0.00034457037691026926, 0.00025853636907413602, 0.0002954142983071506, 0.00043613291927613318, 0.00026077500660903752, 0.00041397890890948474, 0.00078603025758638978, 0.00097134319366887212, 0.00030143451294861734, 0.00039979928988032043, 0.00077854108531028032, 0.0001520339137641713, 0.00044689120841212571, 0.00028808240313082933, 0.00032327440567314625, 0.00028844797634519637, 0.00028734948136843741, 0.00039195542922243476, 0.00022454223653767258, 0.00039399403613060713, 0.00018725472909864038, 0.00032641124562360346, 0.00031485495856031775, 0.0016555272741243243, 0.00043374704546295106, 0.00019504969532135874, 0.00041041953954845667, 0.00029103999258950353, 0.00016769942885730416, 0.00078600685810670257, 0.00027794370544143021, 0.00080295413499698043, 0.00054619647562503815, 0.00086758413817733526, 0.00037290516775101423, 0.00025074518634937704, 0.00032266415655612946, 0.00019081294885836542, 0.0002560867287684232, 0.00032139584072865546, 0.00027004137518815696, 0.0018708452116698027, 0.00044146695290692151, 0.00035975963692180812, 0.0012414442608132958, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,4,0,75,-41,45,24,-33, 
  /* [1][0][][] */ 22,54,50,10,3,-38,99,127, 
  /* [2][0][][] */ -41,-5,3,-5,-127,-13,11,14, 
  /* [3][0][][] */ 93,8,-6,-92,-127,7,39,-15, 
  /* [4][0][][] */ -127,48,-14,5,66,-14,54,22, 
  /* [5][0][][] */ -102,-24,20,-5,-127,10,9,83, 
  /* [6][0][][] */ -22,-127,26,-15,20,9,1,45, 
  /* [7][0][][] */ -61,-8,8,96,127,-28,-33,10, 
  /* [8][0][][] */ 71,2,10,-127,14,-25,-49,-31, 
  /* [9][0][][] */ -1,-127,6,0,1,96,-71,85, 
  /* [10][0][][] */ -104,-23,-6,24,-127,78,76,-4, 
  /* [11][0][][] */ 120,13,43,14,-53,-46,-31,-127, 
  /* [12][0][][] */ -4,6,38,-12,10,-75,127,64, 
  /* [13][0][][] */ 75,-18,0,-9,109,127,102,-57, 
  /* [14][0][][] */ 127,35,1,23,-101,-14,-49,-25, 
  /* [15][0][][] */ -19,-127,18,-8,7,5,4,35, 
  /* [16][0][][] */ -45,-9,-4,-3,-127,9,9,-6, 
  /* [17][0][][] */ -17,110,-127,-3,-4,-118,91,-105, 
  /* [18][0][][] */ 127,-27,-35,7,-56,26,15,96, 
  /* [19][0][][] */ 127,-61,-27,-13,45,4,25,12, 
  /* [20][0][][] */ 127,33,-9,107,-3,31,7,-58, 
  /* [21][0][][] */ 2,24,-49,7,-41,75,-127,-70, 
  /* [22][0][][] */ -127,33,32,4,-35,-18,-40,-20, 
  /* [23][0][][] */ -36,-51,1,24,-127,58,76,-14, 
  /* [24][0][][] */ 127,23,14,4,-66,-27,34,17, 
  /* [25][0][][] */ 30,-20,3,-27,127,58,52,-34, 
  /* [26][0][][] */ 5,-88,6,-30,0,-127,84,-51, 
  /* [27][0][][] */ -19,-127,28,-15,-2,-56,35,-4, 
  /* [28][0][][] */ -105,14,-27,-7,9,-22,111,127, 
  /* [29][0][][] */ -14,46,9,6,-3,54,-109,-127, 
  /* [30][0][][] */ 127,-22,10,10,-102,-7,-35,-18, 
  /* [31][0][][] */ -32,-49,95,-5,25,-85,127,95, 
  /* [32][0][][] */ -67,16,10,7,-127,-95,-102,38, 
  /* [33][0][][] */ -24,11,-2,29,-127,-57,-49,15, 
  /* [34][0][][] */ 12,-127,48,-17,-7,86,-68,53, 
  /* [35][0][][] */ -29,-51,-127,-14,-3,-70,43,-58, 
  /* [36][0][][] */ 8,127,57,6,-19,15,-21,-39, 
  /* [37][0][][] */ -127,41,41,-16,58,-25,-8,-112, 
  /* [38][0][][] */ -127,-16,-54,-19,42,23,33,108, 
  /* [39][0][][] */ -9,-27,65,4,12,-95,127,84, 
  /* [40][0][][] */ -35,-17,-11,-36,-126,109,127,-26, 
  /* [41][0][][] */ -127,45,-1,-69,-98,-95,-100,46, 
  /* [42][0][][] */ -42,-127,-96,-5,-15,68,-123,-84, 
  /* [43][0][][] */ -71,8,-16,-127,113,62,69,9, 
  /* [44][0][][] */ 127,0,16,-102,29,-40,-12,33, 
  /* [45][0][][] */ -23,-127,-10,-13,-2,-57,68,16, 
  /* [46][0][][] */ 98,-13,0,-22,127,-35,-29,4, 
  /* [47][0][][] */ 127,10,-11,117,2,23,10,-52, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00069772300776094198, 0.0014954995131120086, 0.00054737931350246072, 0.00061358045786619186, 0.00046037868014536798, 0.00052604766096919775, 0.00077662692638114095, 0.00046436509001068771, 0.00073717703344300389, 0.001399693195708096, 0.0017296820878982544, 0.00053676794050261378, 0.00071192719042301178, 0.0013863571221008897, 0.0002707285457290709, 0.00079578434815630317, 0.00051299168262630701, 0.00057565845781937242, 0.00051364261889830232, 0.00051168655045330524, 0.00069795956369489431, 0.00039984495379030704, 0.00070158974267542362, 0.00033344666007906199, 0.0005812442977912724, 0.0005606658523902297, 0.0029480166267603636, 0.00077237834921106696, 0.00034732723725028336, 0.00073083880124613643, 0.00051825825357809663, 0.00029862430528737605, 0.001399651519022882, 0.00049493758706375957, 0.0014298297464847565, 0.00097261840710416436, 0.0015449171187356114, 0.0006640365463681519, 0.00044650482595898211, 0.00057457177899777889, 0.00033978282590396702, 0.00045601656893268228, 0.00057231326354667544, 0.00048086576862260699, 0.0033314356114715338, 0.00078612531069666147, 0.00064062816090881824, 0.0022106540855020285, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -40175, 24469, -16306, -15702, 24759, -1225, 36636, 47354, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.0005120727582834661, 0.00074447703082114458, 0.0016200315440073609, 0.0017082438571378589, 0.00089357455726712942, 0.00068395334528759122, 0.00074650259921327233, 0.0010651430347934365, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -48,-13,-29,8,13,-21,-5,-15,-122,108,-34,109,116,12,77,-20,-6,-29,4,-2,-3,-29,-14,-37,23,-93,18,55,-6,8,10,-58,-3,-79,118,43,8,5,-2,-13,127,2,54,-18,-34,25,-13,-15, 
  /* [1][0][][] */ -6,33,127,-2,-5,-25,7,-84,35,3,23,0,-17,9,-6,-117,11,-62,10,7,-29,37,25,-23,-15,-14,15,6,9,-5,11,3,-3,17,13,17,-5,-36,70,-56,9,47,-3,22,-13,11,26,-9, 
  /* [2][0][][] */ 10,-45,14,-41,33,26,0,-29,10,4,0,17,-7,63,8,0,-36,120,-27,-22,-16,28,-33,-10,127,-2,2,-3,-30,-8,8,-35,0,-11,9,7,-8,-5,-12,6,18,-15,-13,1,10,21,-25,-38, 
  /* [3][0][][] */ -3,-83,-3,3,0,-9,-12,1,-8,-7,13,22,13,-9,52,5,-11,-22,6,22,-7,24,-24,7,4,48,-4,12,-5,6,127,-2,12,10,-3,-3,-23,-15,-7,13,-14,10,-1,25,-2,6,2,26, 
  /* [4][0][][] */ -91,4,-8,2,2,-40,-3,10,40,-47,19,-16,-39,1,-21,-4,2,11,7,44,7,-31,17,2,-12,50,10,103,4,2,-14,-26,-9,-127,-34,7,7,-18,6,3,-57,-18,-23,12,-56,-1,4,12, 
  /* [5][0][][] */ -21,28,19,3,-46,10,-1,45,39,6,10,1,-7,-36,15,31,-2,-85,7,11,39,-29,8,41,20,-9,-75,-42,-37,-33,17,-7,-4,-56,4,-70,65,8,-34,11,23,-30,10,4,127,-7,-39,-10, 
  /* [6][0][][] */ -30,-20,-11,-1,40,-25,-1,-37,-10,-16,42,-16,-8,36,-10,-66,-1,5,-5,-35,-32,39,2,-84,-4,-6,-58,-69,22,48,-14,1,-4,-71,-19,81,-76,-48,8,-54,-17,0,9,48,127,-32,47,20, 
  /* [7][0][][] */ 22,39,-76,34,-16,17,1,60,-2,-12,69,-37,13,-27,-8,-7,-15,-127,35,-37,68,46,20,-58,27,-21,27,-1,-12,31,-12,2,-3,38,2,-21,-14,-61,-39,-65,-15,-38,37,69,-31,-15,-10,6, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.021763091906905174, 0.031640272587537766, 0.06885133683681488, 0.072600364685058594, 0.037976916879415512, 0.02906801737844944, 0.031726360321044922, 0.045268576592206955, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -53099, 7, 7869, -92, 5919, -5014, 1366, 17521, 570, 33071, -2341, 18311, -6685, -1096, 24571, 805, 832, 14023, 31380, 10940, -441, -524, -144, 6512, -8054, 29571, 45300, 30777, 4748, 37, -1899, 560, 445, 13059, -6703, 16798, -10664, 13102, -23014, 126714, 10737, 18295, 12646, -1604, 14945, 3853, 1672, 18, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00031492422567680478, 0.00026128871832042933, 0.00019961048383265734, 0.00026943470584228635, 0.00016579266230110079, 9.6095202025026083e-05, 0.0010248386533930898, 0.00020052609033882618, 0.00014276015281211585, 0.00014716209261678159, 9.3534952611662447e-05, 0.00023313442943617702, 0.00024825474247336388, 0.00018180663755629212, 9.9797929578926414e-05, 0.0018271449953317642, 0.0002655393909662962, 0.00029398035258054733, 7.2101414843928069e-05, 0.0001610090839676559, 0.00019909942056983709, 0.00029112369520589709, 0.00015956988499965519, 0.00028710899641737342, 0.00016637073713354766, 0.00012356723891571164, 0.00066639092983677983, 0.00011578096018638462, 0.00013301275612320751, 0.020231759175658226, 0.00011757934407796711, 0.00031078065512701869, 0.0019623576663434505, 0.00020900164963677526, 0.00018967228243127465, 0.00015420748968608677, 0.00038808106910437346, 0.00018438493134453893, 0.00026473557227291167, 2.003491681534797e-05, 0.0003152731223963201, 5.8440076827537268e-05, 0.00013415691500995308, 0.00013312388909980655, 0.0001541144447401166, 0.00010092109732795507, 0.0001611286133993417, 0.0001130586169892922, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 5,-3,20,110,4,82,-2,27,17,9,8,8,-8,-9,-42,9,-2,8,-22,-116,-5,-22,127,-10,-3,5,-6,8,-6,5,16,99,20,29,39,-28,1,35,-2,1,17,-67,-8,-8,17,2,-7,-10, 127,9,15,-127,28,85,9,10,126,127,7,44,-48,-23,6,8,127,-56,-58,-58,-99,25,-110,14,17,70,-31,-83,21,21,8,-120,5,-60,127,8,-40,-47,-7,115,-79,-96,-28,3,-34,-8,-127,22, -30,-3,8,15,0,64,3,17,29,9,-14,32,-14,-3,17,4,-105,29,-3,77,-30,-12,-18,-7,-3,-59,-3,28,-18,5,4,-20,7,-23,16,-20,-1,47,42,-14,49,37,-15,11,-42,3,-2,-6, 
  /* [0][1][][] */ 125,7,0,-99,14,-27,34,-17,9,9,-13,54,-6,-1,18,-32,0,-50,-58,-86,12,-73,-124,-19,5,97,-15,-127,-9,33,13,-105,17,-52,-4,127,-3,59,-42,40,-62,-127,38,-88,-43,-15,-12,-5, 26,-127,-127,115,-127,-127,-127,-127,-127,-95,127,-127,127,127,35,-127,-85,127,127,-105,127,127,113,127,127,-127,-127,29,-127,-127,94,127,-127,127,-27,-42,127,-127,127,127,127,-79,127,127,127,-123,102,105, 54,5,49,-14,6,-61,43,18,-23,15,-106,-8,0,-40,127,5,63,-65,-69,88,15,-45,12,-34,2,6,-37,68,18,40,0,4,32,-43,7,66,-5,64,70,-11,-82,8,-85,-32,28,-17,-11,5, 
  /* [0][2][][] */ -52,-6,25,-17,7,34,-38,21,8,-23,12,33,6,-6,-38,18,5,22,-15,108,7,-32,-15,-12,-3,21,-1,50,-10,3,48,-31,-18,-43,-33,-38,-1,32,9,-23,9,-3,40,-37,-35,16,-11,18, 68,125,75,21,16,-21,122,34,19,-2,45,26,-5,0,-88,25,-59,-56,-35,126,-37,48,13,20,32,-63,-40,30,75,1,127,22,85,-25,8,-35,-25,-17,-12,117,-27,-11,-40,45,22,-33,7,-127, -40,-5,7,-4,5,-6,-62,7,-17,-9,-41,-40,19,-9,-7,12,33,24,-8,-127,24,-10,5,-9,-5,11,-10,-54,-16,8,5,9,-20,87,-38,-23,-5,36,26,-62,4,11,-38,6,-41,127,-5,-3, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013384279794991016, 0.011104770004749298, 0.0084834452718496323, 0.011450975202023983, 0.00704618776217103, 0.0040840459987521172, 0.043555639684200287, 0.0085223587229847908, 0.0060673062689602375, 0.0062543889507651329, 0.003975235391408205, 0.0099082132801413536, 0.010550825856626034, 0.007726782001554966, 0.0042414120398461819, 0.077653661370277405, 0.011285423301160336, 0.012494164519011974, 0.0030643099453300238, 0.0068428860977292061, 0.0084617249667644501, 0.012372756376862526, 0.0067817200906574726, 0.012202132493257523, 0.0070707560516893864, 0.0052516073919832706, 0.028321614488959312, 0.0049206907860934734, 0.0056530418805778027, 0.85984975099563599, 0.0049971221014857292, 0.013208177872002125, 0.083400197327136993, 0.0088825700804591179, 0.0080610718578100204, 0.0065538184717297554, 0.016493445262312889, 0.0078363595530390739, 0.011251261457800865, 0.00085148395737633109, 0.013399107381701469, 0.0024837031960487366, 0.0057016690261662006, 0.0056577650830149651, 0.0065498636104166508, 0.0042891465127468109, 0.0068479659967124462, 0.0048049911856651306, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 64749, 7902, 8220, 8393, 1601, 11344, -2119, -281, 919, 2276, 3659, 293, 1628, -742, 769, -2279, 5622, 13013, -247, 35145, 4060, 3409, 8014, -569, 3112, 4469, 23382, 12326, -62, -3091, 133, 2086, -2790, 10216, 3205, 7613, 8990, 4566, 25571, 1991, -959, 3037, 1343, 3938, 4436, 2156, -1310, 2820, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 6.704130646539852e-05, 0.00028376744012348354, 0.00018959268345497549, 0.00038170325569808483, 0.0013890326954424381, 0.00044371667900122702, 0.00090566236758604646, 0.0010291911894455552, 0.00057095475494861603, 0.00059930997667834163, 0.00061001448193565011, 0.00043086864752694964, 0.0005941773415543139, 0.000648456159979105, 0.00056283525191247463, 0.0016091273864731193, 0.00028997287154197693, 0.00032389926491305232, 0.0021040358114987612, 7.7910728577990085e-05, 0.00030093867098912597, 0.00030330586014315486, 0.0004906065296381712, 0.00081539718667045236, 0.0003822358266916126, 0.00025246362201869488, 0.00017275361460633576, 0.00030179403256624937, 0.0011334276059642434, 0.00084426102694123983, 0.00049192114965990186, 0.00037134307785890996, 0.00070521509042009711, 0.00021390423353295773, 0.00032488178112544119, 0.00024492040392942727, 0.00040879077278077602, 0.00029267091304063797, 9.2260997917037457e-05, 0.0022910130210220814, 0.00060696137370541692, 0.00090929993893951178, 0.00036746784462593496, 0.00038348801899701357, 0.00027048247284255922, 0.00050736882258206606, 0.00086422968888655305, 0.0009561910992488265, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 54,35,-1,-11,127,19,-48,-29, 
  /* [1][0][][] */ -18,-6,6,127,12,-3,7,19, 
  /* [2][0][][] */ 43,-127,-19,46,-18,-71,88,12, 
  /* [3][0][][] */ 127,-26,-6,10,-15,-14,24,-3, 
  /* [4][0][][] */ 3,-42,127,-3,-9,-40,0,-99, 
  /* [5][0][][] */ 58,28,10,-21,127,6,-11,-11, 
  /* [6][0][][] */ -22,98,-8,127,30,60,-72,-61, 
  /* [7][0][][] */ -4,127,1,1,-5,-6,9,-8, 
  /* [8][0][][] */ 127,81,10,12,-49,-32,8,-42, 
  /* [9][0][][] */ -127,5,4,14,49,8,-2,16, 
  /* [10][0][][] */ -64,-17,12,127,45,39,-21,-9, 
  /* [11][0][][] */ -127,3,10,-67,30,10,-27,-52, 
  /* [12][0][][] */ 127,18,3,18,-28,-20,6,-28, 
  /* [13][0][][] */ -19,68,-127,-16,22,117,-71,80, 
  /* [14][0][][] */ -47,-25,-14,127,17,-2,-3,-9, 
  /* [15][0][][] */ -4,127,2,-1,1,-15,12,-50, 
  /* [16][0][][] */ -13,-112,-22,-10,16,-102,127,-25, 
  /* [17][0][][] */ 19,127,-7,-18,7,87,-96,-23, 
  /* [18][0][][] */ 3,57,-127,-17,1,50,-32,71, 
  /* [19][0][][] */ -78,15,3,10,-127,5,20,20, 
  /* [20][0][][] */ -127,-31,-24,19,74,-31,42,-20, 
  /* [21][0][][] */ -65,-7,2,8,-127,-5,26,13, 
  /* [22][0][][] */ -127,-9,8,-2,89,-9,21,37, 
  /* [23][0][][] */ -18,-21,-26,-16,-8,83,-127,-106, 
  /* [24][0][][] */ -9,41,-127,4,17,50,-13,86, 
  /* [25][0][][] */ 80,-48,11,127,-52,-3,-7,-33, 
  /* [26][0][][] */ 11,-14,-2,2,-12,125,127,-32, 
  /* [27][0][][] */ 77,-8,-5,13,127,24,36,-20, 
  /* [28][0][][] */ -5,122,-71,16,13,85,-22,127, 
  /* [29][0][][] */ -8,13,-5,-10,0,88,-127,-86, 
  /* [30][0][][] */ 3,-2,1,-127,-8,4,-8,-18, 
  /* [31][0][][] */ -43,7,8,3,-127,23,5,-15, 
  /* [32][0][][] */ -11,44,12,-127,-5,33,-99,-116, 
  /* [33][0][][] */ -73,3,-6,7,-127,31,47,-8, 
  /* [34][0][][] */ -127,77,8,32,47,-23,17,14, 
  /* [35][0][][] */ -1,127,-16,6,-18,-75,62,-40, 
  /* [36][0][][] */ -22,53,1,-27,-5,97,-127,-33, 
  /* [37][0][][] */ 21,-39,2,17,23,-127,102,-6, 
  /* [38][0][][] */ 8,-127,17,21,-8,37,-44,74, 
  /* [39][0][][] */ 3,-127,-9,-10,-6,-5,-54,-104, 
  /* [40][0][][] */ 78,59,22,-7,-24,74,-127,-110, 
  /* [41][0][][] */ 3,-127,12,6,15,86,-52,118, 
  /* [42][0][][] */ 64,-15,-20,-127,-60,0,2,-34, 
  /* [43][0][][] */ -74,-44,0,-127,61,14,-20,6, 
  /* [44][0][][] */ -9,-33,7,23,-26,96,127,-7, 
  /* [45][0][][] */ -127,-18,-15,10,6,0,32,-13, 
  /* [46][0][][] */ 8,65,127,-4,-3,9,15,32, 
  /* [47][0][][] */ -7,4,-2,127,9,-4,1,2, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00017583693261258304, 0.00074426946230232716, 0.00049726653378456831, 0.0010011369595304132, 0.0036431755870580673, 0.001163786742836237, 0.0023753847926855087, 0.0026993779465556145, 0.0014975086087360978, 0.0015718791401013732, 0.0015999551396816969, 0.0011300886981189251, 0.0015584172215312719, 0.0017007804708555341, 0.0014762127539142966, 0.0042204433120787144, 0.00076054513920098543, 0.00084952783072367311, 0.0055184965021908283, 0.00020434542966540903, 0.00078930641757324338, 0.00079551513772457838, 0.0012867701007053256, 0.0021386358421295881, 0.0010025338269770145, 0.00066216534469276667, 0.00045310077257454395, 0.00079154985724017024, 0.0029727707151323557, 0.0022143404930830002, 0.0012902182061225176, 0.00097396416822448373, 0.0018496486591175199, 0.00056103122187778354, 0.00085210480028763413, 0.00064238090999424458, 0.0010721825528889894, 0.00076762167736887932, 0.00024198352184612304, 0.0060089030303061008, 0.0015919472789391875, 0.0023849254939705133, 0.0009638001793064177, 0.001005818136036396, 0.00070942548336461186, 0.0013307345798239112, 0.0022667145822197199, 0.002507912227883935, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -5666, -26128, 22157, 22874, 3521, 2612, 40186, 9947, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0013484974624589086, 0.00057924061547964811, 0.0016913538565859199, 0.0013480432098731399, 0.0010427621891722083, 0.0010416338918730617, 0.0007489357958547771, 0.0006134470459073782, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -10,-3,10,-90,13,23,11,4,0,4,3,-8,96,0,2,8,0,-9,-5,0,83,-7,-1,4,29,41,12,19,2,7,6,-127,12,6,1,3,-27,-3,-12,31,7,-28,-5,3,6,-3,4,4, 
  /* [1][0][][] */ -36,-3,-5,-5,46,32,-30,83,20,12,-31,-26,12,0,17,38,0,46,19,-52,1,24,127,22,-25,-1,56,4,24,1,18,-12,16,-8,-12,-23,10,-56,8,1,-6,-9,-91,2,-42,6,-59,-99, 
  /* [2][0][][] */ -55,22,4,13,39,-8,25,26,-8,59,4,4,4,0,7,46,0,12,-127,23,0,10,3,-13,-31,5,32,9,8,33,20,7,4,-2,-17,-12,12,7,9,-1,38,-9,-33,0,21,-52,22,11, 
  /* [3][0][][] */ -2,2,-2,10,-9,31,3,-5,71,12,-5,-2,26,0,-32,-2,0,-4,-5,3,-2,-6,2,-22,-13,-6,-12,1,-13,-2,3,-8,-43,43,-55,-3,3,-3,9,-127,-1,2,6,-55,2,-5,7,6, 
  /* [4][0][][] */ 2,-7,84,35,4,-23,-3,-6,0,-2,0,-12,-76,0,-12,2,0,6,4,7,67,3,1,-2,-15,30,-8,51,-8,0,-2,101,1,0,-1,4,14,-9,-16,-15,1,-127,4,4,0,1,1,6, 
  /* [5][0][][] */ -9,46,6,-9,-1,52,26,14,-21,32,6,56,29,0,-127,0,0,16,-31,19,-6,11,-14,42,-17,-2,31,-3,-10,20,21,-13,51,32,-41,-5,8,16,-50,16,24,-12,-11,29,22,54,18,25, 
  /* [6][0][][] */ -25,-60,0,4,41,-48,-21,9,31,-25,-13,89,-2,0,-127,45,0,-11,48,-18,-2,-2,26,-34,30,-4,-3,-8,47,-13,-9,-3,94,-32,26,1,-9,-5,-69,-25,-12,-12,-2,-31,-18,-86,-16,-25, 
  /* [7][0][][] */ -118,-27,-3,11,127,26,66,28,14,5,29,-26,-24,0,88,104,0,10,5,66,-6,-13,-29,44,18,4,46,13,54,65,59,-3,-16,-17,-22,-21,4,30,27,42,77,4,-26,-15,61,3,66,82, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.05731114000082016, 0.024617725983262062, 0.071882538497447968, 0.05729183554649353, 0.044317394495010376, 0.044269438832998276, 0.031829770654439926, 0.026071500033140182, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 79994, 50288, 62573, 43070, 28, 14217, 2416, 29231, 28848, 20921, 29690, 5104, -45672, -127, 20441, 1131, -204, 24133, 2977, 1394, -15540, 647, 51612, 30248, -17424, 31425, 35809, 21270, -2281, 15489, -7941, -51948, 9234, 107075, 28388, 1576, 54254, 287, 130185, -28417, 13832, -29789, 2597, 85572, -856, 84576, 1910, -22080, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.4932824645657092e-05, 7.8516728535760194e-05, 0.00016228829917963594, 0.00012978329323232174, 0.00010428447421872988, 0.0001680028362898156, 0.00011499254469526932, 5.588844942394644e-05, 7.9832905612420291e-05, 3.6677607567980886e-05, 8.6045911302790046e-05, 3.0792296456638724e-05, 0.00016625742136966437, 0.005541567225009203, 0.00012267573038116097, 0.00017706018115859479, 0.0027484172023832798, 2.4284376195282675e-05, 8.8016138761304319e-05, 0.00016912294086068869, 0.00012408458860591054, 0.00016131234588101506, 0.00011166657350258902, 3.6314388125902042e-05, 8.2526705227792263e-05, 8.6666856077499688e-05, 3.5799290344584733e-05, 4.6942404878791422e-05, 0.00033891588100232184, 5.3545023547485471e-05, 4.9277019570581615e-05, 0.00018871219072025269, 0.00024898533592931926, 9.0536887000780553e-06, 8.6614942119922489e-05, 0.00016680124099366367, 1.7100970580941066e-05, 0.00040559860644862056, 3.5763045161729679e-05, 9.7307092801202089e-05, 6.0299287724774331e-05, 0.00025931824347935617, 0.00010730598296504468, 1.0614751772664022e-05, 0.00012939746375195682, 6.8758396082557738e-05, 0.00019469934341032058, 0.00012598282773979008, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -42,-22,-7,-17,7,-40,-79,-70,-25,-50,9,65,33,-71,115,-43,-113,-82,37,-6,-1,-71,-112,-80,-35,-123,-65,-20,71,15,95,29,-127,-89,-7,53,17,46,-127,79,-78,-14,103,-110,-3,-34,-86,105, 75,12,-28,-29,59,-127,-127,-81,59,-75,-114,106,39,-82,-1,62,-52,-112,60,7,11,-115,-127,-70,-4,-127,-120,-39,-53,20,-56,53,30,-127,63,85,12,71,-93,127,-127,5,123,-127,2,-23,-127,92, -33,41,7,-6,-65,-109,-59,-19,88,-7,-127,37,8,-71,-100,-11,-127,-24,27,11,-15,-77,-36,-23,-11,-31,-60,-11,-10,18,-24,11,108,-88,72,32,15,35,-4,17,-79,4,6,-80,-17,6,-56,14, 
  /* [0][1][][] */ -86,-127,-44,-44,-10,54,100,-105,-24,-108,-20,112,88,-64,28,-97,-121,-95,90,-76,41,-87,-104,-127,41,-114,-78,-38,127,-61,127,87,-43,-85,-12,83,-36,-78,-107,92,42,60,106,-111,-92,-117,82,120, 127,-81,-127,-127,127,41,95,-127,99,-127,-110,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-119,-120,127,-98,-127,-127,-117,-127,-71,127,30,-111,127,127,-69,-127,-97,89,61,127,127,-116,-113,-127,123,127, -53,29,-62,-85,-120,-24,30,-37,127,-19,-75,35,55,-70,-25,-44,-37,-29,53,-70,56,-83,-38,-23,47,-5,-46,-60,17,-89,-36,21,30,-100,120,23,-37,-62,2,-14,36,55,10,-77,-59,-37,64,35, 
  /* [0][2][][] */ -60,-107,-35,-35,0,34,-5,-34,-37,-59,-16,60,76,-127,-127,-65,-43,-19,65,76,51,-35,-13,-59,31,-52,-11,-60,75,28,76,65,109,-27,-36,-9,-95,34,-19,32,9,39,16,-57,96,-78,3,31, 87,-73,-90,-88,80,18,6,-45,48,-69,-32,55,83,-26,16,91,-24,-31,78,117,81,-55,-18,-58,94,-64,-19,-100,-49,39,-44,111,-17,-50,67,8,-127,50,-17,-1,10,32,17,-65,127,-100,-12,39, -28,28,-43,-37,-80,-19,21,-11,60,-4,-13,32,30,-43,112,-30,-93,-3,30,59,73,-31,-2,-3,42,1,-4,-63,-13,28,-21,41,-91,-44,68,4,-21,21,25,-39,6,37,-6,-14,62,-33,-5,17, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0031846449710428715, 0.0033369609154760838, 0.006897252518683672, 0.0055157900787889957, 0.0044320900924503803, 0.0071401204913854599, 0.0048871831968426704, 0.0023752590641379356, 0.0033928984776139259, 0.0015587983652949333, 0.0036569510120898485, 0.0013086725957691669, 0.0070659401826560497, 0.23551659286022186, 0.0052137183956801891, 0.0075250575318932533, 0.1168077290058136, 0.0010320859728381038, 0.0037406857591122389, 0.0071877245791256428, 0.0052735949866473675, 0.0068557746708393097, 0.0047458293847739697, 0.0015433614607900381, 0.0035073847975581884, 0.00368334143422544, 0.0015214697923511267, 0.0019950522109866142, 0.014403924345970154, 0.0022756634280085564, 0.0020942732226103544, 0.0080202678218483925, 0.010581876151263714, 0.00038478177157230675, 0.0036811348982155323, 0.0070890523493289948, 0.00072679127333685756, 0.017237940803170204, 0.0015199293848127127, 0.0041355513967573643, 0.0025627196300774813, 0.0110210245475173, 0.0045605041086673737, 0.00045112695079296827, 0.005499392282217741, 0.0029222317971289158, 0.0082747219130396843, 0.005354270339012146, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4726, -20, 11536, 6734, 8126, 7662, 12886, -24, -55, -362, 2126, 498, 14316, -90939816, 3125, 23436, -73411336, -124, -576, 10214, 3907, -17, 4, 425, 3746, -987, 59, 642, 4084, 1717, 3047, 16544, 4075, 371, 323, -2054, 363, 4562, -169, 14489, 2284, 15067, -431, -118, 16582, 153, 9976, 4055, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00043587936670519412, 0.00039612586260773242, 0.00027200029580853879, 0.0002806598786264658, 0.00024673008010722697, 0.00027180605684407055, 0.00029502820689231157, 0.0015611968701705337, 0.00035616432433016598, 0.0020784509833902121, 0.00071294221561402082, 0.0016774189425632358, 0.00015308483853004873, 1.7834174137476566e-09, 0.00084447982953861356, 0.0001409981632605195, 1.7834174137476566e-09, 0.0056455135345458984, 0.0003752823977265507, 0.000376547483028844, 0.00027349818265065551, 0.004465973936021328, 0.00032421189825981855, 0.0014320347690954804, 0.0010067358380183578, 0.00055514619452878833, 0.0022134534083306789, 0.0019872623961418867, 0.00026567524764686823, 0.0017030786257237196, 0.00095979869365692139, 0.00014205944899003953, 0.00018498572171665728, 0.00872001051902771, 0.00044822102063335478, 0.0005815187469124794, 0.0041311788372695446, 0.00028255186043679714, 0.0022379974834620953, 0.00023736448201816529, 0.0012259554350748658, 0.00015045069449115545, 0.00038642421714030206, 0.0076319384388625622, 0.00030348249129019678, 0.00050126202404499054, 0.00028273445786908269, 0.00021451202337630093, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 15,-127,46,-42,30,-25,-44,26, 
  /* [1][0][][] */ 64,96,-15,-85,2,-6,-81,127, 
  /* [2][0][][] */ 27,4,-46,127,50,125,48,89, 
  /* [3][0][][] */ 77,71,-73,127,-79,-9,-8,8, 
  /* [4][0][][] */ -35,-103,68,12,1,23,-44,-127, 
  /* [5][0][][] */ 29,8,-35,46,-2,-21,43,127, 
  /* [6][0][][] */ 63,-12,-127,-89,113,22,56,-29, 
  /* [7][0][][] */ 127,21,24,-28,30,-6,80,-53, 
  /* [8][0][][] */ 15,-90,15,103,6,26,-12,-127, 
  /* [9][0][][] */ 102,-117,12,-1,-15,21,-127,97, 
  /* [10][0][][] */ -127,-34,-101,24,-3,12,-104,47, 
  /* [11][0][][] */ -21,-40,-11,-97,-127,-30,44,-15, 
  /* [12][0][][] */ 14,2,-50,88,-84,-30,69,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -5,-31,-5,13,34,127,46,38, 
  /* [15][0][][] */ 44,5,27,-127,72,50,-66,64, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 11,29,127,25,-37,-3,28,26, 
  /* [18][0][][] */ 86,-127,27,36,-12,26,-113,2, 
  /* [19][0][][] */ -127,-16,29,70,-43,-46,-89,57, 
  /* [20][0][][] */ 36,29,-45,104,-11,-127,-13,64, 
  /* [21][0][][] */ 52,21,127,12,-16,-7,63,4, 
  /* [22][0][][] */ -75,-14,-127,-1,5,5,-101,9, 
  /* [23][0][][] */ -88,121,-16,-20,5,-10,127,-68, 
  /* [24][0][][] */ 5,-45,-43,81,-8,-53,94,127, 
  /* [25][0][][] */ 5,46,25,31,125,127,-74,-52, 
  /* [26][0][][] */ -79,-23,-127,-4,13,22,-96,2, 
  /* [27][0][][] */ 4,-27,-33,-3,-29,127,54,52, 
  /* [28][0][][] */ 8,-11,-23,27,27,127,41,68, 
  /* [29][0][][] */ 79,37,127,-3,-21,-14,84,-18, 
  /* [30][0][][] */ -94,127,-30,-25,3,-13,121,-55, 
  /* [31][0][][] */ -51,-85,-17,0,27,-80,127,112, 
  /* [32][0][][] */ 9,1,-49,113,-22,97,84,127, 
  /* [33][0][][] */ -4,58,-14,-102,8,-4,-11,127, 
  /* [34][0][][] */ -17,78,-6,-87,34,4,11,127, 
  /* [35][0][][] */ 127,-1,-34,-39,32,27,116,-55, 
  /* [36][0][][] */ -127,11,43,70,-43,5,-121,81, 
  /* [37][0][][] */ -8,-33,-14,37,42,127,55,47, 
  /* [38][0][][] */ 12,27,9,84,127,-7,-22,38, 
  /* [39][0][][] */ 4,23,33,-127,25,-3,-32,117, 
  /* [40][0][][] */ 103,26,127,7,-3,3,87,-3, 
  /* [41][0][][] */ -8,-27,-29,85,49,127,71,92, 
  /* [42][0][][] */ -83,-6,127,26,-38,30,-30,61, 
  /* [43][0][][] */ -15,-51,13,110,-24,3,22,-127, 
  /* [44][0][][] */ 28,-11,-87,-127,89,-34,-13,-120, 
  /* [45][0][][] */ -82,127,-1,-49,10,-1,81,-47, 
  /* [46][0][][] */ -127,-12,41,16,-28,42,-85,47, 
  /* [47][0][][] */ 103,16,97,0,16,-37,127,-4, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00096223159926012158, 0.00087447318946942687, 0.00060045806458219886, 0.00061957462457939982, 0.00054467242443934083, 0.00060002924874424934, 0.0006512936670333147, 0.003446442075073719, 0.0007862555212341249, 0.0045883134007453918, 0.0015738655347377062, 0.003703009570017457, 0.00033794456976465881, 3.937008052901092e-09, 0.0018642432987689972, 0.00031126246904022992, 3.937008052901092e-09, 0.012462832033634186, 0.00082845991710200906, 0.00083125266246497631, 0.00060376472538337111, 0.0098589230328798294, 0.00071571854641661048, 0.0031613083556294441, 0.0022224339190870523, 0.001225520740263164, 0.0048863398842513561, 0.0043870089575648308, 0.00058649509446695447, 0.0037596551701426506, 0.0021188170649111271, 0.00031360532739199698, 0.00040836783591657877, 0.019249981269240379, 0.00098947656806558371, 0.0012837398098781705, 0.0091198412701487541, 0.00062375131528824568, 0.0049405228346586227, 0.00052399729611352086, 0.0027063752058893442, 0.00033212953712791204, 0.00085305620450526476, 0.016847992315888405, 0.00066995702218264341, 0.0011065680300816894, 0.00062415440334007144, 0.00047354903654195368, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 1656, -42925, -7738, -13347, -33342, -981, -25318, -29657, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0022470664698630571, 0.0020092816557735205, 0.0024566364008933306, 0.0011984548764303327, 0.0012598877074196935, 0.002478897338733077, 0.0015583568019792438, 0.00095281691756099463, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-23,-3,-2,127,-6,-1,-1,-1,-125,-92,-6,0,120,-4,0, 
  /* [1][0][][] */ 0,-28,-2,87,74,11,25,5,1,-9,127,-44,0,27,-11,0, 
  /* [2][0][][] */ 0,2,0,-13,-56,5,7,1,0,5,-17,2,0,127,-7,0, 
  /* [3][0][][] */ 0,-12,-17,-127,78,23,69,20,-2,62,1,35,0,2,17,0, 
  /* [4][0][][] */ 0,50,-21,38,-52,29,127,6,2,-56,16,-10,0,-6,19,0, 
  /* [5][0][][] */ 0,-15,-10,-1,-23,-21,-17,13,2,9,-3,-44,0,-6,127,0, 
  /* [6][0][][] */ 0,15,-2,2,52,-19,-24,-8,5,-104,109,66,0,127,64,0, 
  /* [7][0][][] */ 0,11,-13,127,9,-3,20,12,-2,72,-53,74,0,-6,54,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.09550032764673233, 0.085394464433193207, 0.10440704226493835, 0.050934329628944397, 0.053545225411653519, 0.10535313189029694, 0.066230162978172302, 0.040494717657566071, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 22664, 54351, 12387, 10975, 59341, 13412, 67373, -7383, 6985, 29829, 14128, -445, 27042, 8983, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00011725513468263671, 7.4291659984737635e-05, 0.00028605764964595437, 0.00016323679301422089, 5.5786098528187722e-05, 0.00038252482772804797, 5.8107023505726829e-05, 2.1630698029184714e-05, 0.00025642465334385633, 0.00019791569502558559, 0.0007361280731856823, 0.00072724185883998871, 0.00023390517162624747, 0.00022530666319653392, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-83,-126,39,-67,80,-75,-90,-3,-8,29,-127,5,54,-73, 51,24,-127,127,127,-127,127,-127,-86,127,-127,52,-105,5,127,-25, 24,-25,91,-2,-72,67,-95,78,-95,-27,4,-16,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-23,13,-44,15,-29,15,-28,1,3,-109,-49,8,-30,-14, -78,-42,-58,-15,-8,-26,8,-27,-109,-89,21,-12,-104,-127,1,23, 14,1,65,2,3,33,-25,34,-127,7,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-73,68,2,-6,38,-39,53,-76,0,-1,4,40,2,-27,23, 23,-4,31,-2,-27,39,-34,22,-126,-13,0,84,-58,0,-28,-111, 21,-7,19,0,4,14,9,23,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0049833431839942932, 0.0031573956366628408, 0.012157449498772621, 0.006937563419342041, 0.0023709090892225504, 0.016257304698228836, 0.0024695484898984432, 0.00091930467169731855, 0.010898047126829624, 0.0084114167839288712, 0.031285442411899567, 0.030907778069376945, 0.0099409697577357292, 0.0095755327492952347, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 19209, -92924, -2218, 211866, 27940, 29770, 26700, -164707, 11605, 21897, 613178, -1073741824, 39429, 31731, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00022541265934705734, 0.00025235317298211157, 5.0788548833224922e-05, 1.2992486517759971e-05, 0.00020865866099484265, 9.4519018603023142e-05, 0.00036898191319778562, 1.02965841506375e-05, 7.7181874075904489e-05, 0.00013839556777384132, 9.5783270808169618e-06, 1.1533876076441629e-09, 9.7061521955765784e-05, 4.193736458546482e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 55,-1,32, 6,-15,19, -127,-125,-77, 
  /* [1][1][][] */ 6,-4,-3, -18,5,-6, -4,-40,-5, 
  /* [1][2][][] */ -4,17,-5, -3,8,-4, 34,-25,6, 
  /* [2][0][][] */ 27,-7,-14, 73,112,-9, 45,-36,5, 
  /* [2][1][][] */ 15,16,-3, 74,127,-36, 26,-1,-7, 
  /* [2][2][][] */ 53,-63,19, 75,-44,-25, 35,-54,13, 
  /* [3][0][][] */ 15,40,8, 35,99,17, -5,-1,-11, 
  /* [3][1][][] */ 35,47,13, 68,127,20, -20,-27,-3, 
  /* [3][2][][] */ 18,12,13, 35,33,13, -3,-6,1, 
  /* [4][0][][] */ 40,80,-4, 17,95,-1, -5,23,15, 
  /* [4][1][][] */ 54,101,67, 31,127,42, 43,62,-6, 
  /* [4][2][][] */ 62,84,47, 48,127,22, -22,25,29, 
  /* [5][0][][] */ 3,-9,-127, -10,-10,-114, -19,15,-40, 
  /* [5][1][][] */ 3,-51,-124, -4,-55,-116, -14,-2,-34, 
  /* [5][2][][] */ -4,5,-12, -1,-10,-9, -13,0,-18, 
  /* [6][0][][] */ 24,-65,34, 48,-89,40, 7,-22,7, 
  /* [6][1][][] */ 39,-95,65, 67,-127,75, 9,-27,19, 
  /* [6][2][][] */ 23,-32,18, 17,-42,30, -11,9,1, 
  /* [7][0][][] */ -30,18,3, -92,-23,8, -25,23,1, 
  /* [7][1][][] */ -22,-13,-8, -127,-83,-7, -9,-5,1, 
  /* [7][2][][] */ -28,25,-14, -12,15,2, -21,26,-2, 
  /* [8][0][][] */ 127,84,37, 125,83,33, 96,53,13, 
  /* [8][1][][] */ 122,80,35, 119,77,29, 88,47,9, 
  /* [8][2][][] */ 107,69,25, 108,70,24, 68,35,1, 
  /* [9][0][][] */ -23,-6,5, -18,-12,-7, -1,-1,-14, 
  /* [9][1][][] */ 87,104,-12, 76,127,20, -10,17,23, 
  /* [9][2][][] */ -25,-26,12, 7,-26,2, 14,7,-16, 
  /* [10][0][][] */ -25,-83,-18, 34,95,20, -9,-12,-2, 
  /* [10][1][][] */ -59,-103,-14, 78,127,14, -17,-26,0, 
  /* [10][2][][] */ -32,-20,1, 36,23,-12, -9,-1,7, 
  /* [11][0][][] */ -14,-28,-3, 9,-45,3, 8,-104,-56, 
  /* [11][1][][] */ -48,-46,-22, -37,-67,-41, -16,-63,-57, 
  /* [11][2][][] */ -9,-43,-84, 119,127,62, -41,11,-51, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-17, -62,-111,-24, -9,-17,-5, 
  /* [13][1][][] */ 61,115,16, 57,127,25, 7,16,12, 
  /* [13][2][][] */ -9,-19,4, 0,-19,-2, -1,4,-4, 
  /* [14][0][][] */ 47,-3,-35, 79,-24,-48, 28,-12,-22, 
  /* [14][1][][] */ 90,-14,-71, 127,-38,-86, 57,-19,-37, 
  /* [14][2][][] */ 56,-7,-44, 74,-19,-51, 25,-6,-18, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.4916391200567887e-07, 0.060071550309658051, 0.067251086235046387, 0.013534939847886562, 0.0034624442923814058, 0.055606678128242493, 0.025188930332660675, 0.09833216667175293, 0.0027439973782747984, 0.020568652078509331, 0.036881852895021439, 0.0025525849778205156, 3.0737305678485427e-07, 0.025866497308015823, 0.011176135390996933, 3.313542507044076e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.45298799872398376, } };
const TfArray<1, int> quant46_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.38126975297927856, } };
const TfArray<1, int> quant50_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.57512038946151733, } };
const TfArray<1, int> quant53_zero = { 1, { -39 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.56157326698303223, } };
const TfArray<1, int> quant54_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.33241546154022217, } };
const TfArray<1, int> quant58_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.26110354065895081, } };
const TfArray<1, int> quant61_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.3605838418006897, } };
const TfArray<1, int> quant62_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.23573976755142212, } };
const TfArray<1, int> quant65_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.4277404248714447, } };
const TfArray<1, int> quant66_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.061518862843513489, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.13015761971473694, } };
const TfArray<1, int> quant69_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
